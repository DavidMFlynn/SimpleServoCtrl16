SimpleServo16PS.asm                                                   Page: 1
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00001 0000 	;====================================================================================================
00002 0000 	;
00003 0000 	;    Filename:      SimpleServo16PS.asm
00004 0000 	;    Date:          4/7/2021
00005 0000 	;    File Version:  1.0b1
00006 0000 	;    
00007 0000 	;    Author:        David M. Flynn
00008 0000 	;    Company:       Oxford V.U.E., Inc.
00009 0000 	;    E-Mail:        dflynn@oxfordvue.com
00010 0000 	;    Web Site:      http://www.oxfordvue.com/
00011 0000 	;
00012 0000 	;====================================================================================================
00013 0000 	;    SimpleServo is a 16 servo controller with speed, accel and position control.
00014 0000 	;    SimpleServo16PS is the TTL packet serial version.
00015 0000 	;
00016 0000 	;    Features:	TTL Packet Serial
00017 0000 	;	R/C Servo PWM output 16 channel at 20mS
00018 0000 	;	3 Buttons/LEDs for config
00019 0000 	;
00020 0000 	;    History:
00021 0000 	;
00022 0000 	; 1.0b1   4/7/2021	Mode 0 is working. Making progress on Sequencer.
00023 0000 	; 1.0d1   3/31/2021	Copied from Simple Servo 16 1.0d3
00024 0000 	;
00025 0000 	;====================================================================================================
00026 0000 	; Options
00027 0000 	;
00028 0000 	;====================================================================================================
00029 0000 	;====================================================================================================
00030 0000 	; What happens next:
00031 0000 	;   At power up the system LED will blink.
00032 0000 	;
00033 0000 	;  Mode 0
00034 0000 	;    Host control mode.
00035 0000 	;    Host may start the sequencer, it will run until a kSeqCmd_Stop or kSeqCmd_End command.
00036 0000 	;
00037 0000 	;  Mode 1
00038 0000 	;    Servo sequencer runs in a loop forever. 
00039 0000 	;    kSeqCmd_Stop is iqnored. kSeqCmd_End resets the pointer to 0.
00040 0000 	;
00041 0000 	;====================================================================================================
00042 0000 	; PIC16F1847 on SimpleServo16 PCB Packet Serial Version
00043 0000 	;
00044 0000 	;   Pin 1 (RA2/AN2) Address A2 (output)
00045 0000 	;   Pin 2 (RA3/AN3) Enable Servos 0..7 (active low output)
00046 0000 	;   Pin 3 (RA4/AN4) Enable Servos 8..15 (active low output)
00047 0000 	;   Pin 4 (RA5/MCLR*) Vpp
00048 0000 	;   Pin 5 (GND) Ground
00049 0000 	;   Pin 6 (RB0) SW1/LED1 (Active Low Input/Output) (System LED)
00050 0000 	;   Pin 7 (RB1/AN11/SDA1) RX Data
00051 0000 	;   Pin 8 (RB2/AN10/RX)   TX Data 
00052 0000 	;   Pin 9 (RB3/CCP1) Pulse output for Servos 0..7
00053 0000 	;
00054 0000 	;   Pin 10 (RB4/AN8/SLC1) SW2/LED2 (Active Low Input/Output)
00055 0000 	;   Pin 11 (RB5/AN7)  SW3/LED3 (Active Low Input/Output)
00056 0000 	;   Pin 12 (RB6/AN5/CCP2) ICSPCLK
00057 0000 	;   Pin 13 (RB7/AN6) ICSPDAT
00058 0000 	;   Pin 14 (Vcc) +5 volts
00059 0000 	;   Pin 15 (RA6) N.C.
00060 0000 	;   Pin 16 (RA7/CCP2) Pulse output for Servos 8..15
00061 0000 	;   Pin 17 (RA0) Address A0 (output)
00062 0000 	;   Pin 18 (RA1) Address A1 (output)
00063 0000 	;
00064 0000 	;====================================================================================================
00065 0000 	;
00066 0000 	;
00067 0000 		list	p=16f1847,r=hex,W=1	; list directive to define processor
00001 0000 		nolist
00002 0000 	;
00003 0000 	;==========================================================================
00004 0000 	;  MPASM PIC16F1847 processor include
00005 0000 	; 
00006 0000 	;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
00007 0000 	;  Modified by DMF 11/16/2013
00008 0000 	;==========================================================================
00009 0000 	;
01163 0000 		NOLIST
01164 0000 	;
00070 0000 		list
00071 0000 	;
00072 8007 EFA4 		__CONFIG _CONFIG1,_FOSC_INTOSC & _WDTE_OFF & _MCLRE_OFF & _IESO_OFF
00073 0000 	;
00074 0000 	;
00075 0000 	; INTOSC oscillator: I/O function on CLKIN pin
00076 0000 	; WDT disabled
00077 0000 	; PWRT disabled
00078 0000 	; MCLR/VPP pin function is digital input
00079 0000 	; Program memory code protection is disabled
00080 0000 	; Data memory code protection is disabled
00081 0000 	; Brown-out Reset enabled
00082 0000 	; CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin
00083 0000 	; Internal/External Switchover mode is disabled
00084 0000 	; Fail-Safe Clock Monitor is enabled
00085 0000 	;
00086 8008 DEFF 		__CONFIG _CONFIG2,_WRT_OFF & _PLLEN_OFF & _LVP_OFF
00087 0000 	;
00088 0000 	; Write protection off
00089 0000 	; 4x PLL disabled
00090 0000 	; Stack Overflow or Underflow will cause a Reset
SimpleServo16PS.asm                                                   Page: 2
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00091 0000 	; Brown-out Reset Voltage (Vbor), low trip point selected.
00092 0000 	; Low-voltage programming enabled
00093 0000 	;
00094 0000 	; '__CONFIG' directive is used to embed configuration data within .asm file.
00095 0000 	; The lables following the directive are located in the respective .inc file.
00096 0000 	; See respective data sheet for additional information on configuration word.
00097 0000 	;
00098 0000 		constant	oldCode=0
00099 0000 		constant	useRS232=1
00100 0000 		constant	UseEEParams=1
00101 0000 		constant	UseAuxLEDBlinking=0
00102 0000 	;
00103 0000 		constant	UseAltSerialPort=0
00104 0000 		constant	RP_LongAddr=0
00105 0000 		constant	RP_AddressBytes=1
00106 0000 		constant	RP_DataBytes=4
00107 0000 		constant	UseRS232SyncBytes=1
00108 0000 00DD 	kRS232SyncByteValue	EQU	0xDD
00109 0000 		constant	UseRS232Chksum=1
00110 0000 		constant               UsePID=0
00111 0000 	;
00112 0000 0001 	kRS232_MasterAddr	EQU	0x01	;Master's Address
00113 0000 0002 	kRS232_SlaveAddr	EQU	0x02	;This Slave's Address
00114 0000 0000 	kSysMode	EQU	.0	;Default Mode
00115 0000 0000 	kMaxMode	EQU	.0	;Last mode
00116 0000 0000 	kssFlags	EQU	.0
00117 0000 	;
00118 0000 0003 	#Define	_C	STATUS,C
00119 0000 0003 	#Define	_Z	STATUS,Z
00120 0000 	;
00121 0000 	;====================================================================================================
00124 0000 		nolist
00125 0000 	;
00126 0000 	;    Port A bits
00127 0000 0060 	PortADDRBits	EQU	b'01100000'
00128 0000 0018 	PortAValue	EQU	b'00011000'
00129 0000 0000 	ANSELA_Val	EQU	b'00000000'
00130 0000 	;
00131 0000 010C 	#Define	Servo_A0	LATA,0	;Output
00132 0000 010C 	#Define	Servo_A1	LATA,1	;Output
00133 0000 010C 	#Define	Servo_A2	LATA,2	;Output
00134 0000 010C 	#Define	Enable0_7	LATA,3	;Output RA3
00135 0000 010C 	#Define	Enable8_15	LATA,4	;Output RA4
00136 0000 000C 	#Define	RA5_In	PORTA,5	;unused, Vpp
00137 0000 000C 	#Define	RA6_In	PORTA,6	;unused, n/c
00138 0000 000C 	#Define	RA7_Out	PORTA,7	;CCP2 Output
00139 0000 	;
00140 0000 00F8 	Servo_AddrDataMask	EQU	0xF8
00141 0000 	;
00142 0000 	;
00143 0000 	;    Port B bits
00144 0000 00F7 	PortBDDRBits	EQU	b'11110111'	;LEDs Out Others In
00145 0000 0004 	PortBValue	EQU	b'00000100'
00146 0000 0000 	ANSELB_Val	EQU	b'00000000'
00147 0000 	;
00148 0000 000D 	#Define	SW1_In	PORTB,0	;SW1/LED1
00149 0000 000D 	#Define	RB1_In	PORTB,1	;RX Data
00150 0000 000D 	#Define	RB2_In	PORTB,2	;TX Data
00151 0000 000D 	#Define	RB3_Out	PORTB,3	;CCP1 Output
00152 0000 000D 	#Define	SW2_In	PORTB,4	;SW2/LED2
00153 0000 000D 	#Define	SW3_In	PORTB,5	;SW3/LED3
00154 0000 000D 	#Define	RB6_In	PORTB,6	;N.C. ICSPCLK
00155 0000 000D 	#Define	RB7_In	PORTB,7	;N.C. ICSPDAT
00156 0000 0000 	LED1_Bit	EQU	0	;LED1 (Active Low Output)
00157 0000 0004 	LED2_Bit	EQU	4	;LED2 (Active Low Output)
00158 0000 0005 	LED3_Bit	EQU	5	;LED3 (Active Low Output)
00159 0000 008D 	#Define	LED1_Tris	TRISB,LED1_Bit	;LED1 (Active Low Output)
00160 0000 008D 	#Define	LED2_Tris	TRISB,LED2_Bit	;LED2 (Active Low Output)
00161 0000 008D 	#Define	LED3_Tris	TRISB,LED3_Bit	;LED3 (Active Low Output)
00162 0000 	;
00163 0000 	;
00164 0000 	;========================================================================================
00165 0000 	;========================================================================================
00166 0000 	;
00167 0000 	;Constants
00168 0000 00FF 	All_In	EQU	0xFF
00169 0000 0000 	All_Out	EQU	0x00
00170 0000 	;
00171 0000 	;OSCCON_Value	EQU	b'01110010'	;8MHz
00172 0000 00F0 	OSCCON_Value	EQU	b'11110000'	;32MHz
00173 0000 	;T2CON_Value	EQU	b'01001110'	;T2 On, /16 pre, /10 post
00174 0000 004F 	T2CON_Value	EQU	b'01001111'	;T2 On, /64 pre, /10 post
00175 0000 007D 	PR2_Value	EQU	.125
00176 0000 	;
00177 0000 0064 	LEDTIME	EQU	d'100'	;1.00 seconds
00178 0000 000A 	LEDErrorTime	EQU	d'10'
00179 0000 0014 	LEDFastTime	EQU	d'20'
00180 0000 	;
00181 0000 0021 	T1CON_Val	EQU	b'00100001'	;Fosc=32MHz, PreScale=4, Fosc/4, Timer ON
00182 0000 	;
00183 0000 0024 	TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, high speed
00184 0000 0090 	RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00185 0000 0008 	BAUDCON_Value	EQU	b'00001000'	;BRG16=1
00186 0000 	; 32MHz clock low speed (BRGH=1,BRG16=1)
00187 0000 682A 	Baud_300	EQU	.26666	;300, 0.00%
00188 0000 1A0A 	Baud_1200	EQU	.6666	;1200, 0.00%
00189 0000 0D04 	Baud_2400	EQU	.3332	;2400, +0.01%
00190 0000 0340 	Baud_9600	EQU	.832	;9604, +0.04%
00191 0000 01A0 	Baud_19200	EQU	.416	;19.18k, -0.08%
SimpleServo16PS.asm                                                   Page: 3
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00192 0000 00CF 	Baud_38400	EQU	.207	;38.46k, +0.16%
00193 0000 008A 	Baud_57600	EQU	.138	;57.55k, -0.08%
00194 0000 00CF 	BaudRate	EQU	Baud_38400
00195 0000 	;
00196 0000 	;
00197 0000 	;
00198 0000 000A 	DebounceTime	EQU	d'10'
00199 0000 	;
00200 0000 	;================================================================================================
00201 0000 	;***** VARIABLE DEFINITIONS
00202 0000 	; there are 256 bytes of ram, Bank0 0x20..0x7F, Bank1 0xA0..0xEF, Bank2 0x120..0x16F
00203 0000 	; there are 256 bytes of EEPROM starting at 0x00 the EEPROM is not mapped into memory but
00204 0000 	;  accessed through the EEADR and EEDATA registers
00205 0000 	;================================================================================================
00206 0000 	;  Bank0 Ram 020h-06Fh 80 Bytes
00207 0000 	;
00208 0000 		cblock	0x20 
00209 0000 	;
00210 0000 0020 		SysLED_Time		;sys LED time
00211 0000 0021 		SysLED_Blinks		;0=1 flash,1,2,3
00212 0000 0022 		SysLED_BlinkCount
00213 0000 0023 		SysLED_Count		;sys LED Timer tick count
00214 0000 	;
00215 0000 0024 		EEAddrTemp		;EEProm address to read or write
00216 0000 0025 		EEDataTemp		;Data to be writen to EEProm
00217 0000 	;
00218 0000 0026 		Timer1Lo		;1st 16 bit timer
00219 0000 0027 		Timer1Hi		; one second RX timeiout
00220 0000 0028 		Timer2Lo		;2nd 16 bit timer
00221 0000 0029 		Timer2Hi		; Servo Sequencer Timer
00222 0000 002A 		Timer3Lo		;3rd 16 bit timer
00223 0000 002B 		Timer3Hi		;GP wait timer
00224 0000 002C 		Timer4Lo		;4th 16 bit timer
00225 0000 002D 		Timer4Hi		; debounce timer
00226 0000 	;
00227 0000 002E 		TXByte		;Next byte to send
00228 0000 002F 		RXByte		;Last byte received
00229 0000 0030 		SerFlags
00230 0000 	;
00231 0000 0031 		ssStatus:4		;Status and condition flags for the user.
00232 0000 	;
00233 0000 0035 		Flags
00234 0000 0036 		SendingIdx
00235 0000 	;---------------------
00236 0000 	;Below here are saved in eeprom
00237 0000 	;
00238 0000 0037 		SysMode
00239 0000 0038 		RS232_MasterAddr
00240 0000 0039 		RS232_SlaveAddr
00241 0000 003A 		ssFlags		;Serial Servo flags
00242 0000 003B 		SysFlags
00243 0000 	;
00244 0000 		endc
00245 0000 	;
00246 0000 003B 	#Define	SW1_Flag	SysFlags,0
00247 0000 003B 	#Define	SW2_Flag	SysFlags,1
00248 0000 003B 	#Define	SW3_Flag	SysFlags,2
00249 0000 003B 	#Define	LED2_Flag	SysFlags,3
00250 0000 003B 	#Define	LED3_Flag	SysFlags,4
00251 0000 	;
00252 0000 0037 	#Define	FirstRAMParam	SysMode
00253 0000 003B 	#Define	LastRAMParam	SysFlags
00254 0000 	;
00255 0000 0030 	#Define	DataReceivedFlag	SerFlags,1
00256 0000 0030 	#Define	DataSentFlag	SerFlags,2
00257 0000 	;
00258 0000 	;----ssStatus bits
00259 0000 0031 	#Define	ssRX_Timeout	ssStatus,3	;cleared by host read
00260 0000 	;
00261 0000 	; all bits of ssStatus+1 are cleared by a host kCmd_GetStatus command.
00262 0000 	;
00263 0000 	; ssStatus+2 is a copy of SequencerFlags
00264 0000 	;
00265 0000 0033 	#Define	ssSeqActive	ssStatus+2,0	;Set/Cleared by Sequencer
00266 0000 0033 	#Define	ssSeqWaitForTime	ssStatus+2,1	;Sequencer is waiting for timer
00267 0000 0033 	#Define	ssSeqWaitForInPos	ssStatus+2,2	;Sequencer is waiting for a servo move to complete
00268 0000 0033 	#Define	ssSeqOptionStop	ssStatus+2,3	;Sequencer is waiting
00269 0000 0033 	#Define	ssSeqWaitForBtn2	ssStatus+2,4
00270 0000 0033 	#Define	ssSeqWaitForBtn3	ssStatus+2,5
00271 0000 	;
00272 0000 	;
00273 0000 	;
00274 0000 	;================================================================================================
00275 0000 	;  Bank1 Ram 0A0h-0EFh 80 Bytes
00276 0000 		cblock	0x0A0
00277 0000 00A0 		RX_ParseFlags
00278 0000 00A1 		RX_Flags
00279 0000 00A2 		RX_DataCount
00280 0000 00A3 		RX_CSUM
00281 0000 00A4 		RX_SrcAdd:RP_AddressBytes
00282 0000 00A5 		RX_DstAdd:RP_AddressBytes
00283 0000 00A6 		RX_TempData:RP_DataBytes
00284 0000 00AA 		RX_Data:RP_DataBytes
00285 0000 00AE 		TX_Data:RP_DataBytes
00286 0000 		endc
00287 0000 	;
00288 0000 	;================================================================================================
00289 0000 	;  Bank2 Ram 120h-16Fh 80 Bytes
00290 0000 	;
SimpleServo16PS.asm                                                   Page: 4
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00291 0000 0002 	#Define	Ser_Buff_Bank	2
00292 0000 	;
00293 0000 		cblock	0x120
00294 0000 0120 		Ser_In_Bytes		;Bytes in Ser_In_Buff
00295 0000 0121 		Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00296 0000 0122 		Ser_In_InPtr
00297 0000 0123 		Ser_In_OutPtr
00298 0000 0124 		Ser_Out_InPtr
00299 0000 0125 		Ser_Out_OutPtr
00300 0000 0126 		Ser_In_Buff:20
00301 0000 0146 		Ser_Out_Buff:20
00302 0000 		endc
00303 0000 	;
00304 0000 	;
00305 0000 	;====================================================================================================
00306 0000 	;  Part of SimpleServo16
00307 0000 	;    Defines constants and variables in Banks 3,4,5 and 6
00308 0000 	;
00309 0000 		include <ServoLib.h>
00001 0000 	;====================================================================================================
00002 0000 	;
00003 0000 	;    Filename:      ServoLib.h
00004 0000 	;    Date:          4/7/2021
00005 0000 	;    File Version:  1.1
00006 0000 	;    
00007 0000 	;    Author:        David M. Flynn
00008 0000 	;    Company:       Oxford V.U.E., Inc.
00009 0000 	;    E-Mail:        dflynn@oxfordvue.com
00010 0000 	;    Web Site:      http://www.oxfordvue.com/
00011 0000 	;
00012 0000 	;====================================================================================================
00013 0000 	;  Part of SimpleServo16
00014 0000 	;    Defines constants and variables in Banks 3,4,5 and 6
00015 0000 	;
00016 0000 	;    History:
00017 0000 	;
00018 0000 	; 1.1   4/7/2021	Moved to contiguous ram, added sequencer.
00019 0000 	; 1.0   11/28/2015	First rev'd version.
00020 0000 	;
00021 0000 	;=========================================================================================
00022 0000 	; Sequencer Notes:
00023 0000 	;
00024 0000 0080 	kSeqMemSize	EQU	0x80
00025 0000 	;
00026 0000 	; Time values are UInt8 x 16, 0x01 = 16/100 seconds, .01 Second timebase,
00027 0000 	;   0xFF = 255*16/100 = 40.8 Seconds maximum time.
00028 0000 	;
00029 0000 	; Position values are UInt8 x 8 + 2048, 0x01 = 1*8+2048 = 2056, 0.5 uS timebase,
00030 0000 	;   0x00 = 2048, 0xFF = 255*8+2048 = 4088 = 0.002044 Seconds maximum pulse width.
00031 0000 	;
00032 0000 	; Command values:
00033 0000 	;  The high nibble is the command 0..F, low nibble is servo number or other data.
00034 0000 	;
00035 0000 0000 	kSeqCmd_End	EQU	0x00
00036 0000 0010 	kSeqCmd_Move	EQU	0x10	;+ServoNum, Dest
00037 0000 0020 	kSeqCmd_SetSpeed	EQU	0x20	;+ServoNum, Speed
00038 0000 0030 	kSeqCmd_SetAccel	EQU	0x30	;+ServoNum, Accel
00039 0000 0040 	kSeqCmd_SetMin	EQU	0x40	;+ServoNum, MinL, MinH
00040 0000 0050 	kSeqCmd_SetMax	EQU	0x50	;+ServoNum, MaxL, MaxH
00041 0000 0060 	kSeqCmd_SetLoopTime	EQU	0x60	;+TimerL high nibble, TimerH
00042 0000 	;  load this value into master sequence timer, time counts down to zero, 0.01 second timebase
00043 0000 0070 	kSeqCmd_WaitUntil	EQU	0x70	;+TimerL high nibble, TimerH
00044 0000 	;  wait here until master sequence timer is less than this value
00045 0000 0080 	kSeqCmd_Mov2Min	EQU	0x80	;+ServoNum
00046 0000 0090 	kSeqCmd_Mov2Max	EQU	0x90	;+ServoNum
00047 0000 00A0 	kSeqCmd_Mov2Ctr	EQU	0xA0	;+ServoNum
00048 0000 00B0 	kSeqCmd_WaitInPos	EQU	0xB0	;+ServoNum
00049 0000 00C0 	kSeqCmd_Stop	EQU	0xC0	;+Flags?  Mode=0 only
00050 0000 00D0 	kSeqCmd_WaitForBtn	EQU	0xD0	;+Btn#, 2 or 3 only, 1=Btn 2, 2=Btn 3, 3=both
00051 0000 	;
00052 0000 	;
00053 0000 	;====================================================================================================
00054 0000 	;====================================================================================================
00055 0000 	; Constants:
00056 0000 	;
00057 0000 0030 	DefaultMaxSpeed	EQU	0x30	;1uS/20mS^2
00058 0000 0001 	DefaultAccel	EQU	0x01
00059 0000 0022 	DefaultSFlags	EQU	b'00100010'	;In Position
00060 0000 	;
00061 0000 0009 	CCPCON_Clr	EQU	b'00001001'	;Clear output on match
00062 0000 0008 	CCPCON_Set	EQU	b'00001000'	;Set output on match
00063 0000 000A 	CCPCON_Int	EQU	b'00001010'	;Interupt only on match
00064 0000 	;
00065 0000 0BB8 	kCenterPulseWidth	EQU	d'3000'	;1500uS
00066 0000 0708 	kMinPulseWidth	EQU	d'1800'	;900uS
00067 0000 1068 	kMaxPulseWidth	EQU	d'4200'	;2100uS
00068 0000 1194 	kServoDwellTimeA	EQU	d'4500'	;Address Change time 2250uS
00069 0000 01F4 	kServoAddrTime	EQU	d'500'	;250uS
00070 0000 1388 	kServoDwellTime	EQU	d'5000'	;2.5mS/Channel
00071 0000 	;
00072 0000 	;================================================================================================
00073 0000 	; Linear data memory 0x2000 .. 0x29AF access using FSR
00074 0000 		cblock	0x20F0	;beginning of bank 3
00075 0000 	;  Bank3 Ram 1A0h-1EFh 80 Bytes
00076 0000 20F0 		ServoMaxSpeed:10		;0=no Accel, 1..255 counts/20mS
00077 0000 2100 		ServoAccelValue:10		;1..8 counts/20mS squared
00078 0000 2110 		ServoCurSpeed:10		;0=Stopped, MSb=Direction, 1..127
00079 0000 2120 		CMDSigTime:20		;Commanded position MinTime .. MaxTime
00080 0000 	; bank4 Ram 220h-26Fh 80 Bytes
SimpleServo16PS.asm                                                   Page: 5
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00081 0000 2140 		MinTime:20		;Minimum pulse time (900uS=1800)
00082 0000 2160 		MaxTime:20		;Maximum pulse time (2100uS=4200)
00083 0000 2180 		ServoFlags:8		;4 bits per servo
00084 0000 2188 		ServoFlags2:8		;4 bits per servo
00085 0000 	; bank 5 Ram 2A0h-2EFh 80 Bytes
00086 0000 2190 		SigOutTime:20		;Current position
00087 0000 21B0 		DwellTime:20
00088 0000 		endc
00089 0000 	;
00090 0000 		cblock	0x2E0	;locate after DwellTime
00091 0000 	; these are in bank 5 because the CCP1 and CCP2 CONs are here, accessed w/o FSR
00092 0000 02E0 		CMDServoIDX
00093 0000 02E1 		ServoIDX		;Index 0..7
00094 0000 02E2 		ServoCtlFlags	
00095 0000 02E3 		CalcdDwell		;scratch var
00096 0000 02E4 		CalcdDwellH
00097 0000 02E5 		SequencerFlags
00098 0000 02E6 		SequencerPtr		;Offset into SequencerData
00099 0000 02E7 		SequencerServoNum		;for Wait..., LSB of Wait time
00100 0000 02E8 		SequencerTime		;MSB of Wait time
00101 0000 	; there are 7 bytes left in bank 5
00102 0000 		endc
00103 0000 	;
00104 0000 		cblock	0x21E0	;beginning of bank 6
00105 0000 	;  Bank6 Ram 320h-26Fh 80 Bytes
00106 0000 21E0 		AccelRampLen:20
00107 0000 2200 		SequencerData:kSeqMemSize
00108 0000 		endc
00109 0000 	;
00110 0000 	;
00111 0000 	;================================================================================================
00112 0000 	;
00113 0000 	;
00114 0000 	; ServoCtlFlags Flag bits, ToDo at Next ISR:
00115 0000 0000 	CyclePulseStart	EQU	0	;Start cycle banks 1 and 2
00116 0000 0002 	CyclePulseEnd1	EQU	2	;End pulse, begin dwell
00117 0000 0003 	CyclePulseEnd2	EQU	3	; Set when a pulse is started.
00118 0000 0004 	AddrChngDwell	EQU	4	;dwell 100uS , change address
00119 0000 	;
00120 0000 	; ServoFlags Flag bits
00121 0000 0000 	ValueSentFlag0_7	EQU	0
00122 0000 0001 	InPositionFlag0_7	EQU	1
00123 0000 0002 	ServoOnBit0_7	EQU	2
00124 0000 0003 	MovingFWD0_7	EQU	3
00125 0000 0004 	ValueSentFlag8_15	EQU	4
00126 0000 0005 	InPositionFlag8_15	EQU	5
00127 0000 0006 	ServoOnBit8_15	EQU	6
00128 0000 0007 	MovingFWD8_15	EQU	7
00129 0000 	;
00130 0000 	; ServoFlags2 Flag bits
00131 0000 0000 	AccelComplete0_7	EQU	0
00132 0000 0004 	AccelComplete8_15	EQU	4
00133 0000 	;
00134 0000 	; SequencerFlags Flag bits
00135 0000 0000 	SeqActive	EQU	0
00136 0000 0001 	SeqWaitForTimer	EQU	1
00137 0000 0002 	SeqWaitForInPos	EQU	2
00138 0000 0003 	SeqOptionStop	EQU	3
00139 0000 0004 	SeqWaitForBtn2	EQU	4
00140 0000 0005 	SeqWaitForBtn3	EQU	5
00141 0000 	;
00142 0000 	;=========================================================================================
00143 0000 	;
00310 0000 	;
00311 0000 	;=======================================================================================================
00312 0000 	;  Common Ram 70-7F same for all banks
00313 0000 	;      except for ISR_W_Temp these are used for paramiter passing and temp vars
00314 0000 	;=======================================================================================================
00315 0000 	;
00316 0000 		cblock	0x70
00317 0000 0070 		Param70	
00318 0000 0071 		Param71	
00319 0000 0072 		Param72	
00320 0000 0073 		Param73
00321 0000 0074 		Param74
00322 0000 0075 		Param75
00323 0000 0076 		Param76
00324 0000 0077 		Param77
00325 0000 0078 		Param78
00326 0000 0079 		Param79
00327 0000 007A 		Param7A
00328 0000 007B 		Param7B
00329 0000 007C 		Param7C
00330 0000 007D 		Param7D
00331 0000 007E 		Param7E
00332 0000 007F 		Param7F
00333 0000 		endc
00334 0000 	;
00335 0000 	;
00336 0000 	;=========================================================================================
00337 0000 	;Conditions
00338 0000 0080 	HasISR	EQU	0x80	;used to enable interupts 0x80=true 0x00=false
00339 0000 	;
00340 0000 	;=========================================================================================
00341 0000 	;==============================================================================================
00342 0000 	; ID Locations
00343 0000 		__idlocs	0x10d1
00344 0000 	;
00345 0000 	;==============================================================================================
SimpleServo16PS.asm                                                   Page: 6
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00346 0000 	; EEPROM locations (NV-RAM) 0x00..0x7F (offsets)
00347 0000 	;
00348 0000 	; default values
00349 0000 		ORG	0xF000
00350 F000 	;
00351 F000 0000 		de	kSysMode	;nvSysMode
00352 F001 0001 		de	kRS232_MasterAddr	;nvRS232_MasterAddr
00353 F002 0002 		de	kRS232_SlaveAddr	;nvRS232_SlaveAddr
00354 F003 0000 		de	kssFlags	;nvssFlags
00355 F004 	;
00356 F004 	; add any new params here
00357 F004 	;
00358 F004 0000 		de	0x00	;nvSysFlags
00359 F005 	;
00360 F005 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 0030 		de	DefaultMaxSpeed:10	;nvServoMaxSpeed
00361 F015 0001 0001 0001 0001 0001 0001 0001 0001 0001 0001 0001 0001 0001 0001 0001 0001 		de	DefaultAccel:10	;nvServoAccelValue
00362 F025 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 0008 		de	0x08:20	;nvMinTime 0x0808 = .2056 = 1028uS
00363 F045 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 000F 		de	0x0F:20	;nvMaxTime 0x0F0F = .3854 = 1927uS
00364 F065 0022 0022 0022 0022 0022 0022 0022 0022 		de	DefaultSFlags:8	;nvServoFlags
00365 F06D 	;
		de	0x00:kSeqMemSize
00367 F0ED 	;
00368 F0ED 		ORG	0xF0FF
00369 F0FF 0000 		de	0x00	;Skip BootLoader
00370 F100 	;
00371 F100 	; EEPROM locations (NV-RAM) 0x00..0x7F (offsets)
00372 F100 	;
00373 F100 		cblock	0x0000
00374 F100 	;
00375 F100 0000 		nvSysMode
00376 F100 0001 		nvRS232_MasterAddr
00377 F100 0002 		nvRS232_SlaveAddr
00378 F100 0003 		nvssFlags
00379 F100 0004 		nvSysFlags
00380 F100 	;
00381 F100 0005 		nvServoMaxSpeed:10		;0=no Accel, 1..255 counts/20mS
00382 F100 0015 		nvServoAccelValue:10		;1..8 counts/20mS squared
00383 F100 0025 		nvMinTime:20		;Minimum pulse time (900uS=1800)
00384 F100 0045 		nvMaxTime:20		;Maximum pulse time (2100uS=4200)
00385 F100 0065 		nvServoFlags:8		;4 bits per servo
00386 F100 	;
00387 F100 006D 		nvSequencerData:kSeqMemSize	;128 bytes of sequencer data
00388 F100 		endc
00389 F100 	;
00390 F100 0000 	#Define	nvFirstParamByte	nvSysMode
00391 F100 0004 	#Define	nvLastParamByte	nvSysFlags
00392 F100 	;
00393 F100 	;
00394 F100 	;==============================================================================================
00395 F100 	;============================================================================================
00396 F100 	;
00397 F100 1E00 	BootLoaderStart	EQU	0x1E00
00398 F100 	;
00399 F100 		ORG	0x000	; processor reset vector
00400 0000 319E 		movlp	BootLoaderStart
00401 0001 2E00 		goto	BootLoaderStart
00402 0002 	;
00403 0002 018A 	ProgStartVector	CLRF	PCLATH
00404 0003 29BE 	  	goto	start	; go to beginning of program
00405 0004 	;
00406 0004 	;===============================================================================================
00407 0004 	; Interupt Service Routine
00408 0004 	;
00409 0004 	; we loop through the interupt service routing every 0.008192 seconds
00410 0004 	;
00411 0004 	;
00412 0004 		ORG	0x004	; interrupt vector location
00413 0004 0188 		CLRF	BSR	; bank0
00414 0005 018A 		clrf	PCLATH
00415 0006 	;
00416 0006 	; Timer 2
00417 0006 1C91 		BTFSS	PIR1,TMR2IF
00418 0007 2826 		goto	SystemTick_end
00419 0008 	;
00420 0008 1091 		BCF	PIR1,TMR2IF	; reset interupt flag bit
00421 0009 	;------------------
00422 0009 	; These routines run 100 times per second
00423 0009 	;------------------
00424 0009 	;Decrement timers until they are zero
00425 0009 	; 
00426 0009 2070 		call	DecTimer1	;if timer 1 is not zero decrement
00427 000A 206E 		call	DecTimer2
00428 000B 206C 		call	DecTimer3
00429 000C 206A 		call	DecTimer4
00430 000D 	;
00431 000D 	;-----------------------------------------------------------------
00432 000D 	; blink LEDs
00433 000D 308D 		MOVLW	LOW TRISB
00434 000E 0084 		MOVWF	FSR0L
00435 000F 3000 		MOVLW	HIGH TRISB
00436 0010 0085 		MOVWF	FSR0H
00437 0011 	; All LEDs off
00438 0011 1400 		BSF	INDF0,LED1_Bit
00439 0012 1600 		BSF	INDF0,LED2_Bit
00440 0013 1680 		BSF	INDF0,LED3_Bit
00441 0014 	;
00442 0014 	; Read SW's
00443 0014 103B 		BCF	SW1_Flag
00444 0015 10BB 		BCF	SW2_Flag
SimpleServo16PS.asm                                                   Page: 7
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00445 0016 113B 		BCF	SW3_Flag
00446 0017 1C0D 		BTFSS	SW1_In
00447 0018 143B 		BSF	SW1_Flag
00448 0019 1E0D 		BTFSS	SW2_In
00449 001A 14BB 		BSF	SW2_Flag
00450 001B 1E8D 		BTFSS	SW3_In
00451 001C 153B 		BSF	SW3_Flag
00452 001D 	; Dec LED time
00453 001D 0BA3 		DECFSZ	SysLED_Count,F	;Is it time?
00454 001E 3207 		bra	TMR2_Done	; No, not yet
00455 001F 	;
00456 001F 0820 		MOVF	SysLED_Time,W
00457 0020 00A3 		MOVWF	SysLED_Count
00458 0021 	; Flash LEDs
00459 0021 1000 		BCF	INDF0,LED1_Bit	;Sys LED ON
00460 0022 19BB 		BTFSC	LED2_Flag
00461 0023 1200 		BCF	INDF0,LED2_Bit	;LED 2 ON
00462 0024 1A3B 		BTFSC	LED3_Flag
00463 0025 1280 		BCF	INDF0,LED3_Bit	;LED 3 ON
00464 0026 	;
00465 0026 	;
00466 0026 	TMR2_Done:
00467 0026 	SystemTick_end:	
00468 0026 	;
00469 0026 	;-----------------------------------------------------------------------------------------
00470 0026 	;AUSART Serial ISR
00471 0026 	;
00472 0026 0020 		movlb	0	;bank 0
00473 0027 1E91 		BTFSS	PIR1,RCIF	;RX has a byte?
00474 0028 3201 		BRA	IRQ_Ser_End
00475 0029 20C4 		CALL	RX_TheByte
00476 002A 	;
00477 002A 	IRQ_Ser_End:
00478 002A 	;-----------------------------------------------------------------------------------------
00479 002A 	;
00480 002A 	;=========================================================================================
00481 002A 0020 		MOVLB	0	;Bank0
00482 002B 1911 		BTFSC	PIR1,CCP1IF
00483 002C 21E1 		CALL	ISR_ServoCCP1
00484 002D 	;
00485 002D 1812 		BTFSC	PIR2,CCP2IF
00486 002E 2257 		CALL	ISR_ServoCCP2
00487 002F 	;
00488 002F 	;=========================================================================================
00489 002F 	;-----------------------------------------------------------------------------------------
00490 002F 	;--------------------------------------------------------------------
00491 002F 	;
00492 002F 0009 		retfie		; return from interrupt
00493 0030 	;
00494 0030 	;
00495 0030 	;==============================================================================================
00496 0030 	;==============================================================================================
00497 0030 	;
00498 0030 		include <F1847_Common.inc>
00001 0030 	;=========================================================================================
00002 0030 	; Commonly used routines PIC16F1847 version
00003 0030 	;
00004 0030 	;    Filename:      F1847 Common.inc
00005 0030 	;    Date:          4/6/2019
00006 0030 	;    File Version:  1.0.2
00007 0030 	;
00008 0030 	;    Author:        David M. Flynn
00009 0030 	;    Company:       Oxford V.U.E., Inc.
00010 0030 	;    E-Mail:        dflynn@oxfordvue.com
00011 0030 	;    Web Site:      http://www.oxfordvue.com/
00012 0030 	;
00013 0030 	;=========================================================================================
00014 0030 	;    History:
00015 0030 	;
00016 0030 	; 1.0.2  4/6/2019	Fixes to EERead/EEwrite
00017 0030 	; 1.0.2 2/16/2019	Fix: added FSR0H to DecTimer.
00018 0030 	; 1.0.1 11/21/2015	Updates DecTimer.
00019 0030 	; 1.0   11/16/2013	Updated from F648A Common.inc
00020 0030 	;
00021 0030 	;=========================================================================================
00022 0030 	; Routines:
00023 0030 	;
00024 0030 	; ClearRam	(2+0) Clears all RAM, call once before initializing variables, FSR0
00025 0030 	; CopyToRam	(1+0) copy param memory (EEPROM) to ram, call once, FSR0
00026 0030 	; SaveParams	(1+0) copy ram to param memory (EEPROM), FSR0
00027 0030 	;
00028 0030 	; DecTimer4	(0+0) Decrement routine for 16 bit timers, FSR0
00029 0030 	; DecTimer3
00030 0030 	; DecTimer2
00031 0030 	; DecTimer1
00032 0030 	; DecTimer	(0+0) High byte of counter address in W
00033 0030 	;
00034 0030 	; TestT4_Zero	Test for 16 bit timers = zero
00035 0030 	; TestT3_Zero	If Timer is zero return Z flag,1 else Z=0
00036 0030 	; TestT2_Zero
00037 0030 	; TestT1_Zero
00038 0030 	;
00039 0030 	; Delay10uS	(0+0)Delay uS    1 cycle = 1uS, 8Mhz clock version
00040 0030 	; Delay100uS
00041 0030 	; Delay40uS
00042 0030 	; DelayWuS
00043 0030 	;
00044 0030 	; EEReadW	(0+0) Read EEPROM address in W
00045 0030 	; EERead	(0+0) Read EEPROM address in EEAddrTemp
SimpleServo16PS.asm                                                   Page: 8
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00046 0030 	; EEWriteW	(0+0) Write EEPROM address in W, Data in EEDataTemp
00047 0030 	; EEWrite	(0+0) Write EEPROM address in EEAdrTemp, Data in EEDataTemp, FSR0
00048 0030 	;
00049 0030 	;=========================================================================================
00050 0030 		ifndef UseEEParams
00052 0030 		endif
00053 0030 	;=========================================================================================
00054 0030 	; Clears all RAM
00055 0030 	; Entry: none
00056 0030 	; Exit: none
00057 0030 	; RAM used: All
00058 0030 	; Calls:(2+0) ClearRam_L2
00059 0030 	;
00060 0030 0020 	ClearRam	MOVLB	0x00	;Bank 0
00061 0031 305F 		MOVLW	0x5F	;Clear 20h-7Eh, 95 bytes
00062 0032 00FF 		MOVWF	Param7F
00063 0033 3020 		MOVLW	0x20
00064 0034 0084 		MOVWF	FSR0
00065 0035 0185 		CLRF	FSR0H
00066 0036 204A 		CALL	ClearRam_L2
00067 0037 	;
00068 0037 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00069 0038 00FF 		MOVWF	Param7F
00070 0039 30A0 		MOVLW	0xA0
00071 003A 0084 		MOVWF	FSR0
00072 003B 204A 		CALL	ClearRam_L2
00073 003C 	;
00074 003C 0A85 		INCF	FSR0H,F	
00075 003D 2041 		CALL	ClearRam_2	;Banks 2,3
00076 003E 0A85 		INCF	FSR0H,F	
00077 003F 2041 		CALL	ClearRam_2	;Banks 4,5
00078 0040 0A85 		INCF	FSR0H,F	;Banks 6,7
00079 0041 	;	
00080 0041 3050 	ClearRam_2	MOVLW	0x50	;Clear 120h-16Fh, 80 bytes
00081 0042 00FF 		MOVWF	Param7F
00082 0043 3020 		MOVLW	0x20
00083 0044 0084 		MOVWF	FSR0
00084 0045 204A 		CALL	ClearRam_L2
00085 0046 	;
00086 0046 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00087 0047 00FF 		MOVWF	Param7F
00088 0048 30A0 		MOVLW	0xA0
00089 0049 0084 		MOVWF	FSR0
00090 004A 	;
00091 004A 0180 	ClearRam_L2	CLRF	INDF0
00092 004B 0A84 		INCF	FSR0,F
00093 004C 0BFF 		DECFSZ	Param7F,F
00094 004D 33FC 		bra	ClearRam_L2
00095 004E 0008 		RETURN
00096 004F 	;
00097 004F 		if UseEEParams
00098 004F 	;==========================================================================
00099 004F 	; copy param memory to ram
00100 004F 	;
00101 004F 3000 	CopyToRam	MOVLW	nvFirstParamByte
00102 0050 00A4 		MOVWF	EEAddrTemp
00103 0051 3037 		MOVLW	FirstRAMParam
00104 0052 0084 		MOVWF	FSR0L
00105 0053 0185 		CLRF	FSR0H
00106 0054 209A 	CopyToRam_L1	CALL	EERead
00107 0055 001A 		movwi	FSR0++
00108 0056 0AA4 		INCF	EEAddrTemp,F
00109 0057 303C 		MOVLW	LastRAMParam+1
00110 0058 0204 		SUBWF	FSR0L,W
00111 0059 		SKPZ
00111 0059 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00112 005A 33F9 		BRA	CopyToRam_L1
00113 005B 0008 		RETURN
00114 005C 	;
00115 005C 	;===========================================================================
00116 005C 	; copy ram to param memory
00117 005C 	;
00118 005C 3000 	SaveParams	MOVLW	nvFirstParamByte
00119 005D 00A4 		MOVWF	EEAddrTemp
00120 005E 3037 		MOVLW	FirstRAMParam
00121 005F 0084 		MOVWF	FSR0L
00122 0060 0185 		CLRF	FSR0H
00123 0061 0012 	SaveParams_L1	moviw	FSR0++
00124 0062 00A5 		MOVWF	EEDataTemp
00125 0063 20A4 		CALL	EEWrite
00126 0064 0AA4 		INCF	EEAddrTemp,F
00127 0065 303C 		MOVLW	LastRAMParam+1	;last byte
00128 0066 0204 		SUBWF	FSR0L,W
00129 0067 		SKPZ
00129 0067 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00130 0068 33F8 		BRA	SaveParams_L1
00131 0069 0008 		RETURN
00132 006A 	;
00133 006A 		endif
00134 006A 	;=====================================================================================================
00135 006A 	;=========================================================================================================
00136 006A 	; Decrement routine for 16 bit timers
00137 006A 	; Set FSR0H before calling these routines.
00138 006A 	;
00139 006A 302D 	DecTimer4	movlw	Timer4Hi
00140 006B 3205 		bra	DecTimer
00141 006C 302B 	DecTimer3	movlw	Timer3Hi
00142 006D 3203 		bra	DecTimer
00143 006E 3029 	DecTimer2	movlw	Timer2Hi
SimpleServo16PS.asm                                                   Page: 9
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00144 006F 3201 		bra	DecTimer
00145 0070 3027 	DecTimer1	movlw	Timer1Hi
00146 0071 	;DecTimer
00147 0071 	; entry: FSR=Timer(n)Hi
00148 0071 0084 	DecTimer	MOVWF	FSR0L
00149 0072 3000 		movlw	High Timer4Hi
00150 0073 0085 		movwf	FSR0H
00151 0074 0013 		MOVIW	FSR0--	;TimerNHi
00152 0075 0400 		IORWF	INDF0,W	;TimerNLo
00153 0076 		SKPNZ
00153 0076 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00154 0077 0008 		RETURN
00155 0078 3001 		MOVLW	0x01
00156 0079 0280 		SUBWF	INDF0,F	;TimerNLo
00157 007A 0A84 		INCF	FSR0L,F
00158 007B 0103 		CLRW
00159 007C 3B80 		SUBWFB	INDF0,F	;TimerNHi
00160 007D 0008 		RETURN
00161 007E 	;
00162 007E 	;==============================================================================================
00163 007E 	; Test for 16 bit timers = zero
00164 007E 	;If Timer is zero return Z flag,1 else Z=0
00165 007E 	;
00166 007E 0020 	TestT4_Zero	movlb	0
00167 007F 082C 		movf	Timer4Lo,W
00168 0080 042D 		iorwf	Timer4Hi,W
00169 0081 0008 		return
00170 0082 	;
00171 0082 0020 	TestT3_Zero	movlb	0
00172 0083 082A 		movf	Timer3Lo,W
00173 0084 042B 		iorwf	Timer3Hi,W
00174 0085 0008 		return
00175 0086 	;
00176 0086 0020 	TestT2_Zero	movlb	0
00177 0087 0828 		movf	Timer2Lo,W
00178 0088 0429 		iorwf	Timer2Hi,W
00179 0089 0008 		return
00180 008A 	;
00181 008A 0020 	TestT1_Zero	movlb	0
00182 008B 0826 		movf	Timer1Lo,W
00183 008C 0427 		iorwf	Timer1Hi,W
00184 008D 0008 		return	
00185 008E 	;
00186 008E 		if oldCode
00202 008E 		endif
00203 008E 	;======================================================================================
00204 008E 	;Delay uS    1 cycle = .125uS, 32MHz clock version
00205 008E 	; RAM used: Param77
00206 008E 	; Calls:(0) none
00207 008E 	;
00208 008E 3005 	Delay10uS	MOVLW	0x05	;(2*3+5)/2=10
00209 008F 3203 		bra	DelayWuS
00210 0090 3041 	Delay100uS	MOVLW	d'65'	;(28*3+5)/2=100
00211 0091 3201 		bra	DelayWuS
00212 0092 3019 	Delay40uS	MOVLW	d'25'	;(11*3+5)=40
00213 0093 00F7 	DelayWuS	MOVWF	Param77
00214 0094 0000 	DelayWuS_Loop	nop
00215 0095 0000 		nop
00216 0096 0BF7 		DECFSZ	Param77,F
00217 0097 33FC 		bra	DelayWuS_Loop
00218 0098 0008 		RETURN
00219 0099 	;==============================================================================================
00220 0099 	; Read EEPROM
00221 0099 	; entry: EEPROM address to read in W
00222 0099 	;        Bank 0 selected
00223 0099 	; exit: W=EEDATA, Bank 0 selected
00224 0099 	;
00225 0099 00A4 	EEReadW	movwf	EEAddrTemp
00226 009A 	;
00227 009A 	;==============================================================================================
00228 009A 	; Read EEPROM
00229 009A 	; entry: EEPROM address to read in EEAddrTemp
00230 009A 	;        Bank 0 selected
00231 009A 	; exit: W=EEDATA, Bank 0 selected
00232 009A 	;
00233 009A 0824 	EERead	movf	EEAddrTemp,W
00234 009B 0023 		MOVLB	0x03	;Bank 3
00235 009C 0091 		movwf	EEADR	;Address to read
00236 009D 1315 		bcf	EECON1,CFGS	;not config mem
00237 009E 1395 		bcf	EECON1,EEPGD	;Data memory
00238 009F 1415 		bsf	EECON1,RD
00239 00A0 0813 		movf	EEDAT,W	;W=EEDAT
00240 00A1 0020 		MOVLB	0x00	;Bank 0
00241 00A2 0008 		return
00242 00A3 	;
00243 00A3 	;==============================================================================================
00244 00A3 	; Write EEPROM
00245 00A3 	; entry: EEPROM address to write in W
00246 00A3 	;        EEPROM data to write in EEDataTemp
00247 00A3 	;        Bank 0 selected
00248 00A3 	; exit: Bank 0 selected
00249 00A3 	;
00250 00A3 00A4 	EEWriteW	movwf	EEAddrTemp
00251 00A4 	;
00252 00A4 	;==============================================================================================
00253 00A4 	; Write EEPROM
00254 00A4 	; entry: EEPROM address to write in EEAdrTemp
00255 00A4 	;        EEPROM data to write in EEDataTemp
00256 00A4 	;        Bank 0 selected
SimpleServo16PS.asm                                                   Page: 10
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00257 00A4 	; exit: Bank 0 selected
00258 00A4 	;
00259 00A4 0824 	EEWrite	MOVF	EEAddrTemp,W
00260 00A5 0023 		MOVLB	0x03	;Bank 3
00261 00A6 0091 		movwf	EEADR	;Address to write
00262 00A7 0020 		movlb	0x00	; bank 0
00263 00A8 0825 		movf	EEDataTemp,W
00264 00A9 0023 		movlb	0x03
00265 00AA 0093 		movwf	EEDAT
00266 00AB 1315 		bcf	EECON1,CFGS	;not config mem
00267 00AC 1395 		bcf	EECON1,EEPGD	;Data memory
00268 00AD 1515 		bsf	EECON1,WREN
00269 00AE 138B 		bcf	INTCON,GIE	;Disale Ints
00270 00AF 1B8B 		btfsc	INTCON,GIE
00271 00B0 33FD 		bra	$-2
00272 00B1 3055 		movlw	0x55
00273 00B2 0096 		movwf	EECON2	;write 55
00274 00B3 30AA 		movlw	0xAA
00275 00B4 0096 		movwf	EECON2	;write AA
00276 00B5 1495 		bsf	EECON1,WR
00277 00B6 178B 		bsf	INTCON,GIE
00278 00B7 1895 	EEWriteLoop	btfsc	EECON1,WR	
00279 00B8 33FE 		bra	EEWriteLoop
00280 00B9 1115 		bcf	EECON1,WREN
00281 00BA 0020 		MOVLB	0x00	;Bank 0
00282 00BB 0008 		return
00283 00BC 	;
00284 00BC 	;	
00285 00BC 	;=========================================================================================
00286 00BC 	;=========================================================================================
00287 00BC 	;
00288 00BC 	;
00289 00BC 	;
00290 00BC 	;
00499 00BC 		include <SerBuff1938.inc>
00001 00BC 	;=========================================================================================
00002 00BC 	;
00003 00BC 	;    Filename:      SerBuff.inc
00004 00BC 	;    Date:          5/24/2018                                    
00005 00BC 	;    File Version:  1.0.5
00006 00BC 	;
00007 00BC 	;    Author:        David M. Flynn
00008 00BC 	;    Company:       Oxford V.U.E., Inc.
00009 00BC 	;    E-Mail:        dflynn@oxfordvue.com
00010 00BC 	;
00011 00BC 	;=========================================================================================
00012 00BC 	;=========================================================================================
00013 00BC 	; Notes:
00014 00BC 	;
00015 00BC 	; History:
00016 00BC 	; 1.0.5    5/24/2018   Added GetSerInBytes.
00017 00BC 	; 1.0.4    5/23/2018	Added FlushInBuff.
00018 00BC 	; 1.0.3    12/15/2015	Optimized some code to be segment independent.
00019 00BC 	; 1.0.2    10/23/2015	Modified for 'F1938
00020 00BC 	; 1.0.1    12/6/2013	Modified for 'F1847
00021 00BC 	; 1.0      5/25/2008	First Rev'd version
00022 00BC 	;
00023 00BC 	;=========================================================================================
00024 00BC 	; Bank0 Variables:
00025 00BC 	;
00026 00BC 	;	cblock	0x20
00027 00BC 	;	TXByte		;Next byte to send
00028 00BC 	;	RXByte		;Last byte received
00029 00BC 	;	SerFlags
00030 00BC 	;	endc
00031 00BC 	;
00032 00BC 	;#Define	DataReceivedFlag	SerFlags,1
00033 00BC 	;#Define	DataSentFlag	SerFlags,2
00034 00BC 	;
00035 00BC 	; Bank2 Variables:
00036 00BC 	;#Define	Ser_Buff_Bank	2
00037 00BC 	;	cblock	0x120
00038 00BC 	;	Ser_In_Bytes		;Bytes in Ser_In_Buff
00039 00BC 	;	Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00040 00BC 	;	Ser_In_InPtr
00041 00BC 	;	Ser_In_OutPtr
00042 00BC 	;	Ser_Out_InPtr
00043 00BC 	;	Ser_Out_OutPtr
00044 00BC 	;	Ser_In_Buff:20
00045 00BC 	;	Ser_Out_Buff:20
00046 00BC 	;	endc
00047 00BC 	;
00048 00BC 	;=========================================================================================
00049 00BC 	; Routines	(Bank In/Bank Out)
00050 00BC 	;
00051 00BC 	; TX_TheByte	(0+0) Send one byte to UART
00052 00BC 	; RX_TheByte	(0+0) Receive one byte from UART
00053 00BC 	; StoreSerIn	(X/0) Put the byte in W into the serial input buffer, FSR0
00054 00BC 	; GetSerIn	(X/0) Get a byte from the serial input buffer, FSR0
00055 00BC 	; FlushInBuff	(X/0) Flush the serial incoming buffer.
00056 00BC 	; GetSerInBytes	(X/0) Get the number of bytes in the serial input buffer
00057 00BC 	; GetSerOutBytes	(X/0) Get the number of bytes in the serial ouput buffer
00058 00BC 	; StoreSerOut	(X/0) Put the byte in W into the serial output buffer, FSR0
00059 00BC 	; POP_SerOut	(X/0) Remove the last char stored in the output buffer
00060 00BC 	; GetSerOut	(X/0) Get a byte from the serial Output buffer, FSR0
00061 00BC 	;	       W=Byte, Param78:0=ValidFlag
00062 00BC 	;=========================================================================================
00063 00BC 	;=========================================================================================
00064 00BC 	; *** Put in main loop ***
SimpleServo16PS.asm                                                   Page: 11
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00065 00BC 	;
00066 00BC 	; Handle Serial Communications
00067 00BC 	;	BTFSC	PIR1,TXIF	;TX done?
00068 00BC 	;	CALL	TX_TheByte	; Yes
00069 00BC 	;
00070 00BC 	; move any serial data received into the 32 byte input buffer
00071 00BC 	;	BTFSS	DataReceivedFlag
00072 00BC 	;	BRA	ML_Ser_Out
00073 00BC 	;	MOVF	RXByte,W
00074 00BC 	;	BCF	DataReceivedFlag
00075 00BC 	;	CALL	StoreSerIn
00076 00BC 	;
00077 00BC 	;=========================================================================================
00078 00BC 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00079 00BC 	;
00080 00BC 	;ML_Ser_Out	BTFSS	DataSentFlag
00081 00BC 	;	BRA	ML_Ser_End
00082 00BC 	;	CALL	GetSerOut
00083 00BC 	;	BTFSS	Param78,0
00084 00BC 	;	BRA	ML_Ser_End
00085 00BC 	;	MOVWF	TXByte
00086 00BC 	;	BCF	DataSentFlag
00087 00BC 	;ML_Ser_End
00088 00BC 	;
00089 00BC 	;=========================================================================================
00090 00BC 	; *** Put in Init section ***
00091 00BC 	;BAUDCON_Value	EQU	b'00001000'
00092 00BC 	;TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, High speed
00093 00BC 	;RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00094 00BC 	;; 8MHz clock low speed (BRGH=0,BRG16=1)
00095 00BC 	;;Baud_300	EQU	d'1666'	;0.299, -0.02%
00096 00BC 	;;Baud_1200	EQU	d'416'	;1.199, -0.08%
00097 00BC 	;;Baud_2400	EQU	d'207'	;2.404, +0.16%
00098 00BC 	;;Baud_9600	EQU	d'51'	;9.615, +0.16%
00099 00BC 	;; 8MHz clock high speed (BRGH=1,BRG16=1)
00100 00BC 	;Baud_300	EQU	d'6666'	;0.299, -0.02%
00101 00BC 	;Baud_1200	EQU	d'1666'	;1.199, -0.08%
00102 00BC 	;Baud_2400	EQU	d'832'	;2.404, +0.16%
00103 00BC 	;Baud_9600	EQU	d'207'	;9.615, +0.16%
00104 00BC 	;Baud_19_2	EQU	d'103'	;19.23k, +0.16
00105 00BC 	;Baud_57_6	EQU	d'34'	;57.14k, -0.79
00106 00BC 	;BaudRate	EQU	Baud_9600
00107 00BC 	;-------------
00108 00BC 	;
00109 00BC 	; setup serial I/O
00110 00BC 	;	movlb	0x03	; bank 3
00111 00BC 	;	MOVLW	TXSTA_Value
00112 00BC 	;	MOVWF	TXSTA
00113 00BC 	;	MOVLW	low BaudRate
00114 00BC 	;	MOVWF	SPBRGL
00115 00BC 	;	MOVLW	high BaudRate
00116 00BC 	;	MOVWF	SPBRGH
00117 00BC 	;	MOVLW	RCSTA_Value
00118 00BC 	;	MOVWF	RCSTA
00119 00BC 	;
00120 00BC 	;	movlb	0x01	; bank 1
00121 00BC 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00122 00BC 	;	movlb	0x00	; bank 0
00123 00BC 	;	BSF	INTCON,PEIE	;Peripheral IRQ Enable
00124 00BC 	;	BSF	INTCON,GIE
00125 00BC 	;
00126 00BC 	;=========================================================================================
00127 00BC 	; *** Put in ISR ***
00128 00BC 	;-----------------------------------------------------------------------------------------
00129 00BC 	;AUSART Serial ISR
00130 00BC 	;
00131 00BC 	;IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00132 00BC 	;	BRA	IRQ_Ser_End
00133 00BC 	;	CALL	RX_TheByte
00134 00BC 	;
00135 00BC 	;IRQ_Ser_End
00136 00BC 	;
00137 00BC 	;=========================================================================================
00138 00BC 	; Send one byte
00139 00BC 	; Entry: Bank0
00140 00BC 	; Exit: Bank0
00141 00BC 	;
00142 00BC 	;
00143 00BC 1930 	TX_TheByte	BTFSC	DataSentFlag
00144 00BD 0008 		RETURN
00145 00BE 082E 		MOVF	TXByte,W	
00146 00BF 0023  a		MOVLB	TXREG	;banksel
00145 00C0 		BANKSEL	TXREG
00147 00C0 009A 		MOVWF	TXREG
00148 00C1 0020 		MOVLB	0
00149 00C2 1530 		BSF	DataSentFlag
00150 00C3 0008 		RETURN
00151 00C4 	;
00152 00C4 	;=========================================================================================
00153 00C4 	;
00154 00C4 	RX_TheByte:
00155 00C4 0023  a		MOVLB	RCSTA	;banksel
00154 00C5 		BANKSEL	RCSTA	; bank 3
00156 00C5 081D 		MOVF	RCSTA,W
00157 00C6 3906 		ANDLW	0x06
00158 00C7 		SKPZ		;Frame or Overrun Err?
00158 00C7 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00159 00C8 3205 		BRA	RX_TheByte_Err	; yes
00160 00C9 0819 		MOVF	RCREG,W
SimpleServo16PS.asm                                                   Page: 12
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00161 00CA 	;
00162 00CA 0020 		movlb	0x00	; bank 0
00163 00CB 00AF 		MOVWF	RXByte
00164 00CC 14B0 		BSF	DataReceivedFlag
00165 00CD 0008 		RETURN
00166 00CE 	;
00167 00CE 0819 	RX_TheByte_Err	MOVF	RCREG,W	;bad byte so drop it
00168 00CF 01AF 		CLRF	RXByte
00169 00D0 121D 		BCF	RCSTA,CREN
00170 00D1 111D 		BCF	RCSTA,FERR
00171 00D2 109D 		BCF	RCSTA,OERR
00172 00D3 161D 		BSF	RCSTA,CREN
00173 00D4 0020 		movlb	0x00
00174 00D5 0008 		RETURN
00175 00D6 	;
00176 00D6 	;=========================================================================================
00177 00D6 	;=========================================================================================
00178 00D6 	; Put the byte in W into the serial input buffer
00179 00D6 	;
00180 00D6 	; Entry: W = byte to store
00181 00D6 	; Exit: none
00182 00D6 	; Ram Used: Param78, FSR
00183 00D6 	;
00184 00D6 00F8 	StoreSerIn	MOVWF	Param78
00185 00D7 0022 		MOVLB	Ser_Buff_Bank
00186 00D8 0AA0 		INCF	Ser_In_Bytes,F
00187 00D9 	;	
00188 00D9 0822 		MOVF	Ser_In_InPtr,W
00189 00DA 391F 		ANDLW	0x1F
00190 00DB 0AA2 		INCF	Ser_In_InPtr,F
00191 00DC 3E26 		ADDLW	low Ser_In_Buff
00192 00DD 0084 		MOVWF	FSR0
00193 00DE 3001 		MOVLW	high Ser_In_Buff
00194 00DF 0085 		MOVWF	FSR0H
00195 00E0 0878 		MOVF	Param78,W
00196 00E1 0080 		MOVWF	INDF0
00197 00E2 0020 		MOVLB	0x00
00198 00E3 0008 		RETURN
00199 00E4 	;
00200 00E4 	;=========================================================================================
00201 00E4 	; Get a byte from the serial input buffer
00202 00E4 	;
00203 00E4 	; Entry: none
00204 00E4 	; Exit: W=byte from buffer, Param78,0=valid
00205 00E4 	;
00206 00E4 0022 	GetSerIn	MOVLB	Ser_Buff_Bank
00207 00E5 1078 		BCF	Param78,0	;no data
00208 00E6 08A0 		MOVF	Ser_In_Bytes,F
00209 00E7 		SKPNZ
00209 00E7 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00210 00E8 320A 		bra	GetSerIn_End
00211 00E9 1478 		BSF	Param78,0
00212 00EA 03A0 		DECF	Ser_In_Bytes,F
00213 00EB 0823 		MOVF	Ser_In_OutPtr,W
00214 00EC 391F 		ANDLW	0x1F
00215 00ED 0AA3 		INCF	Ser_In_OutPtr,F
00216 00EE 3E26 		ADDLW	low Ser_In_Buff
00217 00EF 0084 		MOVWF	FSR0L
00218 00F0 3001 		MOVLW	high Ser_In_Buff
00219 00F1 0085 		MOVWF	FSR0H
00220 00F2 0800 		MOVF	INDF0,W
00221 00F3 0020 	GetSerIn_End	movlb	0
00222 00F4 0008 		return
00223 00F5 	;
00224 00F5 	;=========================================================================================
00225 00F5 	; Flush the serial incoming buffer
00226 00F5 	; Entry: none
00227 00F5 	; Exit: bank 0
00228 00F5 	;
00229 00F5 0022 	FlushInBuff	movlb	Ser_Buff_Bank
00230 00F6 01A0 		clrf	Ser_In_Bytes
00231 00F7 01A3 		clrf	Ser_In_OutPtr
00232 00F8 01A2 		clrf	Ser_In_InPtr
00233 00F9 0020 		movlb	0
00234 00FA 0008 		return
00235 00FB 	;
00236 00FB 	;=========================================================================================
00237 00FB 	; Get the number of bytes in the serial input buffer
00238 00FB 	;
00239 00FB 	; Entry: none
00240 00FB 	; Exit: W=bytes in buffer, Z
00241 00FB 	;
00242 00FB 0022 	GetSerInBytes	MOVLB	Ser_Buff_Bank
00243 00FC 0820 		MOVF	Ser_In_Bytes,W
00244 00FD 0020 		movlb	0
00245 00FE 0008 		return
00246 00FF 	;
00247 00FF 	;=========================================================================================
00248 00FF 	; Get the number of bytes in the serial ouput buffer
00249 00FF 	;
00250 00FF 	; Entry: none
00251 00FF 	; Exit: W=bytes in buffer, Z
00252 00FF 	;
00253 00FF 0022 	GetSerOutBytes	MOVLB	Ser_Buff_Bank
00254 0100 0821 		MOVF	Ser_Out_Bytes,W
00255 0101 0020 		movlb	0
00256 0102 0008 		return
00257 0103 	;
00258 0103 	;=========================================================================================
SimpleServo16PS.asm                                                   Page: 13
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00259 0103 	; Put the byte in W into the serial output buffer
00260 0103 	;
00261 0103 	; Entry: W = byte to store
00262 0103 	; Exit: Param78 & W = byte stored, Bank 0
00263 0103 	; Ram used: Param78, FSR0
00264 0103 	; Calls: (0) none
00265 0103 	;
00266 0103 00F8 	StoreSerOut	MOVWF	Param78
00267 0104 0022 		MOVLB	Ser_Buff_Bank
00268 0105 0AA1 		INCF	Ser_Out_Bytes,F
00269 0106 	;	
00270 0106 0824 		MOVF	Ser_Out_InPtr,W
00271 0107 391F 		ANDLW	0x1F
00272 0108 0AA4 		INCF	Ser_Out_InPtr,F
00273 0109 3E46 		ADDLW	low Ser_Out_Buff
00274 010A 0084 		MOVWF	FSR0
00275 010B 3001 		MOVLW	high Ser_In_Buff
00276 010C 0085 		MOVWF	FSR0H
00277 010D 0878 		MOVF	Param78,W
00278 010E 0080 		MOVWF	INDF0
00279 010F 0020 		movlb	0
00280 0110 0008 		return
00281 0111 	;
00282 0111 	;=========================================================================================
00283 0111 	; Remove the last char stored in the output buffer
00284 0111 	;
00285 0111 0022 	POP_SerOut	MOVLB	Ser_Buff_Bank
00286 0112 08A1 		MOVF	Ser_Out_Bytes,F
00287 0113 		SKPNZ
00287 0113 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00288 0114 3202 		bra	POP_SerOut_End
00289 0115 03A1 		DECF	Ser_Out_Bytes,F
00290 0116 03A4 		DECF	Ser_Out_InPtr,F
00291 0117 0020 	POP_SerOut_End	movlb	0
00292 0118 0008 		return
00293 0119 	;
00294 0119 	;=========================================================================================
00295 0119 	; Get a byte from the serial Output buffer
00296 0119 	;
00297 0119 	; Entry: none
00298 0119 	; Exit: W=byte from buffer, Param78,0=valid
00299 0119 	;
00300 0119 0022 	GetSerOut	MOVLB	Ser_Buff_Bank
00301 011A 1078 		BCF	Param78,0	;no data
00302 011B 08A1 		MOVF	Ser_Out_Bytes,F
00303 011C 		SKPNZ
00303 011C 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00304 011D 320A 		bra	GetSerOut_End
00305 011E 1478 		BSF	Param78,0
00306 011F 03A1 		DECF	Ser_Out_Bytes,F
00307 0120 0825 		MOVF	Ser_Out_OutPtr,W
00308 0121 391F 		ANDLW	0x1F
00309 0122 0AA5 		INCF	Ser_Out_OutPtr,F
00310 0123 3E46 		ADDLW	low Ser_Out_Buff
00311 0124 0084 		MOVWF	FSR0L
00312 0125 3001 		MOVLW	high Ser_In_Buff
00313 0126 0085 		MOVWF	FSR0H
00314 0127 0800 		MOVF	INDF0,W
00315 0128 0020 	GetSerOut_End	movlb	0
00316 0129 0008 		return
00317 012A 	;
00318 012A 	;=========================================================================================
00319 012A 	;
00320 012A 	;
00321 012A 	;
00322 012A 	;
00323 012A 	;
00324 012A 	;
00325 012A 	;
00326 012A 	;
00327 012A 	;
00328 012A 	;
00329 012A 	;
00330 012A 	;
00331 012A 	;
00332 012A 	;
00333 012A 	;
00334 012A 	;
00335 012A 	;
00336 012A 	;
00337 012A 	;
00338 012A 	;
00500 012A 		include <RS232_Parse.inc>
00001 012A 	;=========================================================================================
00002 012A 	;
00003 012A 	;    Filename:      RS232_Parse.inc
00004 012A 	;    Date:          5/25/2018
00005 012A 	;    File Version:  1.0d5
00006 012A 	;
00007 012A 	;    Author:        David M. Flynn
00008 012A 	;    Company:       Oxford V.U.E., Inc.
00009 012A 	;    E-Mail:        dflynn@oxfordvue.com
00010 012A 	;
00011 012A 	;=========================================================================================
00012 012A 	; Routines:
00013 012A 	;
00014 012A 	; RS232_Parse	Call from main loop
00015 012A 	; RS232_ClearTXData	Clear the TX data, FSR1
00016 012A 	; RS232_Send	Send the data at TX_data, FSR0, FSR1
SimpleServo16PS.asm                                                   Page: 14
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00017 012A 	;
00018 012A 	;=========================================================================================
00019 012A 	; Notes:
00020 012A 	;
00021 012A 	; History:
00022 012A 	; 1.0b5  5/25/2018	RS232_MasterAddr, RS232_SlaveAddr now in ram
00023 012A 	; 1.0d4  5/18/2018	Added RS232_ClearTXData, RS232_Send.
00024 012A 	; 1.0d3  5/17/2018	Used Timer1Lo for RXTimeout.
00025 012A 	; 1.0d2  4/26/2018	Comments, used in robot arm project.
00026 012A 	; 1.0d1  1/12/2016	Modified for I2C to RS-232 8 byte packets.
00027 012A 	; 1.0d1  11/9/2015	Adapted for QD Tester
00028 012A 	; 1.0    12/6/2013	First Rev'd version
00029 012A 	;
00030 012A 	; RS232_Parse	(X/0) Parse any bytes received by the serial port
00031 012A 	; Packet format: (FF FF) SA0 (SA1) DA0 (DA1) D0 D1 D2 D3 D4 D5 D6 D7 (CS)
00032 012A 	;  FF = Sync byte, SAn = Source Address, DA = Destination Address,
00033 012A 	;       Dn = Data, CS Check Sum (xor of Address and Data bytes)
00034 012A 	;  SA Sender's Address must be RS232_RAddr ( the boss )
00035 012A 	;  DA Destination Address must be RS232_MyAddr ( this program )
00036 012A 	;  If the checksum matches put the data bytes in the RX_Data buffer,
00037 012A 	;   set RXDataValidFlag and RXDataIsNew.
00038 012A 	;=========================================================================================
00039 012A 	;	constant RP_LongAddr=1		;16 bit addresses
00040 012A 	; default to a 6 byte packet SA DA D0 D1 D2 D3
00041 012A 	;
00042 012A 		ifndef UseRS232SyncBytes
00044 012A 		endif
00045 012A 	;
00046 012A 		ifndef UseRS232SendSyncBytes
00048 012A 		endif
00049 012A 	;
00050 012A 		ifndef RP_LongAddr
00052 012A 		endif
00053 012A 	;
00054 012A 		ifndef RP_DataBytes
00056 012A 		endif
00057 012A 	;
00058 012A 		ifndef UseRS232Chksum
00060 012A 		endif
00061 012A 	;
00062 012A 		constant RXTimeout=5		;50 mS max between incoming bytes
00063 012A 	;=========================================================================================
00064 012A 	; Bank0 variable used by RS232_Parse:
00065 012A 	;
00066 012A 	;	cblock
00067 012A 	;	RS232_MasterAddr
00068 012A 	;	RS232_SlaveAddr
00069 012A 	;	endc
00070 012A 	;
00071 012A 	; Bank1 variable used by RS232_Parse:
00072 012A 	;
00073 012A 	;	cblock
00074 012A 	;	RX_ParseFlags
00075 012A 	;	RX_Flags
00076 012A 	;	RX_DataCount
00077 012A 	;	RX_CSUM
00078 012A 	;	RX_TempData:RP_DataBytes
00079 012A 	;	RX_Data:RP_DataBytes
00080 012A 	;	TX_Data:RP_DataBytes
00081 012A 	;	endc
00082 012A 	;RX_ParseFlags Bits
00083 012A 00A0 	#Define	SyncByte1RXd	RX_ParseFlags,0
00084 012A 00A0 	#Define	SyncByte2RXd	RX_ParseFlags,1
00085 012A 00A0 	#Define	SourceAddLoRXd	RX_ParseFlags,2
00086 012A 00A0 	#Define	SourceAddHiRXd	RX_ParseFlags,3
00087 012A 00A0 	#Define	DestAddLoRXd	RX_ParseFlags,4
00088 012A 00A0 	#Define	DestAddHiRXd	RX_ParseFlags,5
00089 012A 00A0 	#Define	AllDataRXd	RX_ParseFlags,6
00090 012A 	;
00091 012A 	;RX_Flags Bits
00092 012A 00A1 	#Define	RXDataValidFlag	RX_Flags,0
00093 012A 00A1 	#Define	RXDataIsNew	RX_Flags,1
00094 012A 00A1 	#Define	RXSrcIsMaster	RX_Flags,2
00095 012A 00A1 	#Define	RXDstIsMe	RX_Flags,3
00096 012A 	;
00097 012A 	;
00098 012A 	; *** put in main loop
00099 012A 	;	CALL	RS232_Parse
00100 012A 	; if RXDataValidFlag is set data may be used
00101 012A 	;
00102 012A 	;=========================================================================================
00103 012A 	; Parse any bytes received by the serial port
00104 012A 	;
00105 012A 	; Receive 0xFF,0xFF,SA0,(SA1),DA0,(DA1),Cmd,Data0,Data1,Data2,CS
00106 012A 	;
00107 012A 	;
00108 012A 	; Entry: none
00109 012A 	; Exit: none
00110 012A 	; Ram Used: Param78, FSR
00111 012A 	; Calls (1+0): GetSerIn
00112 012A 	;
00113 012A 0021 	RS232_Parse	movlb	0x01	;bank 1
00114 012B 08A0 		movf	RX_ParseFlags,F
00115 012C 		SKPNZ		;Receive in process?
00115 012C 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00116 012D 3207 		bra	RS232_Parse_Byte	; no
00117 012E 	;
00118 012E 0020 		movlb	0	;bank 0
00119 012F 08A6 		movf	Timer1Lo,F
SimpleServo16PS.asm                                                   Page: 15
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00120 0130 		SKPZ		;Timed out?
00120 0130 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00121 0131 3203 		bra	RS232_Parse_Byte	; no
00122 0132 	;timed out
00123 0132 15B1 		bsf	ssRX_Timeout
00124 0133 0021 		movlb	0x01	;bank 1
00125 0134 01A0 		clrf	RX_ParseFlags
00126 0135 	;
00127 0135 20E4 	RS232_Parse_Byte	CALL	GetSerIn
00128 0136 1C78 		BTFSS	Param78,0	;Got a byte?
00129 0137 0008 		RETURN		; No
00130 0138 	;
00131 0138 00F8 		MOVWF	Param78	;Data Byte RXd
00132 0139 3005 		movlw	RXTimeout	;Reset time-out timer
00133 013A 00A6 		movwf	Timer1Lo
00134 013B 	; Command inturpreter
00135 013B 		if UseRS232SyncBytes
00136 013B 	;
00137 013B 0021 		movlb	0x01	;bank 1
00138 013C 08A0 		MOVF	RX_ParseFlags,F
00139 013D 		SKPZ		;Beginning new packet?
00139 013D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00140 013E 3205 		BRA	RS232_Parse_Sync2	; No
00141 013F 30DD 		MOVLW	kRS232SyncByteValue
00142 0140 0278 		SUBWF	Param78,W
00143 0141 		SKPNZ		;Sync byte OK?
00143 0141 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00144 0142 1420 		BSF	SyncByte1RXd	; Yes
00145 0143 3218 		bra	RS232_Parse_Rtn
00146 0144 	;
00147 0144 18A0 	RS232_Parse_Sync2	btfsc	SyncByte2RXd
00148 0145 3206 		bra	RS232_Parse_SALo
00149 0146 30DD 		movlw	kRS232SyncByteValue
00150 0147 0278 		subwf	Param78,W
00151 0148 		SKPZ
00151 0148 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00152 0149 2998 		goto	RS232_Parse_Error
00153 014A 14A0 		bsf	SyncByte2RXd
00154 014B 3210 		bra	RS232_Parse_Rtn
00155 014C 	;
00156 014C 		endif
00157 014C 	;
00158 014C 	; LSB of Source Address
00159 014C 0021 	RS232_Parse_SALo	movlb	0x01	;bank 1
00160 014D 1920 		btfsc	SourceAddLoRXd
00161 014E 320F 		bra	RS232_Parse_SALo_end
00162 014F 	;
00163 014F 01A3 		clrf	RX_CSUM
00164 0150 01A2 		clrf	RX_DataCount
00165 0151 1521 		bsf	RXSrcIsMaster
00166 0152 0020 		movlb	0
00167 0153 0838 		movf	RS232_MasterAddr,W
00168 0154 0021 		movlb	1
00169 0155 0278 		subwf	Param78,W
00170 0156 		SKPZ
00170 0156 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00171 0157 1121 		bcf	RXSrcIsMaster
00172 0158 1520 		bsf	SourceAddLoRXd
00173 0159 0878 		movf	Param78,W
00174 015A 00A4 		movwf	RX_SrcAdd
00175 015B 06A3 		xorwf	RX_CSUM,F
00176 015C 0020 	RS232_Parse_Rtn	movlb	0x00	;bank 0
00177 015D 0008 		return
00178 015E 	RS232_Parse_SALo_end:
00179 015E 	;
00180 015E 	; MSB of Source Address
00181 015E 		if RP_LongAddr
00196 015E 		endif
00197 015E 	;
00198 015E 	; LSB of Destination Address
00199 015E 1A20 	RS232_Parse_DALo	btfsc	DestAddLoRXd
00200 015F 320C 		bra	RS232_Parse_DALo_End
00201 0160 15A1 		bsf	RXDstIsMe
00202 0161 0020 		movlb	0
00203 0162 0839 		movf	RS232_SlaveAddr,W
00204 0163 0021 		movlb	1
00205 0164 0278 		subwf	Param78,W
00206 0165 		SKPZ
00206 0165 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00207 0166 11A1 		bcf	RXDstIsMe
00208 0167 1620 		bsf	DestAddLoRXd
00209 0168 0878 		movf	Param78,W
00210 0169 00A5 		movwf	RX_DstAdd
00211 016A 06A3 		xorwf	RX_CSUM,F
00212 016B 33F0 		bra	RS232_Parse_Rtn
00213 016C 	RS232_Parse_DALo_End:
00214 016C 	;
00215 016C 	; MSB of Destination Address
00216 016C 		if RP_LongAddr
00231 016C 		endif
00232 016C 	;
00233 016C 1B20 	RS232_Parse_Data	btfsc	AllDataRXd
00234 016D 320F 		bra	RS232_Parse_Data_end
00235 016E 0822 		movf	RX_DataCount,W
00236 016F 3EA6 		addlw	low RX_TempData
00237 0170 0084 		movwf	FSR0L
00238 0171 3000 		movlw	high RX_TempData
00239 0172 0085 		movwf	FSR0H
00240 0173 0878 		movf	Param78,W
SimpleServo16PS.asm                                                   Page: 16
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00241 0174 06A3 		xorwf	RX_CSUM,F
00242 0175 0080 		movwf	INDF0
00243 0176 0AA2 		incf	RX_DataCount,F
00244 0177 3004 		movlw	RP_DataBytes
00245 0178 0222 		subwf	RX_DataCount,W
00246 0179 		SKPZ
00246 0179 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00247 017A 33E1 		bra	RS232_Parse_Rtn
00248 017B 1720 		bsf	AllDataRXd
00249 017C 	;
00250 017C 		if UseRS232Chksum
00251 017C 33DF 		bra	RS232_Parse_Rtn
00252 017D 		endif
00253 017D 	RS232_Parse_Data_end
00254 017D 	;
00255 017D 		if UseRS232Chksum
00256 017D 	; checksum
00257 017D 0878 		movf	Param78,W
00258 017E 0223 		subwf	RX_CSUM,W
00259 017F 		SKPZ		;Checksum matches?
00259 017F 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00260 0180 3217 		bra	RS232_Parse_Error	; No
00261 0181 	;
00262 0181 		endif
00263 0181 	;
00264 0181 30A6 		movlw	low RX_TempData
00265 0182 0084 		movwf	FSR0L
00266 0183 3000 		movlw	high RX_TempData
00267 0184 0085 		movwf	FSR0H
00268 0185 	;
00269 0185 30AA 		movlw	low RX_Data
00270 0186 0086 		movwf	FSR1L
00271 0187 3000 		movlw	high RX_Data
00272 0188 0087 		movwf	FSR1H
00273 0189 	;
00274 0189 3004 		movlw	RP_DataBytes
00275 018A 00F8 		movwf	Param78
00276 018B 0012 	RS232_Parse_L1	moviw	FSR0++
00277 018C 001E 		movwi	FSR1++
00278 018D 0BF8 		decfsz	Param78,F
00279 018E 33FC 		bra	RS232_Parse_L1
00280 018F 	;
00281 018F 14A1 		bsf	RXDataIsNew	;good packet rx'd
00282 0190 1421 		bsf	RXDataValidFlag
00283 0191 1D21 		btfss	RXSrcIsMaster	;from master?
00284 0192 1021 		bcf	RXDataValidFlag	; no
00285 0193 1DA1 		btfss	RXDstIsMe	;to me?
00286 0194 1021 		bcf	RXDataValidFlag	; no
00287 0195 	;
00288 0195 01A0 		clrf	RX_ParseFlags
00289 0196 0020 		movlb	0x00
00290 0197 0008 		return
00291 0198 	;
00292 0198 	;
00293 0198 	; We didn't get the sync byte we were expecting so restart the parser
00294 0198 01A0 	RS232_Parse_Error	CLRF	RX_ParseFlags
00295 0199 28F5 		goto	FlushInBuff
00296 019A 	;
00297 019A 	;=========================================================================================
00298 019A 	; Clear the TX data, unused bytes are sent as 0x00
00299 019A 	; Entry: none
00300 019A 	; Exit: Bank 0
00301 019A 	; Ram used: Param78, FSR1
00302 019A 	; Calls: none
00303 019A 3001 	RS232_ClearTXData	movlw	1	;bank 1
00304 019B 3004 		movlw	RP_DataBytes
00305 019C 00F8 		movwf	Param78
00306 019D 30AE 		movlw	low TX_Data
00307 019E 0086 		movwf	FSR1L
00308 019F 3000 		movlw	high TX_Data
00309 01A0 0087 		movwf	FSR1H
00310 01A1 3000 		movlw	0x00
00311 01A2 001E 	RS232_ClearTXData_L1	movwi	FSR1++
00312 01A3 0BF8 		decfsz	Param78,F
00313 01A4 33FD 		bra	RS232_ClearTXData_L1
00314 01A5 0020 		movlb	0x00
00315 01A6 0008 		return
00316 01A7 	;
00317 01A7 	;=========================================================================================
00318 01A7 	; Send a data packet
00319 01A7 	;
00320 01A7 	;Entry: TX_Data = Data to send 
00321 01A7 	;Exit: TX_Data is cleared
00322 01A7 	;Ram used: Param78,Param79,Param7A,FSR0,FSR1
00323 01A7 	;Calls: (1+0) StoreSerOut
00324 01A7 	;
00325 01A7 	RS232_Send:
00326 01A7 	;
00327 01A7 		if UseRS232SendSyncBytes
00334 01A7 		endif
00335 01A7 	;
00336 01A7 0020 		movlb	0x00	;bank 0
00337 01A8 01FA 		clrf	Param7A	;CSum
00338 01A9 0839 		movf	RS232_SlaveAddr,W	;source address
00339 01AA 06FA 		xorwf	Param7A,F
00340 01AB 2103 		call	StoreSerOut
00341 01AC 	;
00342 01AC 		if RP_LongAddr
00346 01AC 		endif
SimpleServo16PS.asm                                                   Page: 17
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00347 01AC 	;
00348 01AC 0838 		movf	RS232_MasterAddr,W	;destination address
00349 01AD 06FA 		xorwf	Param7A,F
00350 01AE 2103 		call	StoreSerOut
00351 01AF 	;
00352 01AF 		if RP_LongAddr
00356 01AF 		endif
00357 01AF 	;
00358 01AF 0021 		movlb	1	;bank 1
00359 01B0 3004 		movlw	RP_DataBytes
00360 01B1 00F9 		movwf	Param79
00361 01B2 30AE 		movlw	low TX_Data
00362 01B3 0086 		movwf	FSR1L
00363 01B4 3000 		movlw	high TX_Data
00364 01B5 0087 		movwf	FSR1H
00365 01B6 	;
00366 01B6 0016 	RS232_Send_L1	moviw	FSR1++
00367 01B7 06FA 		xorwf	Param7A,F
00368 01B8 2103 		call	StoreSerOut
00369 01B9 0BF9 		decfsz	Param79,F
00370 01BA 33FB 		bra	RS232_Send_L1
00371 01BB 	;
00372 01BB 		if UseRS232Chksum
00373 01BB 087A 		movf	Param7A,W
00374 01BC 2103 		call	StoreSerOut
00375 01BD 		endif
00376 01BD 	;
00377 01BD 299A 		goto	RS232_ClearTXData
00378 01BE 	;
00379 01BE 	;=========================================================================================
00380 01BE 	;
00381 01BE 	;
00382 01BE 	;
00383 01BE 	;
00384 01BE 	;
00385 01BE 	;
00386 01BE 	;
00387 01BE 	;
00388 01BE 	;
00389 01BE 	;
00390 01BE 	;
00391 01BE 	;
00392 01BE 	;
00393 01BE 	;
00394 01BE 	;
00395 01BE 	;
00396 01BE 	;
00397 01BE 	;
00398 01BE 	;
00399 01BE 	;
00400 01BE 	;
00401 01BE 	;
00402 01BE 	;
00403 01BE 	;
00501 01BE 	;
00502 01BE 	;==============================================================================================
00503 01BE 	;
00504 01BE 	start	mLongCall	InitializeIO
00504 01BE 3189      M		movlp	InitializeIO	                       movlp                  Destination
00504 01BF 21CA      M		call	InitializeIO	                       call                   Destination
00504 01C0 3181      M		movlp	$	                       movlp                  $
00505 01C1 	;
00506 01C1 	;=========================================================================================
00507 01C1 	; Setup default servo data
00508 01C1 	;
00509 01C1 238A 		CALL	ServoInit16
00510 01C2 2379 		CALL	StartServos
00511 01C3 	;
00512 01C3 	;
00513 01C3 	;=========================================================================================
00514 01C3 	;*****************************************************************************************
00515 01C3 	;=========================================================================================
00516 01C3 0064 	MainLoop	CLRWDT
00517 01C4 	;
00518 01C4 20FB 		call	GetSerInBytes
00519 01C5 		SKPZ		;Any data?
00519 01C5 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00520 01C6 212A 		CALL	RS232_Parse	; yes
00521 01C7 	;
00522 01C7 	;---------------------
00523 01C7 	; Handle Serial Communications
00524 01C7 	;
00525 01C7 0021 		movlb	1
00526 01C8 1CA1 		btfss	RXDataIsNew
00527 01C9 3203 		bra	ML_1
00528 01CA 		mLongCall	HandleRXData
00528 01CA 3188      M		movlp	HandleRXData	                       movlp                  Destination
00528 01CB 2004      M		call	HandleRXData	                       call                   Destination
00528 01CC 3181      M		movlp	$	                       movlp                  $
00529 01CD 0020 	ML_1	movlb	0	;Bank 0
00530 01CE 	;
00531 01CE 1A11 		BTFSC	PIR1,TXIF	;TX done?
00532 01CF 20BC 		CALL	TX_TheByte	; Yes
00533 01D0 	;
00534 01D0 	; move any serial data received into the 32 byte input buffer
00535 01D0 1CB0 		BTFSS	DataReceivedFlag
00536 01D1 3203 		BRA	ML_Ser_Out
00537 01D2 082F 		MOVF	RXByte,W
00538 01D3 10B0 		BCF	DataReceivedFlag
SimpleServo16PS.asm                                                   Page: 18
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00539 01D4 20D6 		CALL	StoreSerIn
00540 01D5 	;
00541 01D5 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00542 01D5 	;
00543 01D5 1D30 	ML_Ser_Out	BTFSS	DataSentFlag
00544 01D6 3205 		BRA	ML_Ser_End
00545 01D7 2119 		CALL	GetSerOut
00546 01D8 1C78 		BTFSS	Param78,0
00547 01D9 3202 		BRA	ML_Ser_End
00548 01DA 00AE 		MOVWF	TXByte
00549 01DB 1130 		BCF	DataSentFlag
00550 01DC 	ML_Ser_End:
00551 01DC 	;----------------------
00552 01DC 	;
00553 01DC 229D 		CALL	IdleServos
00554 01DD 	;	CALL	TestServoLib	;tc
00555 01DD 	;
00556 01DD 0020 		MOVLB	0x00
00557 01DE 183B 		BTFSC	SW1_Flag	;manual reset
00558 01DF 29BE 		GOTO	start
00559 01E0 	;
00560 01E0 29C3 		goto	MainLoop
00561 01E1 	;=========================================================================================
00562 01E1 	;*****************************************************************************************
00563 01E1 	;=========================================================================================
00564 01E1 	;
00565 01E1 		include <ServoLib.inc>
00001 01E1 	;=========================================================================================
00002 01E1 	;
00003 01E1 	;    Filename:      ServoLib.inc
00004 01E1 	;    Date:          4/6/2021
00005 01E1 	;    File Version:  1.0d3
00006 01E1 	;    
00007 01E1 	;    Author:        David M. Flynn
00008 01E1 	;    Company:       Oxford V.U.E., Inc.
00009 01E1 	;    E-Mail:        dflynn@oxfordvue.com
00010 01E1 	;    Web Site:      http://www.oxfordvue.com/
00011 01E1 	;
00012 01E1 	;=========================================================================================
00013 01E1 	;  Low level routines for SimpleServo16 PCB
00014 01E1 	;
00015 01E1 	;    History:
00016 01E1 	;
00017 01E1 	; 1.0d3   4/6/2021	Added EEPromToSequencer, SequencerToEEProm
00018 01E1 	; 1.0d2   4/5/2021	Added EEPromToServoParams, ServoParamsToEEProm
00019 01E1 	; 1.0d1   4/2/2021	Copied from I2C Version
00020 01E1 	;
00021 01E1 	;=========================================================================================
00022 01E1 	; PIC16F1847 on SimpleServo16 PCB Packet Serial Version
00023 01E1 	;
00024 01E1 	;   Pin 1 (RA2/AN2) Address A2 (output)
00025 01E1 	;   Pin 2 (RA3/AN3) Enable Servos 0..7 (active low output)
00026 01E1 	;   Pin 3 (RA4/AN4) Enable Servos 8..15 (active low output)
00027 01E1 	;   Pin 4 (RA5/MCLR*) Vpp
00028 01E1 	;   Pin 5 (GND) Ground
00029 01E1 	;   Pin 6 (RB0) SW1/LED1 (Active Low Input/Output) (System LED)
00030 01E1 	;   Pin 7 (RB1/AN11/SDA1) RX Data
00031 01E1 	;   Pin 8 (RB2/AN10/RX)   TX Data 
00032 01E1 	;   Pin 9 (RB3/CCP1) Pulse output for Servos 0..7
00033 01E1 	;
00034 01E1 	;   Pin 10 (RB4/AN8/SLC1) SW2/LED2 (Active Low Input/Output)
00035 01E1 	;   Pin 11 (RB5/AN7)  SW3/LED3 (Active Low Input/Output)
00036 01E1 	;   Pin 12 (RB6/AN5/CCP2) ICSPCLK
00037 01E1 	;   Pin 13 (RB7/AN6) ICSPDAT
00038 01E1 	;   Pin 14 (Vcc) +5 volts
00039 01E1 	;   Pin 15 (RA6) N.C.
00040 01E1 	;   Pin 16 (RA7/CCP2) Pulse output for Servos 8..15
00041 01E1 	;   Pin 17 (RA0) Address A0 (output)
00042 01E1 	;   Pin 18 (RA1) Address A1 (output)
00043 01E1 	;
00044 01E1 	;=========================================================================================
00045 01E1 	;    Defines constants and variables in Banks 3,4,5 and 6
00046 01E1 	; include ServoLib.h
00047 01E1 	;=========================================================================================
00048 01E1 	;=========================================================================================
00049 01E1 	; Routines:
00050 01E1 	;
00051 01E1 	; ISR's
00052 01E1 	;  ISR_ServoCCP1
00053 01E1 	;  ISR_ServoCCP2
00054 01E1 	;------------------
00055 01E1 	; IdleServos	Call from main loop
00056 01E1 	;
00057 01E1 	; IdleServos_MovPlus
00058 01E1 	; IdleServos_InPos
00059 01E1 	; IdleServos_Accel
00060 01E1 	;
00061 01E1 	; AccelDone
00062 01E1 	; SaveSpeed
00063 01E1 	; GetSpeed
00064 01E1 	; GetMaxSpeed
00065 01E1 	; GetAccelValue
00066 01E1 	; SetFSR0ToServoFlags2
00067 01E1 	; SetFSR0ToServoFlags
00068 01E1 	;
00069 01E1 	; StartServos	Call once to start servo system
00070 01E1 	;
00071 01E1 	; ServoInit16	Call once to init vars
00072 01E1 	; EEPromToServoParams
SimpleServo16PS.asm                                                   Page: 19
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00073 01E1 	; EEPromToSequencer
00074 01E1 	; ServoParamsToEEProm
00075 01E1 	; SequencerToEEProm
00076 01E1 	;
00077 01E1 	; StartMotion	Call to move a servo,  W=Servo# 0..15, Param7D:Param7C = Dest
00078 01E1 	;
00079 01E1 	; oldCode TestServoLib	Call from MainLoop to test, "this is only a test"
00080 01E1 	;
00081 01E1 	; ClampInt(Param7D:Param7C,kMinPulseWidth,kMaxPulseWidth)
00082 01E1 	; ClampMinMax(Param7D:Param7C,W = offset servo# * 2 (0,2,4..30)
00083 01E1 	; 
00084 01E1 	;=========================================================================================
00085 01E1 	; Init Code:
00086 01E1 	;
00087 01E1 	;	CALL	ServoInit16
00088 01E1 	;	CALL	StartServos
00089 01E1 	;
00090 01E1 	;=========================================================================================
00091 01E1 	; ISR Code:
00092 01E1 	;
00093 01E1 	;	MOVLB	0	;Bank0
00094 01E1 	;	BTFSC	PIR1,CCP1IF
00095 01E1 	;	CALL	ISR_ServoCCP1
00096 01E1 	;
00097 01E1 	;	BTFSC	PIR2,CCP2IF
00098 01E1 	;	CALL	ISR_Servo2
00099 01E1 	;
00100 01E1 	;=========================================================================================
00101 01E1 	; Main Loop Code:
00102 01E1 	;
00103 01E1 	;	CALL	IdleServos
00104 01E1 	;	CALL	TestServoLib	;Optional Test Routine
00105 01E1 	;
00106 01E1 	;=========================================================================================
00107 01E1 	; Interupt Service Routine for CCP1
00108 01E1 	;
00109 01E1 0025 	ISR_ServoCCP1	MOVLB	0x05	; bank 5
00110 01E2 	;
00111 01E2 1A62 		BTFSC	ServoCtlFlags,AddrChngDwell	;Is it time to change the address?
00112 01E3 2A2C 		GOTO	IRQ_Servo_Next
00113 01E4 	;
00114 01E4 1862 		BTFSC	ServoCtlFlags,CyclePulseStart	;Is it time to start a new pulse/dwell?
00115 01E5 29E9 		GOTO	IRQ_Servo1_PulseOrDwell
00116 01E6 	;
00117 01E6 1962 		BTFSC	ServoCtlFlags,CyclePulseEnd1	;Is the current pulse ending?
00118 01E7 2A1F 		GOTO	IRQ_Servo1_OL
00119 01E8 	;
00120 01E8 	;	MOVF	ServoCtlFlags,F
00121 01E8 	;	SKPZ
00122 01E8 2A54 		GOTO	IRQ_Servo1_X	;tc
00123 01E9 	; if not set to do anything fall thru and start a cycle
00124 01E9 	IRQ_Servo1_PulseOrDwell:
00125 01E9 1062 		BCF	ServoCtlFlags,CyclePulseStart
00126 01EA 	; FSR1 = ServoFlags+ServoIDX
00127 01EA 0861 		MOVF	ServoIDX,W
00128 01EB 		LOADFSR1W	ServoFlags
00128 01EB 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00128 01EC 0086      M		movwf	FSR1L		movwf 	FSR1L
00128 01ED 0187      M		clrf	FSR1H		clrf	FSR1H
00128 01EE 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00128 01EF 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00129 01F0 	;
00130 01F0 1D01 		BTFSS	INDF1,ServoOnBit0_7	;Is this servo active?
00131 01F1 2A15 		GOTO	IRQ_Servo1_InAct	; No
00132 01F2 	; FSR0 = SigOutTime + ServoIDX * 2			
00133 01F2 3561 		LSLF	ServoIDX,W	;Servo Idx*2
00134 01F3 		LOADFSR0W	SigOutTime
00134 01F3 3E90      M		addlw	low SigOutTime		addlw 	low ADDRESS
00134 01F4 0084      M		movwf	FSR0L		movwf 	FSR0L
00134 01F5 0185      M		clrf	FSR0H		clrf	FSR0H
00134 01F6 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00134 01F7 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00135 01F8 	; Set time to end pulse
00136 01F8 0012 		MOVIW	FSR0++	;Put the pulse into the CCP reg.
00137 01F9 0791 		ADDWF	CCPR1L,F
00138 01FA 0013 		MOVIW	FSR0--
00139 01FB 3D92 		ADDWFC	CCPR1H,F
00140 01FC 3009 		MOVLW	CCPCON_Clr	;Clear output on match
00141 01FD 0093 		MOVWF	CCP1CON	;CCP1 clr on match
00142 01FE 	;Calculate dwell time
00143 01FE 3094 		MOVLW	LOW kServoDwellTimeA	;2.25mS
00144 01FF 00E3 		MOVWF	CalcdDwell
00145 0200 3011 		MOVLW	HIGH kServoDwellTimeA
00146 0201 00E4 		MOVWF	CalcdDwellH
00147 0202 0012 		MOVIW	FSR0++	;SigOutTime
00148 0203 02E3 		SUBWF	CalcdDwell,F
00149 0204 0012 		MOVIW	FSR0++	;SigOutTime+1
00150 0205 3BE4 		SUBWFB	CalcdDwellH,F
00151 0206 	; Store calc'd dwell for later
00152 0206 3561 		LSLF	ServoIDX,W	;FSR0 = DwellTime0_7 + ServoIDX * 2
00153 0207 		LOADFSR0W	DwellTime
00153 0207 3EB0      M		addlw	low DwellTime		addlw 	low ADDRESS
00153 0208 0084      M		movwf	FSR0L		movwf 	FSR0L
00153 0209 0185      M		clrf	FSR0H		clrf	FSR0H
00153 020A 3021      M		movlw	high DwellTime		movlw	high ADDRESS
00153 020B 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00154 020C 0863 		MOVF	CalcdDwell,W
00155 020D 001A 		MOVWI	FSR0++
00156 020E 0864 		MOVF	CalcdDwellH,W
SimpleServo16PS.asm                                                   Page: 20
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00157 020F 001A 		MOVWI	FSR0++
00158 0210 	;Set Value Sent Flag
00159 0210 1401 		BSF	INDF1,ValueSentFlag0_7
00160 0211 1562 		BSF	ServoCtlFlags,CyclePulseEnd1
00161 0212 0020 		MOVLB	0	; bank 0
00162 0213 1111 		BCF	PIR1,CCP1IF
00163 0214 2A5B 		GOTO	IRQ_Servo2_PulseOrDwell
00164 0215 	;
00165 0215 	;This servo was not active, see if the next one is active
00166 0215 3094 	IRQ_Servo1_InAct	MOVLW	LOW kServoDwellTimeA
00167 0216 0791 		ADDWF	CCPR1L,F
00168 0217 3011 		MOVLW	HIGH kServoDwellTimeA
00169 0218 3D92 		ADDWFC	CCPR1H,F
00170 0219 1662 		BSF	ServoCtlFlags,AddrChngDwell
00171 021A 300A 		MOVLW	CCPCON_Int	; No, Interrupt only
00172 021B 0093 		MOVWF	CCP1CON
00173 021C 	;	
00174 021C 0020 		MOVLB	0	; bank 0
00175 021D 1111 		BCF	PIR1,CCP1IF
00176 021E 2A5B 		GOTO	IRQ_Servo2_PulseOrDwell
00177 021F 	;
00178 021F 	; output went low so this cycle is done, set dwell time
00179 021F 3561 	IRQ_Servo1_OL	LSLF	ServoIDX,W	; FSR0 = DwellTime0_7 + ServoIDX * 2
00180 0220 		LOADFSR0W	DwellTime
00180 0220 3EB0      M		addlw	low DwellTime		addlw 	low ADDRESS
00180 0221 0084      M		movwf	FSR0L		movwf 	FSR0L
00180 0222 0185      M		clrf	FSR0H		clrf	FSR0H
00180 0223 3021      M		movlw	high DwellTime		movlw	high ADDRESS
00180 0224 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00181 0225 	;  Copy dwell to ccpr
00182 0225 0012 		MOVIW	FSR0++
00183 0226 0791 		ADDWF	CCPR1L,F
00184 0227 0012 		MOVIW	FSR0++
00185 0228 3D92 		ADDWFC	CCPR1H,F
00186 0229 	;
00187 0229 1162 		BCF	ServoCtlFlags,CyclePulseEnd1
00188 022A 1662 		BSF	ServoCtlFlags,AddrChngDwell
00189 022B 2A52 		GOTO	IRQ_Servo1_IntOnly
00190 022C 	;
00191 022C 	; Next servo, If next servo is active set CCP to go high else interrupt only.
00192 022C 1262 	IRQ_Servo_Next	BCF	ServoCtlFlags,AddrChngDwell
00193 022D 1462 		BSF	ServoCtlFlags,CyclePulseStart
00194 022E 30F4 		MOVLW	LOW kServoAddrTime
00195 022F 0711 		ADDWF	CCPR1L,W
00196 0230 0091 		MOVWF	CCPR1L
00197 0231 0098 		MOVWF	CCPR2L
00198 0232 3001 		MOVLW	HIGH kServoAddrTime
00199 0233 3D12 		ADDWFC	CCPR1H,W
00200 0234 0092 		MOVWF	CCPR1H
00201 0235 0099 		MOVWF	CCPR2H
00202 0236 	; Next servo index
00203 0236 0A61 		INCF	ServoIDX,W
00204 0237 3907 		ANDLW	0x07
00205 0238 00E1 		MOVWF	ServoIDX
00206 0239 		LOADFSR1W	ServoFlags
00206 0239 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00206 023A 0086      M		movwf	FSR1L		movwf 	FSR1L
00206 023B 0187      M		clrf	FSR1H		clrf	FSR1H
00206 023C 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00206 023D 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00207 023E 	; Change Address
00208 023E 0022 		MOVLB	0x02	;bank 2
00209 023F 080C 		MOVF	LATA,W
00210 0240 39F8 		ANDLW	b'11111000'
00211 0241 0025 		MOVLB	0x05	;bank 5
00212 0242 0461 		IORWF	ServoIDX,W
00213 0243 0022 		MOVLB	0x02	;bank 2
00214 0244 008C 		MOVWF	LATA
00215 0245 0025 		MOVLB	0x05	;bank 5
00216 0246 	;
00217 0246 3008 		MOVLW	CCPCON_Set	;Clr CCP1 to go high on next match
00218 0247 1D01 		BTFSS	INDF1,ServoOnBit0_7	;Is the next servo active?
00219 0248 300A 		MOVLW	CCPCON_Int	; No, Interrupt only
00220 0249 0093 		MOVWF	CCP1CON
00221 024A 	;
00222 024A 3008 		MOVLW	CCPCON_Set
00223 024B 1F01 		BTFSS	INDF1,ServoOnBit8_15	;Is the next servo active?
00224 024C 300A 		MOVLW	CCPCON_Int	; No, Interrupt only
00225 024D 009A 		MOVWF	CCP2CON
00226 024E 	;	
00227 024E 0020 		MOVLB	0	; bank 0
00228 024F 1111 		BCF	PIR1,CCP1IF
00229 0250 1012 		BCF	PIR2,CCP2IF
00230 0251 0008 		RETURN
00231 0252 	;
00232 0252 300A 	IRQ_Servo1_IntOnly	MOVLW	CCPCON_Int	; No, Interrupt only
00233 0253 0093 		MOVWF	CCP1CON
00234 0254 	;	
00235 0254 0020 	IRQ_Servo1_X	MOVLB	0	; bank 0
00236 0255 1111 		BCF	PIR1,CCP1IF
00237 0256 0008 		RETURN
00238 0257 	;
00239 0257 	;===========================================
00240 0257 	; Interupt Service Routine for CCP2
00241 0257 	; Servos 8..15
00242 0257 	;
00243 0257 0025 	ISR_ServoCCP2	MOVLB	0x05	; bank 5
00244 0258 	;
00245 0258 19E2 		BTFSC	ServoCtlFlags,CyclePulseEnd2	;Is the current pulse ending?
SimpleServo16PS.asm                                                   Page: 21
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00246 0259 2A8C 		GOTO	IRQ_Servo2_OL
00247 025A 	;
00248 025A 2A9A 		GOTO	IRQ_Servo2_X	;tc
00249 025B 	; if not set to do anything fall thru and start a cycle
00250 025B 	IRQ_Servo2_PulseOrDwell:
00251 025B 	; FSR1 = ServoFlags+ServoIDX
00252 025B 0025 		MOVLB	0x05	; bank 5
00253 025C 0861 		MOVF	ServoIDX,W
00254 025D 		LOADFSR1W	ServoFlags
00254 025D 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00254 025E 0086      M		movwf	FSR1L		movwf 	FSR1L
00254 025F 0187      M		clrf	FSR1H		clrf	FSR1H
00254 0260 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00254 0261 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00255 0262 	;
00256 0262 1F01 		BTFSS	INDF1,ServoOnBit8_15	;Is this servo active?
00257 0263 2A87 		GOTO	IRQ_Servo2_InAct	; No
00258 0264 	; FSR0 = SigOutTime8_15 + ServoIDX * 2		
00259 0264 3561 		LSLF	ServoIDX,W
00260 0265 3E10 		ADDLW	0x10
00261 0266 		LOADFSR0W	SigOutTime
00261 0266 3E90      M		addlw	low SigOutTime		addlw 	low ADDRESS
00261 0267 0084      M		movwf	FSR0L		movwf 	FSR0L
00261 0268 0185      M		clrf	FSR0H		clrf	FSR0H
00261 0269 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00261 026A 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00262 026B 	; Set time to end pulse
00263 026B 0012 		MOVIW	FSR0++	;Put the pulse into the CCP reg.
00264 026C 0798 		ADDWF	CCPR2L,F
00265 026D 0013 		MOVIW	FSR0--
00266 026E 3D99 		ADDWFC	CCPR2H,F
00267 026F 3009 		MOVLW	CCPCON_Clr	;Clear output on match
00268 0270 009A 		MOVWF	CCP2CON	;CCP1 clr on match
00269 0271 	;Calculate dwell time
00270 0271 3094 		MOVLW	LOW kServoDwellTimeA
00271 0272 00E3 		MOVWF	CalcdDwell
00272 0273 3011 		MOVLW	HIGH kServoDwellTimeA
00273 0274 00E4 		MOVWF	CalcdDwellH
00274 0275 0012 		MOVIW	FSR0++	;SigOutTime8_15
00275 0276 02E3 		SUBWF	CalcdDwell,F
00276 0277 0012 		MOVIW	FSR0++	;SigOutTime8_15+1
00277 0278 3BE4 		SUBWFB	CalcdDwellH,F
00278 0279 	; Store calc'd dwell for later
00279 0279 3561 		LSLF	ServoIDX,W
00280 027A 3E10 		ADDLW	0x10
00281 027B 		LOADFSR0W	DwellTime	;FSR0 = DwellTime + ServoIDX * 2 + 0x10
00281 027B 3EB0      M		addlw	low DwellTime		addlw 	low ADDRESS
00281 027C 0084      M		movwf	FSR0L		movwf 	FSR0L
00281 027D 0185      M		clrf	FSR0H		clrf	FSR0H
00281 027E 3021      M		movlw	high DwellTime		movlw	high ADDRESS
00281 027F 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00282 0280 	;
00283 0280 0863 		MOVF	CalcdDwell,W
00284 0281 001A 		MOVWI	FSR0++
00285 0282 0864 		MOVF	CalcdDwellH,W
00286 0283 001A 		MOVWI	FSR0++
00287 0284 	;Set Value Sent Flag
00288 0284 1601 		BSF	INDF1,ValueSentFlag8_15
00289 0285 15E2 		BSF	ServoCtlFlags,CyclePulseEnd2
00290 0286 2A9A 		GOTO	IRQ_Servo2_X
00291 0287 	;
00292 0287 	;This servo was not active, see if the next one is active
00293 0287 3094 	IRQ_Servo2_InAct	MOVLW	LOW kServoDwellTimeA
00294 0288 0798 		ADDWF	CCPR2L,F
00295 0289 3011 		MOVLW	HIGH kServoDwellTimeA
00296 028A 3D99 		ADDWFC	CCPR2H,F
00297 028B 2A98 		GOTO	IRQ_Servo2_IntOnly
00298 028C 	;
00299 028C 	; output went low so this cycle is done, set dwell time
00300 028C 3561 	IRQ_Servo2_OL	LSLF	ServoIDX,W
00301 028D 3E10 		ADDLW	0x10
00302 028E 		LOADFSR0W	DwellTime	;FSR0 = DwellTime + ServoIDX * 2 + 0x10
00302 028E 3EB0      M		addlw	low DwellTime		addlw 	low ADDRESS
00302 028F 0084      M		movwf	FSR0L		movwf 	FSR0L
00302 0290 0185      M		clrf	FSR0H		clrf	FSR0H
00302 0291 3021      M		movlw	high DwellTime		movlw	high ADDRESS
00302 0292 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00303 0293 	;
00304 0293 	; Copy dwell to ccpr
00305 0293 0012 		MOVIW	FSR0++
00306 0294 0798 		ADDWF	CCPR2L,F
00307 0295 0012 		MOVIW	FSR0++
00308 0296 3D99 		ADDWFC	CCPR2H,F
00309 0297 	;
00310 0297 11E2 		BCF	ServoCtlFlags,CyclePulseEnd2
00311 0298 	;
00312 0298 300A 	IRQ_Servo2_IntOnly	MOVLW	CCPCON_Int	; No, Interrupt only
00313 0299 009A 		MOVWF	CCP2CON
00314 029A 	;
00315 029A 0020 	IRQ_Servo2_X	MOVLB	0	; bank 0
00316 029B 1012 		BCF	PIR2,CCP2IF
00317 029C 0008 	IRQ_Servo2_End	RETURN
00318 029D 	;=========================================================================================
00319 029D 	;=========================================================================================
00320 029D 	; Servo motion control
00321 029D 	; Call from main loop
00322 029D 	;
00323 029D 0025 	IdleServos	MOVLB	0x05	; bank 5
00324 029E 1865 		BTFSC	SequencerFlags,SeqActive
SimpleServo16PS.asm                                                   Page: 22
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00325 029F 2446 		call	DoSequenceCmd
00326 02A0 	;
00327 02A0 2371 		CALL	SetFSR0ToServoFlags
00328 02A1 19E0 		BTFSC	CMDServoIDX,3
00329 02A2 2AA8 		GOTO	IdleServos8_15
00330 02A3 	;
00331 02A3 1D00 		BTFSS	INDF0,ServoOnBit0_7	;Is this servo active?
00332 02A4 2B19 		GOTO	IdleServos_Next	; No
00333 02A5 1C00 		BTFSS	INDF0,ValueSentFlag0_7	;Ready for an update?
00334 02A6 2B19 		GOTO	IdleServos_Next	; No
00335 02A7 2AAC 		GOTO	IdleServos_Update
00336 02A8 	;
00337 02A8 1F00 	IdleServos8_15	BTFSS	INDF0,ServoOnBit8_15	;Is this servo active?
00338 02A9 2B19 		GOTO	IdleServos_Next	; No
00339 02AA 1E00 		BTFSS	INDF0,ValueSentFlag8_15	;Ready for an update?
00340 02AB 2B19 		GOTO	IdleServos_Next	; No
00341 02AC 	;
00342 02AC 1DE0 	IdleServos_Update	BTFSS	CMDServoIDX,3
00343 02AD 1000 		BCF	INDF0,ValueSentFlag0_7	;Mark as updated
00344 02AE 19E0 		BTFSC	CMDServoIDX,3
00345 02AF 1200 		BCF	INDF0,ValueSentFlag8_15	;Mark as updated
00346 02B0 	;
00347 02B0 	;FSR0 = Command Position
00348 02B0 3560 		LSLF	CMDServoIDX,W
00349 02B1 		LOADFSR0W	CMDSigTime
00349 02B1 3E20      M		addlw	low CMDSigTime		addlw 	low ADDRESS
00349 02B2 0084      M		movwf	FSR0L		movwf 	FSR0L
00349 02B3 0185      M		clrf	FSR0H		clrf	FSR0H
00349 02B4 3021      M		movlw	high CMDSigTime		movlw	high ADDRESS
00349 02B5 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00350 02B6 	;FSR1 = Current Position
00351 02B6 3560 		LSLF	CMDServoIDX,W
00352 02B7 		LOADFSR1W	SigOutTime
00352 02B7 3E90      M		addlw	low SigOutTime		addlw 	low ADDRESS
00352 02B8 0086      M		movwf	FSR1L		movwf 	FSR1L
00352 02B9 0187      M		clrf	FSR1H		clrf	FSR1H
00352 02BA 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00352 02BB 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00353 02BC 	; Param7D:Param7C = (FSR0)-(FSR1) Cmd-Cur
00354 02BC 0801 		MOVF	INDF1,W	;Cur, SigOutTime
00355 02BD 0200 		SUBWF	INDF0,W	;Cmd
00356 02BE 00FC 		MOVWF	Param7C
00357 02BF 0A84 		INCF	FSR0L,F
00358 02C0 0A86 		INCF	FSR1L,F
00359 02C1 0801 		MOVF	INDF1,W	;SigOutTimeH
00360 02C2 3B00 		SUBWFB	INDF0,W
00361 02C3 00FD 		MOVWF	Param7D
00362 02C4 0386 		DECF	FSR1L,F	;FSR1=SigOutTime+Servo#x2
00363 02C5 	;(FSR0)=ServoFlags
00364 02C5 	; if Param7D:Param7C = 0 then we are In Position
00365 02C5 087C 		MOVF	Param7C,W
00366 02C6 047D 		IORWF	Param7D,W
00367 02C7 		SKPNZ		;Command = Current?
00367 02C7 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00368 02C8 2B14 		GOTO	IdleServos_InPos	; Yes, we are in-position
00369 02C9 	;
00370 02C9 231D 		CALL	IdleServos_Accel
00371 02CA 	; Clear the In-Position bit
00372 02CA 2371 		CALL	SetFSR0ToServoFlags
00373 02CB 1DE0 		BTFSS	CMDServoIDX,3
00374 02CC 1080 		BCF	INDF0,InPositionFlag0_7
00375 02CD 19E0 		BTFSC	CMDServoIDX,3
00376 02CE 1280 		BCF	INDF0,InPositionFlag8_15
00377 02CF 	;
00378 02CF 1FFD 		BTFSS	Param7D,7	;Cmd<Cur? Set if Cur>Cmd
00379 02D0 2AFA 		GOTO	IdleServos_MovPlus	; Yes
00380 02D1 	;Move minus
00381 02D1 1DE0 		BTFSS	CMDServoIDX,3
00382 02D2 1180 		BCF	INDF0,MovingFWD0_7
00383 02D3 19E0 		BTFSC	CMDServoIDX,3
00384 02D4 1380 		BCF	INDF0,MovingFWD8_15
00385 02D5 	; Get Speed
00386 02D5 2351 		CALL	GetSpeed
00387 02D6 00F8 		MOVWF	Param78
00388 02D7 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
00389 02D8 2AE2 		GOTO	IdleServos_Minus	; No
00390 02D9 0878 	IdleServos_L1	MOVF	Param78,W
00391 02DA 077C 		ADDWF	Param7C,W
00392 02DB 1C03 		BTFSS	_C	;Dist<Param78?
00393 02DC 2AE2 		GOTO	IdleServos_Minus	; No
00394 02DD 0B78 		DECFSZ	Param78,W	;Speed>1?
00395 02DE 2AE0 		GOTO	IdleServos_DecAcc	; Yes
00396 02DF 2AE2 		GOTO	IdleServos_Minus
00397 02E0 03F8 	IdleServos_DecAcc	DECF	Param78,F
00398 02E1 2AD9 		GOTO	IdleServos_L1	
00399 02E2 	;
00400 02E2 	; Subtract speed from current position
00401 02E2 0878 	IdleServos_Minus	MOVF	Param78,W
00402 02E3 0201 		SUBWF	INDF1,W	;SigOutTime
00403 02E4 00FC 		MOVWF	Param7C
00404 02E5 0A86 		INCF	FSR1L,F
00405 02E6 3000 		MOVLW	0x00
00406 02E7 3B01 		SUBWFB	INDF1,W	;SigOutTimeH
00407 02E8 00FD 		MOVWF	Param7D
00408 02E9 	;
00409 02E9 	;FSR1 = SigOutTime0_7+1 + Servo# x 2
00410 02E9 3560 	IdleServos_Clamp	LSLF	CMDServoIDX,W	
00411 02EA 	;	CALL	ClampMinMax
00412 02EA 	;
SimpleServo16PS.asm                                                   Page: 23
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00413 02EA 138B 	IdleServos_DisInt	bcf	INTCON,GIE
00414 02EB 1B8B 		BTFSC	INTCON,GIE
00415 02EC 2AEA 		GOTO	IdleServos_DisInt
00416 02ED 	;
00417 02ED 	;FSR1 = Current Position
00418 02ED 0025 		MOVLB	0x05	;bank5
00419 02EE 3560 		LSLF	CMDServoIDX,W
00420 02EF 		LOADFSR1W	SigOutTime
00420 02EF 3E90      M		addlw	low SigOutTime		addlw 	low ADDRESS
00420 02F0 0086      M		movwf	FSR1L		movwf 	FSR1L
00420 02F1 0187      M		clrf	FSR1H		clrf	FSR1H
00420 02F2 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00420 02F3 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00421 02F4 	;
00422 02F4 087C 		MOVF	Param7C,W	;SigOutTime
00423 02F5 001E 		MOVWI	FSR1++
00424 02F6 087D 		MOVF	Param7D,W
00425 02F7 001E 		MOVWI	FSR1++
00426 02F8 	;
00427 02F8 178B 		bsf	INTCON,GIE
00428 02F9 	;
00429 02F9 2B19 		GOTO	IdleServos_Next
00430 02FA 	;
00431 02FA 	;=============================
00432 02FA 	; 7D:7C = distance to go
00433 02FA 	; FSR1=SigOutTime0_7 + Servo#x2
00434 02FA 	; FSR0=ServoFlags + Servo# & 0x07
00435 02FA 	;
00436 02FA 1DE0 	IdleServos_MovPlus	BTFSS	CMDServoIDX,3
00437 02FB 1580 		BSF	INDF0,MovingFWD0_7
00438 02FC 19E0 		BTFSC	CMDServoIDX,3
00439 02FD 1780 		BSF	INDF0,MovingFWD8_15
00440 02FE 	; Get Speed
00441 02FE 2351 		CALL	GetSpeed
00442 02FF 00F8 		MOVWF	Param78
00443 0300 08FD 		MOVF	Param7D,F
00444 0301 		SKPZ		;>255 to go?
00444 0301 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00445 0302 2B0C 		GOTO	IdleServos_Plus	; Yes
00446 0303 0878 	IdleServos_L2	MOVF	Param78,W
00447 0304 027C 		SUBWF	Param7C,W	;Dist-Speed
00448 0305 		SKPB		;Speed>Dist?
00448 0305 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00449 0306 2B0C 		GOTO	IdleServos_Plus	; No
00450 0307 0B78 		DECFSZ	Param78,W
00451 0308 2B0A 		GOTO	IdleServos_IncAcc
00452 0309 2B0C 		GOTO	IdleServos_Plus
00453 030A 03F8 	IdleServos_IncAcc	DECF	Param78,F
00454 030B 2B03 		GOTO	IdleServos_L2	
00455 030C 	;
00456 030C 0878 	IdleServos_Plus	MOVF	Param78,W	;7D:7C = CurPos + Speed
00457 030D 0701 		ADDWF	INDF1,W	;SigOutTime
00458 030E 00FC 		MOVWF	Param7C
00459 030F 0A86 		INCF	FSR1L,F
00460 0310 0103 		CLRW
00461 0311 3D01 		ADDWFC	INDF1,W	;SigOutTimeH
00462 0312 00FD 		MOVWF	Param7D
00463 0313 2AE9 		GOTO	IdleServos_Clamp
00464 0314 	;
00465 0314 	;========================================
00466 0314 	;
00467 0314 2371 	IdleServos_InPos	CALL	SetFSR0ToServoFlags
00468 0315 1DE0 		BTFSS	CMDServoIDX,3
00469 0316 1480 		BSF	INDF0,InPositionFlag0_7
00470 0317 19E0 		BTFSC	CMDServoIDX,3
00471 0318 1680 		BSF	INDF0,InPositionFlag8_15
00472 0319 	;	
00473 0319 0A60 	IdleServos_Next	INCF	CMDServoIDX,W
00474 031A 390F 		ANDLW	0x0F
00475 031B 00E0 		MOVWF	CMDServoIDX
00476 031C 0008 		RETURN
00477 031D 	;
00478 031D 	;=========================================================================================
00479 031D 	;Do Accel
00480 031D 	;
00481 031D 	; Entry: Bank 5, CMDServoIDX
00482 031D 	; Exit:
00483 031D 	; Ram Used: Param78, Param79, FSR0
00484 031D 	;
00485 031D 2369 	IdleServos_Accel	CALL	SetFSR0ToServoFlags2
00486 031E 19E0 		BTFSC	CMDServoIDX,3
00487 031F 2B23 		GOTO	IdleServos_Accel_1
00488 0320 	;
00489 0320 1800 		BTFSC	INDF0,AccelComplete0_7	;Done with accel?
00490 0321 0008 		RETURN		; Yes
00491 0322 2B25 		GOTO	IdleServos_Accel_2
00492 0323 	;
00493 0323 1A00 	IdleServos_Accel_1	BTFSC	INDF0,AccelComplete8_15	;Done with accel?
00494 0324 0008 		RETURN		; Yes
00495 0325 	;
00496 0325 2351 	IdleServos_Accel_2	CALL	GetSpeed
00497 0326 00F8 		MOVWF	Param78	;Save Cur Speed in 78
00498 0327 2359 		CALL	GetMaxSpeed
00499 0328 00F9 		MOVWF	Param79	;Save Max Speed in 79
00500 0329 0278 		SUBWF	Param78,W	;W=CurSpd-MaxSpd
00501 032A 1903 		BTFSC	_Z	;Max=CurSpd?
00502 032B 2B42 		GOTO	AccelDone	; Yes
00503 032C 		SKPB		;Max>CurSpd?
00503 032C 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
SimpleServo16PS.asm                                                   Page: 24
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00504 032D 2B42 		GOTO	AccelDone	; No
00505 032E 2361 		CALL	GetAccelValue
00506 032F 07F8 		ADDWF	Param78,F	;CurSpd=CurSpd+Accel
00507 0330 0878 		MOVF	Param78,W	;new CurSpd
00508 0331 0279 		SUBWF	Param79,W	;Max-new Cur
00509 0332 0878 		MOVF	Param78,W	;new Cur
00510 0333 		SKPB		;new Cur>Max?
00510 0333 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00511 0334 0879 		MOVF	Param79,W	; Yes, use max instead
00512 0335 00F8 		MOVWF	Param78	;New Speed
00513 0336 	;FSR0 = CMDServoIDX*2 + AccelRampLen
00514 0336 3560 		LSLF	CMDServoIDX,W	
00515 0337 		LOADFSR0W	AccelRampLen
00515 0337 3EE0      M		addlw	low AccelRampLen		addlw 	low ADDRESS
00515 0338 0084      M		movwf	FSR0L		movwf 	FSR0L
00515 0339 0185      M		clrf	FSR0H		clrf	FSR0H
00515 033A 3021      M		movlw	high AccelRampLen		movlw	high ADDRESS
00515 033B 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00516 033C 0878 		MOVF	Param78,W
00517 033D 0780 		ADDWF	INDF0,F
00518 033E 3101 		addfsr	FSR0,1
00519 033F 0103 		CLRW
00520 0340 3D80 		ADDWFC	INDF0,F
00521 0341 2B48 		GOTO	SaveSpeed
00522 0342 	;
00523 0342 	;========================================
00524 0342 	; Set AccelComplete flag for servo (CMDServoIDX)
00525 0342 	;
00526 0342 	; Entry: Bank 5
00527 0342 	; Exit: FSR0 >> ServoFlags2
00528 0342 	;
00529 0342 2369 	AccelDone	CALL	SetFSR0ToServoFlags2
00530 0343 1DE0 		BTFSS	CMDServoIDX,3
00531 0344 1400 		BSF	INDF0,AccelComplete0_7
00532 0345 19E0 		BTFSC	CMDServoIDX,3
00533 0346 1600 		BSF	INDF0,AccelComplete8_15
00534 0347 0008 		RETURN
00535 0348 	;
00536 0348 	;==========================================
00537 0348 	; Save speed Param78 to ServoCurSpeed for servo (CMDServoIDX)
00538 0348 	;
00539 0348 	; Entry: Bank 5, Param78 = Speed
00540 0348 	; Exit: FSR0 >> ServoCurSpeed
00541 0348 	;
00542 0348 0860 	SaveSpeed	MOVF	CMDServoIDX,W
00543 0349 		LOADFSR0W	ServoCurSpeed
00543 0349 3E10      M		addlw	low ServoCurSpeed		addlw 	low ADDRESS
00543 034A 0084      M		movwf	FSR0L		movwf 	FSR0L
00543 034B 0185      M		clrf	FSR0H		clrf	FSR0H
00543 034C 3021      M		movlw	high ServoCurSpeed		movlw	high ADDRESS
00543 034D 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00544 034E 0878 		MOVF	Param78,W
00545 034F 0080 		MOVWF	INDF0
00546 0350 0008 		RETURN
00547 0351 	;
00548 0351 	;==========================================
00549 0351 	; Get ServoCurSpeed for servo (CMDServoIDX)
00550 0351 	;
00551 0351 	; Entry: Bank 5
00552 0351 	; Exit: FSR0 >> ServoCurSpeed, W=ServoCurSpeed
00553 0351 	;
00554 0351 0860 	GetSpeed	MOVF	CMDServoIDX,W
00555 0352 		LOADFSR0W	ServoCurSpeed
00555 0352 3E10      M		addlw	low ServoCurSpeed		addlw 	low ADDRESS
00555 0353 0084      M		movwf	FSR0L		movwf 	FSR0L
00555 0354 0185      M		clrf	FSR0H		clrf	FSR0H
00555 0355 3021      M		movlw	high ServoCurSpeed		movlw	high ADDRESS
00555 0356 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00556 0357 0800 		MOVF	INDF0,W
00557 0358 0008 		RETURN
00558 0359 	;
00559 0359 	;==========================================
00560 0359 	; Get ServoMaxSpeed for servo (CMDServoIDX)
00561 0359 	;
00562 0359 	; Entry: Bank 5
00563 0359 	; Exit: FSR0 >> ServoMaxSpeed, W=ServoMaxSpeed
00564 0359 	;
00565 0359 0860 	GetMaxSpeed	MOVF	CMDServoIDX,W
00566 035A 		LOADFSR0W	ServoMaxSpeed
00566 035A 3EF0      M		addlw	low ServoMaxSpeed		addlw 	low ADDRESS
00566 035B 0084      M		movwf	FSR0L		movwf 	FSR0L
00566 035C 0185      M		clrf	FSR0H		clrf	FSR0H
00566 035D 3020      M		movlw	high ServoMaxSpeed		movlw	high ADDRESS
00566 035E 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00567 035F 0800 		MOVF	INDF0,W
00568 0360 0008 		RETURN
00569 0361 	;
00570 0361 	;==========================================
00571 0361 	; Get ServoAccelValue for servo (CMDServoIDX)
00572 0361 	;
00573 0361 	; Entry: Bank 5
00574 0361 	; Exit: FSR0 >> ServoAccelValue, W=ServoAccelValue
00575 0361 	;
00576 0361 0860 	GetAccelValue	MOVF	CMDServoIDX,W
00577 0362 		LOADFSR0W	ServoAccelValue
00577 0362 3E00      M		addlw	low ServoAccelValue		addlw 	low ADDRESS
00577 0363 0084      M		movwf	FSR0L		movwf 	FSR0L
00577 0364 0185      M		clrf	FSR0H		clrf	FSR0H
00577 0365 3021      M		movlw	high ServoAccelValue		movlw	high ADDRESS
SimpleServo16PS.asm                                                   Page: 25
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00577 0366 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00578 0367 0800 		MOVF	INDF0,W
00579 0368 0008 		RETURN
00580 0369 	;
00581 0369 	;=========================================================================================
00582 0369 	; Point FRS0 at ServoFlags2
00583 0369 	;
00584 0369 	; Entry: Bank 5
00585 0369 	; Exit: FSR0 >> ServoFlags2
00586 0369 	;
00587 0369 0860 	SetFSR0ToServoFlags2	MOVF	CMDServoIDX,W
00588 036A 3907 		ANDLW	0x07
00589 036B 		LOADFSR0W	ServoFlags2
00589 036B 3E88      M		addlw	low ServoFlags2		addlw 	low ADDRESS
00589 036C 0084      M		movwf	FSR0L		movwf 	FSR0L
00589 036D 0185      M		clrf	FSR0H		clrf	FSR0H
00589 036E 3021      M		movlw	high ServoFlags2		movlw	high ADDRESS
00589 036F 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00590 0370 0008 		RETURN
00591 0371 	;
00592 0371 	;=========================================================================================
00593 0371 	; Point FRS0 at ServoFlags
00594 0371 	;
00595 0371 	; Entry: Bank 5
00596 0371 	; Exit: FSR0 >> ServoFlags
00597 0371 	;
00598 0371 	;
00599 0371 0860 	SetFSR0ToServoFlags	MOVF	CMDServoIDX,W
00600 0372 3907 		ANDLW	0x07
00601 0373 		LOADFSR0W	ServoFlags
00601 0373 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00601 0374 0084      M		movwf	FSR0L		movwf 	FSR0L
00601 0375 0185      M		clrf	FSR0H		clrf	FSR0H
00601 0376 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00601 0377 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00602 0378 0008 		RETURN
00603 0379 	;
00604 0379 	;=========================================================================================
00605 0379 	; Set CCP1/2 to cause an interrupt the next time T1 matches CCPRn
00606 0379 	; Call Once to activate servos
00607 0379 	;
00608 0379 0022 	StartServos	MOVLB	0x02	;Bank 2, LATA
00609 037A 118C 		BCF	Enable0_7	; Active Low Output
00610 037B 120C 		BCF	Enable8_15
00611 037C 0025 		MOVLB	0x05
00612 037D 0191 		CLRF	CCPR1L
00613 037E 0192 		CLRF	CCPR1H
00614 037F 0198 		CLRF	CCPR2L
00615 0380 0199 		CLRF	CCPR2H
00616 0381 300A 		MOVLW	CCPCON_Int	;interrupt on match
00617 0382 0093 		MOVWF	CCP1CON
00618 0383 009A 		MOVWF	CCP2CON
00619 0384 1462 		BSF	ServoCtlFlags,CyclePulseStart
00620 0385 0021 		MOVLB	0x01	;Bank 1
00621 0386 1511 		BSF	PIE1,CCP1IE
00622 0387 1412 		BSF	PIE2,CCP2IE
00623 0388 0020 		MOVLB	0x00	;Bank 0
00624 0389 0008 		RETURN
00625 038A 	;
00626 038A 	;=========================================================================================
00627 038A 	; Setup all data to usable values
00628 038A 	; Call once before mainloop begins
00629 038A 	;
00630 038A 	; RAM Used:Param78, Param79, Param7A, FSR0
00631 038A 	;
00632 038A 	;
00633 038A 0103 	ServoInit16	CLRW
00634 038B 		LOADFSR0W	ServoMaxSpeed
00634 038B 3EF0      M		addlw	low ServoMaxSpeed		addlw 	low ADDRESS
00634 038C 0084      M		movwf	FSR0L		movwf 	FSR0L
00634 038D 0185      M		clrf	FSR0H		clrf	FSR0H
00634 038E 3020      M		movlw	high ServoMaxSpeed		movlw	high ADDRESS
00634 038F 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00635 0390 	;ServoMaxSpeed 0..15, ServoMaxSpeed
00636 0390 3030 		MOVLW	DefaultMaxSpeed
00637 0391 23C2 		CALL	Store16Times
00638 0392 	;ServoAccelValue 0..15, ServoAccelValue
00639 0392 3001 		MOVLW	DefaultAccel
00640 0393 23C2 		CALL	Store16Times
00641 0394 	;ServoCurSpeed 0..15, ServoCurSpeed
00642 0394 3001 		MOVLW	0x01
00643 0395 23C2 		CALL	Store16Times	;CurSpeed=min
00644 0396 	;
00645 0396 	; Set Command position to center, CMDSigTime
00646 0396 30B8 		MOVLW	LOW kCenterPulseWidth
00647 0397 00F8 		MOVWF	Param78
00648 0398 300B 		MOVLW	HIGH kCenterPulseWidth
00649 0399 00F9 		MOVWF	Param79
00650 039A 23B9 		CALL	StoreWord16Times
00651 039B 	;
00652 039B 	; Set minimum time, MinTime
00653 039B 3008 		MOVLW	LOW kMinPulseWidth
00654 039C 00F8 		MOVWF	Param78
00655 039D 3007 		MOVLW	HIGH kMinPulseWidth
00656 039E 00F9 		MOVWF	Param79
00657 039F 23B9 		CALL	StoreWord16Times
00658 03A0 	;
00659 03A0 	;MaxTime 0..15
00660 03A0 3068 		MOVLW	LOW kMaxPulseWidth
SimpleServo16PS.asm                                                   Page: 26
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00661 03A1 00F8 		MOVWF	Param78
00662 03A2 3010 		MOVLW	HIGH kMaxPulseWidth
00663 03A3 00F9 		MOVWF	Param79
00664 03A4 23B9 		CALL	StoreWord16Times
00665 03A5 	; Set ServoFlags
00666 03A5 	;
00667 03A5 3022 		MOVLW	DefaultSFlags
00668 03A6 23CA 		CALL	Store8Times
00669 03A7 	;
00670 03A7 	; Set current position to center 
00671 03A7 0103 		CLRW
00672 03A8 		LOADFSR0W	SigOutTime
00672 03A8 3E90      M		addlw	low SigOutTime		addlw 	low ADDRESS
00672 03A9 0084      M		movwf	FSR0L		movwf 	FSR0L
00672 03AA 0185      M		clrf	FSR0H		clrf	FSR0H
00672 03AB 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00672 03AC 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00673 03AD 	; SigOutTime 0..15
00674 03AD 30B8 		MOVLW	LOW kCenterPulseWidth
00675 03AE 00F8 		MOVWF	Param78
00676 03AF 300B 		MOVLW	HIGH kCenterPulseWidth
00677 03B0 00F9 		MOVWF	Param79
00678 03B1 23B9 		CALL	StoreWord16Times
00679 03B2 	; DwellTime 0..15
00680 03B2 3088 		MOVLW	LOW kServoDwellTime
00681 03B3 00F8 		MOVWF	Param78
00682 03B4 3013 		MOVLW	HIGH kServoDwellTime
00683 03B5 00F9 		MOVWF	Param79
00684 03B6 23B9 		call	StoreWord16Times
00685 03B7 23CD 		call	EEPromToServoParams
00686 03B8 322A 		bra	EEPromToSequencer
00687 03B9 	;
00688 03B9 3010 	StoreWord16Times	MOVLW	.16
00689 03BA 00FA 		MOVWF	Param7A
00690 03BB 0878 	StoreWord16Times_L1	MOVF	Param78,W
00691 03BC 001A 		MOVWI	FSR0++
00692 03BD 0879 		MOVF	Param79,W
00693 03BE 001A 		MOVWI	FSR0++
00694 03BF 0BFA 		DECFSZ	Param7A,F
00695 03C0 2BBB 		GOTO	StoreWord16Times_L1
00696 03C1 0008 		RETURN
00697 03C2 	;
00698 03C2 00F8 	Store16Times	MOVWF	Param78
00699 03C3 3010 		MOVLW	.16
00700 03C4 00F9 	StoreXTimes	MOVWF	Param79
00701 03C5 0878 		MOVF	Param78,W
00702 03C6 001A 	StoreXTimes_L1	MOVWI	FSR0++
00703 03C7 0BF9 		DECFSZ	Param79,F
00704 03C8 2BC6 		GOTO	StoreXTimes_L1
00705 03C9 0008 		RETURN
00706 03CA 	;
00707 03CA 00F8 	Store8Times	MOVWF	Param78
00708 03CB 3008 		MOVLW	.8
00709 03CC 2BC4 		GOTO	StoreXTimes
00710 03CD 	;
00711 03CD 	;===========================================================================
00712 03CD 	; copy eeprom to ram
00713 03CD 	;
00714 03CD 	;	nvServoMaxSpeed:10		;0=no Accel, 1..255 counts/20mS
00715 03CD 	;	nvServoAccelValue:10		;1..8 counts/20mS squared
00716 03CD 	;	nvMinTime:20		;Minimum pulse time (900uS=1800)
00717 03CD 	;	nvMaxTime:20		;Maximum pulse time (2100uS=4200)
00718 03CD 	;	nvServoFlags:8		;4 bits per servo
00719 03CD 	;
00720 03CD 0020 	EEPromToServoParams	movlb	0	;Bank 0
00721 03CE 3005 		MOVLW	nvServoMaxSpeed
00722 03CF 00A4 		MOVWF	EEAddrTemp
00723 03D0 30F0 		MOVLW	LOW ServoMaxSpeed
00724 03D1 0084 		MOVWF	FSR0L
00725 03D2 3020 		MOVLW	HIGH ServoMaxSpeed
00726 03D3 0085 		MOVWF	FSR0H
00727 03D4 3020 		movlw	0x20	;ServoMaxSpeed + ServoAccelValue
00728 03D5 00F9 		movwf	Param79
00729 03D6 23DD 		call	ETSP_L1
00730 03D7 	;
00731 03D7 3040 		MOVLW	LOW MinTime
00732 03D8 0084 		MOVWF	FSR0L
00733 03D9 3021 		MOVLW	HIGH MinTime
00734 03DA 0085 		MOVWF	FSR0H
00735 03DB 3048 		movlw	0x48	;MinTime + MaxTime + ServoFlags
00736 03DC 00F9 		movwf	Param79
00737 03DD 	;
00738 03DD 209A 	ETSP_L1	CALL	EERead
00739 03DE 001A 		movwi	FSR0++
00740 03DF 0AA4 		INCF	EEAddrTemp,F
00741 03E0 0BF9 		decfsz	Param79,F
00742 03E1 33FB 		BRA	ETSP_L1
00743 03E2 0008 		RETURN
00744 03E3 	;
00745 03E3 	;===========================================================================
00746 03E3 	; copy eeprom to ram
00747 03E3 	;
00748 03E3 0020 	EEPromToSequencer	movlb	0	;Bank 0
00749 03E4 306D 		MOVLW	nvSequencerData
00750 03E5 00A4 		MOVWF	EEAddrTemp
00751 03E6 3000 		MOVLW	LOW SequencerData
00752 03E7 0084 		MOVWF	FSR0L
00753 03E8 3022 		MOVLW	HIGH SequencerData
00754 03E9 0085 		MOVWF	FSR0H
SimpleServo16PS.asm                                                   Page: 27
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00755 03EA 3080 		movlw	0x80	;SequencerData
00756 03EB 00F9 		movwf	Param79
00757 03EC 33F0 		bra	ETSP_L1
00758 03ED 	;
00759 03ED 	;===========================================================================
00760 03ED 	; copy ram to eeprom
00761 03ED 	;
00762 03ED 0020 	ServoParamsToEEProm	movlb	0	;Bank 0
00763 03EE 3005 		MOVLW	nvServoMaxSpeed
00764 03EF 00A4 		MOVWF	EEAddrTemp
00765 03F0 30F0 		MOVLW	LOW ServoMaxSpeed
00766 03F1 0084 		MOVWF	FSR0L
00767 03F2 3020 		MOVLW	HIGH ServoMaxSpeed
00768 03F3 0085 		MOVWF	FSR0H
00769 03F4 3020 		movlw	0x20	;ServoMaxSpeed + ServoAccelValue
00770 03F5 00F9 		movwf	Param79
00771 03F6 23FD 		call	SPTE_L1
00772 03F7 	;
00773 03F7 3040 		MOVLW	LOW MinTime
00774 03F8 0084 		MOVWF	FSR0L
00775 03F9 3021 		MOVLW	HIGH MinTime
00776 03FA 0085 		MOVWF	FSR0H
00777 03FB 3048 		movlw	0x48	;MinTime + MaxTime + ServoFlags
00778 03FC 00F9 		movwf	Param79
00779 03FD 	;
00780 03FD 0012 	SPTE_L1	moviw	FSR0++
00781 03FE 00A5 		MOVWF	EEDataTemp
00782 03FF 20A4 		CALL	EEWrite
00783 0400 0AA4 		INCF	EEAddrTemp,F
00784 0401 0BF9 		decfsz	Param79,F
00785 0402 33FA 		BRA	SPTE_L1
00786 0403 0008 		RETURN
00787 0404 	;
00788 0404 	;===========================================================================
00789 0404 	; copy ram to eeprom
00790 0404 	;
00791 0404 0020 	SequencerToEEProm	movlb	0	;Bank 0
00792 0405 306D 		MOVLW	nvSequencerData
00793 0406 00A4 		MOVWF	EEAddrTemp
00794 0407 3000 		MOVLW	LOW SequencerData
00795 0408 0084 		MOVWF	FSR0L
00796 0409 3022 		MOVLW	HIGH SequencerData
00797 040A 0085 		MOVWF	FSR0H
00798 040B 3080 		movlw	0x80	;SequencerData
00799 040C 00F9 		movwf	Param79
00800 040D 33EF 		bra	SPTE_L1
00801 040E 	;
00802 040E 	;=========================================================================================
00803 040E 	; Entry: W=Servo# 0..15, Param7D:Param7C = Dest
00804 040E 	; Exit: W=changed
00805 040E 	; Ram used: Param78, Param7C, Param7D FSR0
00806 040E 	; Calls: none
00807 040E 	;
00808 040E 390F 	StartMotion	ANDLW	0x0F
00809 040F 00F8 		MOVWF	Param78
00810 0410 	; Copy 7D:7C to CMDSigTime
00811 0410 3578 		LSLF	Param78,W	;x2, 0,2,4..30
00812 0411 		LOADFSR0W	CMDSigTime
00812 0411 3E20      M		addlw	low CMDSigTime		addlw 	low ADDRESS
00812 0412 0084      M		movwf	FSR0L		movwf 	FSR0L
00812 0413 0185      M		clrf	FSR0H		clrf	FSR0H
00812 0414 3021      M		movlw	high CMDSigTime		movlw	high ADDRESS
00812 0415 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00813 0416 087C 		MOVF	Param7C,W
00814 0417 001A 		MOVWI	FSR0++
00815 0418 087D 		MOVF	Param7D,W
00816 0419 001A 		MOVWI	FSR0++
00817 041A 	; Set ServoCurSpeed to 1 (minimum)
00818 041A 0878 		MOVF	Param78,W
00819 041B 		LOADFSR0W	ServoCurSpeed
00819 041B 3E10      M		addlw	low ServoCurSpeed		addlw 	low ADDRESS
00819 041C 0084      M		movwf	FSR0L		movwf 	FSR0L
00819 041D 0185      M		clrf	FSR0H		clrf	FSR0H
00819 041E 3021      M		movlw	high ServoCurSpeed		movlw	high ADDRESS
00819 041F 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00820 0420 3001 		MOVLW	0x01
00821 0421 0080 		MOVWF	INDF0
00822 0422 	; Clear the In-Position Flag
00823 0422 0878 		MOVF	Param78,W
00824 0423 3907 		ANDLW	0x07
00825 0424 		LOADFSR0W	ServoFlags
00825 0424 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00825 0425 0084      M		movwf	FSR0L		movwf 	FSR0L
00825 0426 0185      M		clrf	FSR0H		clrf	FSR0H
00825 0427 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00825 0428 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00826 0429 1DF8 		BTFSS	Param78,3
00827 042A 1080 		BCF	INDF0,InPositionFlag0_7
00828 042B 19F8 		BTFSC	Param78,3
00829 042C 1280 		BCF	INDF0,InPositionFlag8_15
00830 042D 	; Set ServoFlags,ServoOnBit
00831 042D 1DF8 		BTFSS	Param78,3
00832 042E 1500 		BSF	INDF0,ServoOnBit0_7
00833 042F 19F8 		BTFSC	Param78,3
00834 0430 1700 		BSF	INDF0,ServoOnBit8_15
00835 0431 	; Clear the AccelComplete Flag
00836 0431 0878 		MOVF	Param78,W
00837 0432 3907 		ANDLW	0x07
00838 0433 		LOADFSR0W	ServoFlags2
SimpleServo16PS.asm                                                   Page: 28
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00838 0433 3E88      M		addlw	low ServoFlags2		addlw 	low ADDRESS
00838 0434 0084      M		movwf	FSR0L		movwf 	FSR0L
00838 0435 0185      M		clrf	FSR0H		clrf	FSR0H
00838 0436 3021      M		movlw	high ServoFlags2		movlw	high ADDRESS
00838 0437 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00839 0438 1DF8 		BTFSS	Param78,3
00840 0439 1000 		BCF	INDF0,AccelComplete0_7
00841 043A 19F8 		BTFSC	Param78,3
00842 043B 1200 		BCF	INDF0,AccelComplete8_15
00843 043C 	; Clear AccelRampLen
00844 043C 3578 		LSLF	Param78,W	;x2, 0,2,4..30
00845 043D 		LOADFSR0W	AccelRampLen
00845 043D 3EE0      M		addlw	low AccelRampLen		addlw 	low ADDRESS
00845 043E 0084      M		movwf	FSR0L		movwf 	FSR0L
00845 043F 0185      M		clrf	FSR0H		clrf	FSR0H
00845 0440 3021      M		movlw	high AccelRampLen		movlw	high ADDRESS
00845 0441 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00846 0442 0103 		CLRW
00847 0443 001A 		MOVWI	FSR0++
00848 0444 001A 		MOVWI	FSR0++
00849 0445 0008 		RETURN
00850 0446 	;
00851 0446 	;=========================================================================================
00852 0446 	; Servo Sequencer
00853 0446 	;
00854 0446 	; Entry: none
00855 0446 	;
00856 0446 0025 	DoSequenceCmd	movlb	5	;Bank 5
00857 0447 3080 		movlw	kSeqMemSize
00858 0448 0266 		subwf	SequencerPtr,W	;W=SequencerPtr-kSeqMemSize
00859 0449 		SKPB		;SequencerPtr<kSeqMemSize?
00859 0449 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00860 044A 321C 		bra	DoSeqDone	; No, Sequencer is past end
00861 044B 	;
00862 044B 	; Handle Wait states now
00863 044B 	;SeqWaitForTimer
00864 044B 	;SeqWaitForInPos
00865 044B 	;SeqWaitForBtn2
00866 044B 	;SeqWaitForBtn3
00867 044B 	;
00868 044B 	;
00869 044B 0866 		movf	SequencerPtr,W
00870 044C 		LOADFSR0W	SequencerData
00870 044C 3E00      M		addlw	low SequencerData		addlw 	low ADDRESS
00870 044D 0084      M		movwf	FSR0L		movwf 	FSR0L
00870 044E 0185      M		clrf	FSR0H		clrf	FSR0H
00870 044F 3022      M		movlw	high SequencerData		movlw	high ADDRESS
00870 0450 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00871 0451 0AE6 		incf	SequencerPtr,F
00872 0452 0012 		moviw	FSR0++
00873 0453 00F8 		movwf	Param78
00874 0454 0E78 		swapf	Param78,W
00875 0455 390F 		andlw	0x0F
00876 0456 000B 		brw
00877 0457 2C67 		goto	DoSeqDone	;kSeqCmd_End 
00878 0458 2C70 		goto	DoSeqMoveCmd	;kSeqCmd_Move +ServoNum, Dest
00879 0459 2C7F 		goto	DoSeqSetSpeedCmd	;kSeqCmd_SetSpeed +ServoNum, Speed
00880 045A 2C8A 		goto	DoSeqSetAccelCmd	;kSeqCmd_SetAccel +ServoNum, Accel
00881 045B 2C92 		goto	DoSeqSetMinCmd	;kSeqCmd_SetMin +ServoNum, MinL, MinH
00882 045C 2C9D 		goto	DoSeqSetMaxCmd	;kSeqCmd_SetMax +ServoNum, MaxL, MaxH
00883 045D 2CA5 		goto	DoSeqSetLoopTimeCmd	;kSeqCmd_SetLoopTime +TimerL high nibble, TimerH
00884 045E 	;  load this value into master sequence timer, time counts down to zero, 0.01 second timebase
00885 045E 2CB5 		goto	DoSeqWaitUntilCmd	;kSeqCmd_WaitUntil +TimerL high nibble, TimerH
00886 045F 	;  wait here until master sequence timer is less than this value
00887 045F 2CC3 		goto	DoSeqMov2MinCmd	;kSeqCmd_Mov2Min +ServoNum
00888 0460 2CCF 		goto	DoSeqMov2MaxCmd	;kSeqCmd_Mov2Max +ServoNum
00889 0461 2CD7 		goto	DoSeqMov2CtrCmd	;kSeqCmd_Mov2Ctr +ServoNum
00890 0462 2CDC 		goto	DoSeqWaitInPosCmd	;kSeqCmd_WaitInPos +ServoNum
00891 0463 2CE1 		goto	DoSeqStopCmd	;kSeqCmd_Stop +Flags? Mode=0 only
00892 0464 2CE8 		goto	DoSeqWaitForBtnCmd	;kSeqCmd_WaitForBtn +Btn#, 2 or 3 only
00893 0465 2C6E 		goto	SeqReturn	;E not used
00894 0466 2C6E 		goto	SeqReturn	;F not used
00895 0467 	;
00896 0467 01E6 	DoSeqDone	clrf	SequencerPtr
00897 0468 	; if mode=0 then stop sequencer
00898 0468 0020 		movlb	0	;Bank 0
00899 0469 08B7 		movf	SysMode,F
00900 046A 		SKPZ
00900 046A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00901 046B 0008 		return		;Mode <> 0
00902 046C 0025 		movlb	5	;Bank 5
00903 046D 1065 		bcf	SequencerFlags,SeqActive
00904 046E 0020 	SeqReturn	movlb	0	;Bank 0
00905 046F 0008 		return
00906 0470 	;
00907 0470 0012 	DoSeqMoveCmd	moviw	FSR0++
00908 0471 0AE6 		incf	SequencerPtr,F
00909 0472 	; Position values are UInt8 x 8 + 2048, 0x01 = 1*8+2048 = 2056, 0.5 uS timebase,
00910 0472 	;   0x00 = 2048, 0xFF = 255*8+2048 = 4088 = 0.002044 Seconds maximum pulse width.
00911 0472 00FC 		movwf	Param7C
00912 0473 01FD 		clrf	Param7D
00913 0474 35FC 		lslf	Param7C,F
00914 0475 0DFD 		rlf	Param7D,F	
00915 0476 35FC 		lslf	Param7C,F
00916 0477 0DFD 		rlf	Param7D,F	
00917 0478 35FC 		lslf	Param7C,F
00918 0479 0DFD 		rlf	Param7D,F
00919 047A 15FD 		bsf	Param7D,3
00920 047B 	;
SimpleServo16PS.asm                                                   Page: 29
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00921 047B 0878 	DoSeqMov2	movf	Param78,W
00922 047C 390F 		andlw	0x0F
00923 047D 240E 		call	StartMotion
00924 047E 33EF 		bra	SeqReturn
00925 047F 	;
00926 047F 0878 	DoSeqSetSpeedCmd	movf	Param78,W
00927 0480 390F 		andlw	0x0F
00928 0481 		LOADFSR1W	ServoMaxSpeed
00928 0481 3EF0      M		addlw	low ServoMaxSpeed		addlw 	low ADDRESS
00928 0482 0086      M		movwf	FSR1L		movwf 	FSR1L
00928 0483 0187      M		clrf	FSR1H		clrf	FSR1H
00928 0484 3020      M		movlw	high ServoMaxSpeed		movlw	high ADDRESS
00928 0485 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00929 0486 0012 	DoSeqCpByte	moviw	FSR0++
00930 0487 001E 		movwi	FSR1++
00931 0488 0AE6 		incf	SequencerPtr,F
00932 0489 2C6E 		goto	SeqReturn
00933 048A 	;
00934 048A 0878 	DoSeqSetAccelCmd	movf	Param78,W
00935 048B 390F 		andlw	0x0F
00936 048C 		LOADFSR1W	ServoAccelValue
00936 048C 3E00      M		addlw	low ServoAccelValue		addlw 	low ADDRESS
00936 048D 0086      M		movwf	FSR1L		movwf 	FSR1L
00936 048E 0187      M		clrf	FSR1H		clrf	FSR1H
00936 048F 3021      M		movlw	high ServoAccelValue		movlw	high ADDRESS
00936 0490 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00937 0491 33F4 		bra	DoSeqCpByte
00938 0492 	;
00939 0492 3578 	DoSeqSetMinCmd	lslf	Param78,W
00940 0493 391E 		andlw	0x1E
00941 0494 		LOADFSR1W	MinTime
00941 0494 3E40      M		addlw	low MinTime		addlw 	low ADDRESS
00941 0495 0086      M		movwf	FSR1L		movwf 	FSR1L
00941 0496 0187      M		clrf	FSR1H		clrf	FSR1H
00941 0497 3021      M		movlw	high MinTime		movlw	high ADDRESS
00941 0498 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00942 0499 0012 	DoSeqCpWord	moviw	FSR0++
00943 049A 001E 		movwi	FSR1++
00944 049B 0AE6 		incf	SequencerPtr,F
00945 049C 33E9 		bra	DoSeqCpByte
00946 049D 	;
00947 049D 3578 	DoSeqSetMaxCmd	lslf	Param78,W
00948 049E 391E 		andlw	0x1E
00949 049F 		LOADFSR1W	MaxTime
00949 049F 3E60      M		addlw	low MaxTime		addlw 	low ADDRESS
00949 04A0 0086      M		movwf	FSR1L		movwf 	FSR1L
00949 04A1 0187      M		clrf	FSR1H		clrf	FSR1H
00949 04A2 3021      M		movlw	high MaxTime		movlw	high ADDRESS
00949 04A3 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00950 04A4 33F4 		bra	DoSeqCpWord
00951 04A5 	;
00952 04A5 0E78 	DoSeqSetLoopTimeCmd	swapf	Param78,W
00953 04A6 39F0 		andlw	0xF0
00954 04A7 00FA 		movwf	Param7A	;MSB of Wait time
00955 04A8 0012 		moviw	FSR0++
00956 04A9 0AE6 		incf	SequencerPtr,F
00957 04AA 0020 		movlb	0	;Bank 0
00958 04AB 00F8 		movwf	Param78
00959 04AC 0E78 		swapf	Param78,W
00960 04AD 390F 		andlw	0x0F
00961 04AE 04FA 		iorwf	Param7A,F	;low nibble of MSB
00962 04AF 0E78 		swapf	Param78,W
00963 04B0 39F0 		andlw	0xF0
00964 04B1 00A8 		movwf	Timer2Lo
00965 04B2 087A 		movf	Param7A,W
00966 04B3 00A9 		movwf	Timer2Hi
00967 04B4 0008 		return
00968 04B5 	;
00969 04B5 14E5 	DoSeqWaitUntilCmd	bsf	SequencerFlags,SeqWaitForTimer
00970 04B6 0E78 		swapf	Param78,W
00971 04B7 39F0 		andlw	0xF0
00972 04B8 00E8 		movwf	SequencerTime	;MSB of Wait time
00973 04B9 0012 		moviw	FSR0++
00974 04BA 0AE6 		incf	SequencerPtr,F
00975 04BB 00F8 		movwf	Param78
00976 04BC 0E78 		swapf	Param78,W
00977 04BD 390F 		andlw	0x0F
00978 04BE 04E8 		iorwf	SequencerTime,F
00979 04BF 0E78 		swapf	Param78,W
00980 04C0 39F0 		andlw	0xF0
00981 04C1 00E7 		movwf	SequencerServoNum	;for Wait..., LSB ot Time
00982 04C2 33AB 		bra	SeqReturn
00983 04C3 	;
00984 04C3 3578 	DoSeqMov2MinCmd	lslf	Param78,W
00985 04C4 391E 		andlw	0x1E
00986 04C5 		LOADFSR0W	MinTime
00986 04C5 3E40      M		addlw	low MinTime		addlw 	low ADDRESS
00986 04C6 0084      M		movwf	FSR0L		movwf 	FSR0L
00986 04C7 0185      M		clrf	FSR0H		clrf	FSR0H
00986 04C8 3021      M		movlw	high MinTime		movlw	high ADDRESS
00986 04C9 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00987 04CA 0012 	SeqMov2FSR0	moviw	FSR0++
00988 04CB 00FC 		movwf	Param7C
00989 04CC 0012 		moviw	FSR0++
00990 04CD 00FD 		movwf	Param7D
00991 04CE 33AC 		bra	DoSeqMov2
00992 04CF 	;
00993 04CF 3578 	DoSeqMov2MaxCmd	lslf	Param78,W
00994 04D0 391E 		andlw	0x1E
SimpleServo16PS.asm                                                   Page: 30
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00995 04D1 		LOADFSR0W	MaxTime
00995 04D1 3E60      M		addlw	low MaxTime		addlw 	low ADDRESS
00995 04D2 0084      M		movwf	FSR0L		movwf 	FSR0L
00995 04D3 0185      M		clrf	FSR0H		clrf	FSR0H
00995 04D4 3021      M		movlw	high MaxTime		movlw	high ADDRESS
00995 04D5 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00996 04D6 33F3 		bra	SeqMov2FSR0
00997 04D7 	;
00998 04D7 30B8 	DoSeqMov2CtrCmd	movlw	LOW kCenterPulseWidth
00999 04D8 00FC 		movwf	Param7C
01000 04D9 300B 		movlw	HIGH kCenterPulseWidth
01001 04DA 00FD 		movwf	Param7D
01002 04DB 339F 		bra	DoSeqMov2
01003 04DC 	;
01004 04DC 0878 	DoSeqWaitInPosCmd	movf	Param78,W
01005 04DD 390F 		andlw	0x0F
01006 04DE 00E7 		movwf	SequencerServoNum
01007 04DF 1565 		bsf	SequencerFlags,SeqWaitForInPos
01008 04E0 338D 		bra	SeqReturn
01009 04E1 	;
01010 04E1 0020 	DoSeqStopCmd	movlb	0	;Bank 0
01011 04E2 08B7 		movf	SysMode,F
01012 04E3 		SKPZ
01012 04E3 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01013 04E4 0008 		return
01014 04E5 0025 		movlb	5	;Bank 5
01015 04E6 1065 		bcf	SequencerFlags,SeqActive
01016 04E7 3386 		bra	SeqReturn
01017 04E8 	;
01018 04E8 1878 	DoSeqWaitForBtnCmd	btfsc	Param78,0
01019 04E9 1665 		bsf	SequencerFlags,SeqWaitForBtn2
01020 04EA 18F8 		btfsc	Param78,1
01021 04EB 16E5 		bsf	SequencerFlags,SeqWaitForBtn3
01022 04EC 3381 		bra	SeqReturn
01023 04ED 	;
01024 04ED 		if oldCode
01136 04ED 		endif
01137 04ED 	;
01138 04ED 	;=========================================================================================
01139 04ED 	; ClampInt(Param7D:Param7C,kMinPulseWidth,kMaxPulseWidth)
01140 04ED 	;
01141 04ED 	; Entry: Param7D:Param7C
01142 04ED 	; Exit: Param7D:Param7C=ClampInt(Param7D:Param7C,kMinPulseWidth,kMaxPulseWidth)
01143 04ED 	;
01144 04ED 3010 	ClampInt	MOVLW	high kMaxPulseWidth
01145 04EE 027D 		SUBWF	Param7D,W	;7D-kMaxPulseWidth
01146 04EF 		SKPNB		;7D<Max?
01146 04EF 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01147 04F0 2CFA 		GOTO	ClampInt_1	; Yes
01148 04F1 		SKPZ		;7D=Max?
01148 04F1 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01149 04F2 2D09 		GOTO	ClampInt_tooHigh	; No, its greater.
01150 04F3 3068 		MOVLW	low kMaxPulseWidth	; Yes, MSB was equal check LSB
01151 04F4 027C 		SUBWF	Param7C,W	;7C-kMaxPulseWidth
01152 04F5 		SKPNZ		;=kMaxPulseWidth
01152 04F5 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01153 04F6 0008 		RETURN		;Yes
01154 04F7 		SKPB		;7C<Max?
01154 04F7 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01155 04F8 2D09 		GOTO	ClampInt_tooHigh	; No
01156 04F9 0008 		RETURN		; Yes
01157 04FA 	;
01158 04FA 3007 	ClampInt_1	MOVLW	high kMinPulseWidth
01159 04FB 027D 		SUBWF	Param7D,W	;7D-kMinPulseWidth
01160 04FC 		SKPNB		;7D<Min?
01160 04FC 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01161 04FD 2D04 		GOTO	ClampInt_tooLow	; Yes
01162 04FE 		SKPZ		;=Min?
01162 04FE 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01163 04FF 0008 		RETURN		; No, 7D>kMinPulseWidth
01164 0500 3008 		MOVLW	low kMinPulseWidth	; Yes, MSB is a match
01165 0501 027C 		SUBWF	Param7C,W	;7C-kMinPulseWidth
01166 0502 		SKPB		;7C>=Min?
01166 0502 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01167 0503 0008 		RETURN		; Yes
01168 0504 	;	
01169 0504 3008 	ClampInt_tooLow	MOVLW	low kMinPulseWidth
01170 0505 00FC 		MOVWF	Param7C
01171 0506 3007 		MOVLW	high kMinPulseWidth
01172 0507 00FD 		MOVWF	Param7D
01173 0508 0008 		RETURN
01174 0509 	;
01175 0509 3068 	ClampInt_tooHigh	MOVLW	low kMaxPulseWidth
01176 050A 00FC 		MOVWF	Param7C
01177 050B 3010 		MOVLW	high kMaxPulseWidth
01178 050C 00FD 		MOVWF	Param7D
01179 050D 0008 		RETURN
01180 050E 	;
01181 050E 	;=========================================================================================
01182 050E 	; ClampMinMax(Param7D:Param7C,W = offset servo# * 2 (0,2,4..30)
01183 050E 	;
01184 050E 	; Entry: Param7D:Param7C, W=servo# x 2
01185 050E 	; Exit: Param7D:Param7C=ClampInt(Param7D:Param7C,(MinTime0_7+Param78),(MaxTime0_7+Param78))
01186 050E 	; Ram used: Param78, Param7C, Param7D, FSR0
01187 050E 	;
01188 050E 00F8 	ClampMinMax	MOVWF	Param78	;ServoNum * 2
01189 050F 0A78 		INCF	Param78,W	; MSB index
01190 0510 		LOADFSR0W	MaxTime
01190 0510 3E60      M		addlw	low MaxTime		addlw 	low ADDRESS
SimpleServo16PS.asm                                                   Page: 31
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

01190 0511 0084      M		movwf	FSR0L		movwf 	FSR0L
01190 0512 0185      M		clrf	FSR0H		clrf	FSR0H
01190 0513 3021      M		movlw	high MaxTime		movlw	high ADDRESS
01190 0514 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
01191 0515 0013 		MOVIW	FSR0--	;MaxTime+Offset+1
01192 0516 027D 		SUBWF	Param7D,W	;7D-kMaxPulseWidth
01193 0517 		SKPNB		;7D<Max?
01193 0517 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01194 0518 2D22 		GOTO	ClampMinMax_1	; Yes
01195 0519 		SKPZ		;7D=Max?
01195 0519 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01196 051A 2D32 		GOTO	ClampMinMax_too	; No, its greater.
01197 051B 0800 		MOVF	INDF0,W	; Yes, MSB was equal check LSB
01198 051C 027C 		SUBWF	Param7C,W	;7C-kMaxPulseWidth
01199 051D 		SKPNZ		;=kMaxPulseWidth
01199 051D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01200 051E 0008 		RETURN		;Yes
01201 051F 		SKPB		;7C<Max?
01201 051F 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01202 0520 2D32 		GOTO	ClampMinMax_too	; No
01203 0521 0008 		RETURN		; Yes
01204 0522 	;
01205 0522 0A78 	ClampMinMax_1	INCF	Param78,W
01206 0523 		LOADFSR0W	MinTime
01206 0523 3E40      M		addlw	low MinTime		addlw 	low ADDRESS
01206 0524 0084      M		movwf	FSR0L		movwf 	FSR0L
01206 0525 0185      M		clrf	FSR0H		clrf	FSR0H
01206 0526 3021      M		movlw	high MinTime		movlw	high ADDRESS
01206 0527 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
01207 0528 0013 		MOVIW	FSR0--	;MinTime+Offset+1
01208 0529 027D 		SUBWF	Param7D,W	;7D-kMinPulseWidth
01209 052A 		SKPNB		;7D<Min?
01209 052A 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01210 052B 2D32 		GOTO	ClampMinMax_too	; Yes
01211 052C 		SKPZ		;=Min?
01211 052C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01212 052D 0008 		RETURN		; No, 7D>kMinPulseWidth
01213 052E 0800 		MOVF	INDF0,W	; Yes, MSB is a match
01214 052F 027C 		SUBWF	Param7C,W	;7C-kMinPulseWidth
01215 0530 		SKPB		;7C>=Min?
01215 0530 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01216 0531 0008 		RETURN		; Yes
01217 0532 	;	
01218 0532 0012 	ClampMinMax_too	MOVIW	FSR0++
01219 0533 00FC 		MOVWF	Param7C
01220 0534 0800 		MOVF	INDF0,W
01221 0535 00FD 		MOVWF	Param7D
01222 0536 0008 		RETURN
01223 0537 	;
01224 0537 	;
01225 0537 	;
01226 0537 	;
01227 0537 	;
01228 0537 	;
01229 0537 	;
01230 0537 	;
01231 0537 	;
01232 0537 	;
01233 0537 	;
01234 0537 	;
01235 0537 	;
01236 0537 	;
01237 0537 	;
01238 0537 	;
01239 0537 	;
01240 0537 	;
01241 0537 	;
01242 0537 	;
01243 0537 	;
01244 0537 	;
01245 0537 	;
01246 0537 	;
01247 0537 	;
01248 0537 	;
01249 0537 	;
01250 0537 	;
01251 0537 	;
00566 0537 	;
00567 0537 	;
00568 0537 		org 0x800
00569 0800 		include <SSC16PSCmds.inc>
00001 0800 	;=========================================================================================
00002 0800 	;
00003 0800 	;    Filename:      SerialServoCmds.inc
00004 0800 	;    Date:          4/1/2021
00005 0800 	;    File Version:  1.0.0
00006 0800 	;
00007 0800 	;    Author:        David M. Flynn
00008 0800 	;    Company:       Oxford V.U.E., Inc.
00009 0800 	;    E-Mail:        dflynn@oxfordvue.com
00010 0800 	;    Web Site:      http://www.oxfordvue.com/
00011 0800 	;
00012 0800 	;=========================================================================================
00013 0800 	; Notes:
00014 0800 	;  Command interpreter for Simple Servo Controller 16 Packet Serial
00015 0800 	;
00016 0800 	; History
00017 0800 	; 1.0.0  4/1/2021	Copied from SerialServo
00018 0800 	;=========================================================================================
SimpleServo16PS.asm                                                   Page: 32
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00019 0800 	;
00020 0800 0081 	kCmd_SetMode	EQU	0x81	;+1 data (SysMode), return ACK
00021 0800 0001 	kCmd_GetMode	EQU	0x01
00022 0800 0082 	kCmd_SetCmdPos	EQU	0x82	;+3 data (ServoNum,CMDSigTime), return ACK
00023 0800 0002 	kCmd_GetCmdPos	EQU	0x02
00024 0800 0083 	kCmd_SetAccel	EQU	0x83	;+2 data (ServoNum,ServoAccelValue), return ACK
00025 0800 0003 	kCmd_GetAccel	EQU	0x03
00026 0800 0084 	kCmd_SetServoEnable	EQU	0x84	;+2 data (ServoNum, Enable), return ACK
00027 0800 0004 	kCmd_GetServoEnable	EQU	0x04
00028 0800 0085 	kCmd_SetMaxSpeed	EQU	0x85	;+2 data (ServoNum,ServoMaxSpeed), return ACK
00029 0800 0005 	kCmd_GetMaxSpeed	EQU	0x05
00030 0800 0086 	kCmd_SetMin_uS	EQU	0x86	;+3 data (ServoNum,MinTime), return ACK
00031 0800 0006 	kCmd_GetMin_uS	EQU	0x06
00032 0800 0087 	kCmd_SetMax_uS	EQU	0x87	;+3 data (ServoNum,MaxTime), return ACK
00033 0800 0007 	kCmd_GetMax_uS	EQU	0x07
00034 0800 0088 	kCmd_SetSeqByte	EQU	0x88	;+2 data (Address, Data), return ACK
00035 0800 0008 	kCmd_GetSeqByte	EQU	0x08
00036 0800 	;
00037 0800 	;
00038 0800 0091 	kCmd_GetCurSpeed	EQU	0x91	;+1 Data (ServoNum) return ServoCurSpeed
00039 0800 0092 	kCmd_GetCurPos	EQU	0x92	;+1 Data (ServoNum) Return SigOutTime
00040 0800 0093 	kCmd_GetInPosition	EQU	0x93	;+1 Data (ServoNum) Return InPositionFlag
00041 0800 0094 	kCmd_SaveParams	EQU	0x94	;Save all eeprom params, return ACK
00042 0800 0095 	kCmd_RestoreParams	EQU	0x95	;Copy to ram, return ACK
00043 0800 0096 	kCmd_SaveSequencerData	EQU	0x96	;Save Sequencer data to EEPROM, return ACK
00044 0800 0097 	kCmd_LoadSequencerData	EQU	0x97	;Load Sequencer from EEPROM, return ACK
00045 0800 0098 	kCmd_GetStatus	EQU	0x98	;return ssStatus
00046 0800 0099 	kCmd_ReBoot	EQU	0x99	;ReBoot the controller
00047 0800 009A 	kCmd_RunBootloader	EQU	0x9A	;Set EEPROM (0xFF) = 0xFF and reboot
00048 0800 009B 	kCmd_SequencerStart	EQU	0x9B	;Start/Restart Sequencer, return ACK
00049 0800 	;
00050 0800 	; these commands save params and return a 0,0,0,0 packet with the new address
00051 0800 00A1 	kCmd_SetMasterAddr	EQU	0xA1	;+1 data, return a zero packet
00052 0800 00A2 	kCmd_SetSlaveAddr	EQU	0xA2	;+1 data, return a zero packet
00053 0800 	;
00054 0800 	;Special packet (0xDD, 0xDD, 0x01, 0x02, 0xAA, 0x00, 0x00, 0x00, checksum)
00055 0800 00AA 	kCmd_SendIDString	EQU	0xAA	; returns "DMFE SSC16PS\n"
00056 0800 	;
00057 0800 	;=========================================================================================
00058 0800 	;
00059 0800 	RS232_Send_S0	mLongCall	RS232_Send
00059 0800 3181      M		movlp	RS232_Send	                       movlp                  Destination
00059 0801 21A7      M		call	RS232_Send	                       call                   Destination
00059 0802 3188      M		movlp	$	                       movlp                  $
00060 0803 0008 		return
00061 0804 	;
00062 0804 	;=========================================================================================
00063 0804 	; Entry: RXDataIsNew=1, data in RX_Data
00064 0804 	;
00065 0804 0021 	HandleRXData	movlb	RX_Flags	;bank 1
00066 0805 10A1 		bcf	RXDataIsNew
00067 0806 1821 		btfsc	RXDataValidFlag	;from master to me?
00068 0807 3202 		bra	HandleRXData_1
00069 0808 0020 	HandleRXData_Rtn	movlb	0	;bank 0
00070 0809 0008 		return		; no, ignore this packet
00071 080A 	;
00072 080A 0020 	HandleRXData_1	movlb	0	;bank 0
00073 080B 	                       mMOVLF	RX_Data,FSR1
00073 080B 30AA      M		movlw	low RX_Data	                       movlw                  low ADDRESS
00073 080C 0086      M		movwf	FSR1	                       movwf                  DEST
00073 080D 3000      M		movlw	high RX_Data	                       movlw                  high ADDRESS
00073 080E 0087      M		movwf	FSR1+1	                       movwf                  DEST+1
00074 080F 		mMOVLF	TX_Data,FSR0
00074 080F 30AE      M		movlw	low TX_Data	                       movlw                  low ADDRESS
00074 0810 0084      M		movwf	FSR0	                       movwf                  DEST
00074 0811 3000      M		movlw	high TX_Data	                       movlw                  high ADDRESS
00074 0812 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
00075 0813 	;Dispatcher
00076 0813 	;
00077 0813 0016 		moviw	FSR1++	;get Command
00078 0814 00F8 		movwf	Param78	;aka RX_Data(0)
00079 0815 39F0 		andlw                  0xF0
00080 0816 		SKPZ
00080 0816 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00081 0817 3213 		bra                    Dispatcher_1
00082 0818 0878 		movf                   Param78,W
00083 0819 390F 		andlw                  0x0F
00084 081A 	;Jump table for 0x00 to 0x0F
00085 081A 000B 	                       brw
00086 081B 0008 	                       return                                        ;0x00 not used
00087 081C 3267 	                       bra                    Cmd_GetMode
00088 081D 327A 	                       bra                    Cmd_GetCmdPos
00089 081E 28B5 	                       goto                   Cmd_GetAccel
00090 081F 28D9 	                       goto                   Cmd_GetServoEnable
00091 0820 28F6 	                       goto                   Cmd_GetMaxSpeed
00092 0821 290F 	                       goto                   Cmd_GetMin_uS
00093 0822 2929 	                       goto                   Cmd_GetMax_uS
00094 0823 2940 	                       goto	Cmd_GetSeqByte
00095 0824 0008 	                       return		       ;9
00096 0825 0008 	                       return
00097 0826 0008 	                       return
00098 0827 0008 	                       return
00099 0828 0008 	                       return
00100 0829 0008 	                       return
00101 082A 0008 	                       return
00102 082B 	;
00103 082B 3C80 	Dispatcher_1           sublw                  0x80
00104 082C 	                       SKPZ
00104 082C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
SimpleServo16PS.asm                                                   Page: 33
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00105 082D 3213 	                       bra                    Dispatcher_2
00106 082E 0878 	                       movf                   Param78,W
00107 082F 390F 		andlw                  0x0F
00108 0830 	;Jump table for 0x80 to 0x8F
00109 0830 000B 	                       brw
00110 0831 0008 	                       return                                        ;0x80 not used
00111 0832 324A 	                       bra                    Cmd_SetMode
00112 0833 3253 	                       bra                    Cmd_SetCmdPos
00113 0834 28A7 	                       goto                   Cmd_SetAccel
00114 0835 28C1 	                       goto                   Cmd_SetServoEnable
00115 0836 28EA 	                       goto                   Cmd_SetMaxSpeed
00116 0837 2900 	                       goto                   Cmd_SetMin_uS
00117 0838 291A 	                       goto                   Cmd_SetMax_uS
00118 0839 2934 	                       goto	Cmd_SetSeqByte
00119 083A 0008 	                       return
00120 083B 0008 	                       return
00121 083C 0008 	                       return
00122 083D 0008 	                       return
00123 083E 0008 	                       return
00124 083F 0008 	                       return
00125 0840 0008 	                       return
00126 0841 	;
00127 0841 	;Jump table for 0x20 to 0x27
00128 0841 0878 	Dispatcher_2           movf                   Param78,W
00129 0842 39F0 	                       andlw                  0xF0
00130 0843 3C20 	                       sublw                  0x20
00131 0844 	                       SKPZ
00131 0844 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00132 0845 3201 	                       bra                    Dispatcher_3
00133 0846 0008 	                       return                                        ; Yes, oops
00134 0847 	;
00135 0847 0878 	Dispatcher_3           movf                   Param78,W
00136 0848 39F0 	                       andlw                  0xF0
00137 0849 3CB0 	                       sublw                  0xB0
00138 084A 	                       SKPZ
00138 084A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00139 084B 3201 	                       bra                    Dispatcher_4
00140 084C 0008 	                       return                                        ; Yes, oops
00141 084D 	;
00142 084D 	;Jump table for 0x90 to 0x9F
00143 084D 0878 	Dispatcher_4           movf                   Param78,W
00144 084E 39F0 	                       andlw                  0xF0
00145 084F 3C90 	                       sublw                  0x90
00146 0850 	                       SKPZ
00146 0850 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00147 0851 3213 	                       bra                    Dispatcher_5
00148 0852 300F 	                       movlw                  0x0F
00149 0853 0578 	                       andwf                  Param78,W
00150 0854 000B 	                       brw
00151 0855 0008 	                       return                                        ;0x90 not used
00152 0856 294A 	                       goto                   Cmd_GetCurSpeed
00153 0857 2954 	                       goto                   Cmd_GetCurPos
00154 0858 295F 	                       goto	Cmd_GetInPosition
00155 0859 2970 	                       goto                   Cmd_SaveParams
00156 085A 2977 	                       goto                   Cmd_RestoreParams
00157 085B 297E 	                       goto	Cmd_SaveSequencerData
00158 085C 2982 	                       goto	Cmd_LoadSequencerData
00159 085D 2986 	                       goto                   Cmd_GetStatus
00160 085E 0001 	                       reset                                         ;Cmd_ReBoot
00161 085F 2991 	                       goto                   Cmd_RunBootloader
00162 0860 2997 	                       goto	Cmd_SequencerStart
00163 0861 0008 	                       return
00164 0862 0008 	                       return
00165 0863 0008 	                       return
00166 0864 0008 	                       return
00167 0865 	;
00168 0865 	;Jump table for 0xA0 to 0xAF
00169 0865 0878 	Dispatcher_5           movf                   Param78,W
00170 0866 39F0 	                       andlw                  0xF0
00171 0867 3CA0 	                       sublw                  0xA0
00172 0868 	                       SKPZ
00172 0868 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00173 0869 3203 	                       bra                    Dispatcher_6
00174 086A 300F 	                       movlw                  0x0F
00175 086B 0578 	                       andwf                  Param78,W
00176 086C 000B 	                       brw
00177 086D 0008 	Dispatcher_6           return                                        ;0xA0 not used
00178 086E 299A 	                       goto                   Cmd_SetMasterAddr
00179 086F 29A0 	                       goto                   Cmd_SetSlaveAddr
00180 0870 0008 	                       return
00181 0871 0008 	                       return
00182 0872 0008 	                       return
00183 0873 0008 	                       return
00184 0874 0008 	                       return
00185 0875 0008 	                       return
00186 0876 0008 	                       return
00187 0877 29A6 	                       goto                   Cmd_SendIDString       ;0xAA
00188 0878 0008 	                       return
00189 0879 0008 	                       return
00190 087A 0008 	                       return
00191 087B 0008 	                       return
00192 087C 0008 	                       return
00193 087D 	;
00194 087D 	;---kCmd_SetMode----------------
00195 087D 	; Set Mode
00196 087D 3001 	Cmd_SetMode	movlw	kMaxMode+1
00197 087E 0201 		subwf	INDF1,W
00198 087F 		SKPB		;kMaxMode+1>Data
00198 087F 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
SimpleServo16PS.asm                                                   Page: 34
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00199 0880 3387 		bra	HandleRXData_Rtn
00200 0881 	;
00201 0881 0016 		moviw	FSR1++
00202 0882 00B7 		movwf	SysMode
00203 0883 29C5 		goto	TX_ACK
00204 0884 	;
00205 0884 	;---kCmd_GetMode------------------
00206 0884 0837 	Cmd_GetMode	movf	SysMode,W
00207 0885 001A 		movwi	FSR0++
00208 0886 2800 		goto	RS232_Send_S0
00209 0887 	;
00210 0887 	;---kCmd_SetCmdPos-------------------
00211 0887 	; Set Command Position
00212 0887 0016 	Cmd_SetCmdPos	moviw	FSR1++
00213 0888 390F 		andlw	0x0F	;0 .. 15 only
00214 0889 00F8 		movwf	Param78	;Servo Number
00215 088A 0016 		moviw	FSR1++
00216 088B 00FC 		movwf	Param7C
00217 088C 0016 		moviw	FSR1++
00218 088D 00FD 		movwf	Param7D
00219 088E 0878 		movf	Param78,W
00220 088F 		mLongCall	StartMotion
00220 088F 3184      M		movlp	StartMotion	                       movlp                  Destination
00220 0890 240E      M		call	StartMotion	                       call                   Destination
00220 0891 3188      M		movlp	$	                       movlp                  $
00221 0892 29C5 		goto	TX_ACK
00222 0893 	;
00223 0893 0879 	Cmd_SetWord7879	movf	Param79,W
00224 0894 001E 		movwi	FSR1++
00225 0895 087A 		movf	Param7A,W
00226 0896 001E 		movwi	FSR1++
00227 0897 29C5 		goto	TX_ACK
00228 0898 	;
00229 0898 	;---kCmd_GetCmdPos------------------
00230 0898 	; Get Command Position
00231 0898 0016 	Cmd_GetCmdPos	moviw	FSR1++
00232 0899 390F 		andlw	0x0F	;0 .. 15 only
00233 089A 00F8 		movwf	Param78	;Servo Number
00234 089B 35F8 		lslf	Param78,F	;x2
00235 089C 		LOADFSR1	CMDSigTime,Param78
00235 089C 3020      M		movlw	low CMDSigTime		movlw 	low ADDRESS 	; load address
00235 089D 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00235 089E 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00235 089F 0187      M		clrf	FSR1H		clrf	FSR1H
00235 08A0 3021      M		movlw	high CMDSigTime		movlw	high ADDRESS
00235 08A1 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00236 08A2 0016 	Cmd_GetWord	moviw	FSR1++
00237 08A3 001A 		movwi	FSR0++
00238 08A4 0016 		moviw	FSR1++
00239 08A5 001A 		movwi	FSR0++
00240 08A6 2800 		goto	RS232_Send_S0
00241 08A7 	;
00242 08A7 	;---kCmd_SetAccel-------------------
00243 08A7 	; Set Acceleration
00244 08A7 0016 	Cmd_SetAccel	moviw	FSR1++
00245 08A8 390F 		andlw	0x0F	;0 .. 15 only
00246 08A9 00F8 		movwf	Param78	;Servo Number
00247 08AA 0016 		moviw	FSR1++
00248 08AB 00F9 		movwf	Param79
00249 08AC 		LOADFSR1	ServoAccelValue,Param78
00249 08AC 3000      M		movlw	low ServoAccelValue		movlw 	low ADDRESS 	; load address
00249 08AD 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00249 08AE 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00249 08AF 0187      M		clrf	FSR1H		clrf	FSR1H
00249 08B0 3021      M		movlw	high ServoAccelValue		movlw	high ADDRESS
00249 08B1 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00250 08B2 0879 	Cmd_SetByte79	movf	Param79,W
00251 08B3 001E 		movwi	FSR1++
00252 08B4 29C5 		goto	TX_ACK
00253 08B5 	;
00254 08B5 	;---kCmd_GetAccel------------------
00255 08B5 	; Get Command Position
00256 08B5 0016 	Cmd_GetAccel	moviw	FSR1++
00257 08B6 390F 		andlw	0x0F	;0 .. 15 only
00258 08B7 00F8 		movwf	Param78	;Servo Number
00259 08B8 		LOADFSR1	ServoAccelValue,Param78
00259 08B8 3000      M		movlw	low ServoAccelValue		movlw 	low ADDRESS 	; load address
00259 08B9 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00259 08BA 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00259 08BB 0187      M		clrf	FSR1H		clrf	FSR1H
00259 08BC 3021      M		movlw	high ServoAccelValue		movlw	high ADDRESS
00259 08BD 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00260 08BE 0016 	Cmd_GetByte	moviw	FSR1++
00261 08BF 001A 		movwi	FSR0++
00262 08C0 2800 		goto	RS232_Send_S0
00263 08C1 	;
00264 08C1 	;---kCmd_SetServoEnable--------------
00265 08C1 0016 	Cmd_SetServoEnable	moviw	FSR1++
00266 08C2 390F 		andlw	0x0F	;0 .. 15 only
00267 08C3 00F8 		movwf	Param78	;Servo Number
00268 08C4 0016 		moviw	FSR1++
00269 08C5 00F9 		movwf	Param79	;0 = Off, 1= On
00270 08C6 0878 		movf	Param78,W
00271 08C7 3907 		andlw	0x07	;2 servos per ServoFlags byte
00272 08C8 		LOADFSR1W	ServoFlags
00272 08C8 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00272 08C9 0086      M		movwf	FSR1L		movwf 	FSR1L
00272 08CA 0187      M		clrf	FSR1H		clrf	FSR1H
00272 08CB 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
SimpleServo16PS.asm                                                   Page: 35
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00272 08CC 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00273 08CD 1C79 		btfss	Param79,0	;boolean value, Enable?
00274 08CE 3205 		bra	Cmd_SetServoEnable_1	; No, disable
00275 08CF 1DF8 		BTFSS	Param78,3
00276 08D0 1501 		BSF	INDF1,ServoOnBit0_7	;enable servo
00277 08D1 19F8 		BTFSC	Param78,3
00278 08D2 1701 		BSF	INDF1,ServoOnBit8_15	;enable servo
00279 08D3 29C5 		goto	TX_ACK
00280 08D4 	;
00281 08D4 1DF8 	Cmd_SetServoEnable_1	BTFSS	Param78,3
00282 08D5 1101 		BCF	INDF1,ServoOnBit0_7	;disable servo
00283 08D6 19F8 		BTFSC	Param78,3
00284 08D7 1301 		BCF	INDF1,ServoOnBit8_15	;disable servo
00285 08D8 29C5 		goto	TX_ACK
00286 08D9 	;
00287 08D9 	;---kCmd_GetServoEnable--------------
00288 08D9 0016 	Cmd_GetServoEnable	moviw	FSR1++
00289 08DA 390F 		andlw	0x0F	;0 .. 15 only
00290 08DB 00F8 		movwf	Param78	;Servo Number
00291 08DC 3907 		andlw	0x07	;2 servos per ServoFlags byte
00292 08DD 		LOADFSR1W	ServoFlags
00292 08DD 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00292 08DE 0086      M		movwf	FSR1L		movwf 	FSR1L
00292 08DF 0187      M		clrf	FSR1H		clrf	FSR1H
00292 08E0 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00292 08E1 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00293 08E2 19F8 		BTFSC	Param78,3
00294 08E3 3203 		bra	Cmd_GetServoEnable_1
00295 08E4 1901 		btfsc	INDF1,ServoOnBit0_7	;Is enabled?
00296 08E5 1400 		bsf	INDF0,0	; Yes
00297 08E6 2800 		goto	RS232_Send_S0
00298 08E7 	;
00299 08E7 1B01 	Cmd_GetServoEnable_1	btfsc	INDF1,ServoOnBit8_15	;Is enabled?
00300 08E8 1400 		bsf	INDF0,0	; Yes
00301 08E9 2800 		goto	RS232_Send_S0
00302 08EA 	;
00303 08EA 	;---kCmd_SetMaxSpeed-----------------
00304 08EA 0016 	Cmd_SetMaxSpeed	moviw	FSR1++
00305 08EB 390F 		andlw	0x0F	;0 .. 15 only
00306 08EC 00F8 		movwf	Param78	;Servo Number
00307 08ED 0016 		moviw	FSR1++
00308 08EE 00F9 		movwf	Param79
00309 08EF 		LOADFSR1	ServoMaxSpeed,Param78
00309 08EF 30F0      M		movlw	low ServoMaxSpeed		movlw 	low ADDRESS 	; load address
00309 08F0 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00309 08F1 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00309 08F2 0187      M		clrf	FSR1H		clrf	FSR1H
00309 08F3 3020      M		movlw	high ServoMaxSpeed		movlw	high ADDRESS
00309 08F4 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00310 08F5 28B2 		goto	Cmd_SetByte79
00311 08F6 	;
00312 08F6 	;---kCmd_GetMaxSpeed-----------------
00313 08F6 0016 	Cmd_GetMaxSpeed	moviw	FSR1++
00314 08F7 390F 		andlw	0x0F	;0 .. 15 only
00315 08F8 00F8 		movwf	Param78	;Servo Number
00316 08F9 		LOADFSR1	ServoMaxSpeed,Param78
00316 08F9 30F0      M		movlw	low ServoMaxSpeed		movlw 	low ADDRESS 	; load address
00316 08FA 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00316 08FB 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00316 08FC 0187      M		clrf	FSR1H		clrf	FSR1H
00316 08FD 3020      M		movlw	high ServoMaxSpeed		movlw	high ADDRESS
00316 08FE 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00317 08FF 28BE 		goto	Cmd_GetByte
00318 0900 	;
00319 0900 	;---kCmd_SetMin_uS-------------------
00320 0900 	; Set ServoMin_uS
00321 0900 0016 	Cmd_SetMin_uS	moviw	FSR1++
00322 0901 390F 		andlw	0x0F	;0 .. 15 only
00323 0902 00F8 		movwf	Param78	;Servo Number
00324 0903 35F8 		lslf	Param78,F	;x2
00325 0904 0016 		moviw	FSR1++
00326 0905 00F9 		movwf	Param79
00327 0906 0016 		moviw	FSR1++
00328 0907 00FA 		movwf	Param7A
00329 0908 		LOADFSR1	MinTime,Param78
00329 0908 3040      M		movlw	low MinTime		movlw 	low ADDRESS 	; load address
00329 0909 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00329 090A 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00329 090B 0187      M		clrf	FSR1H		clrf	FSR1H
00329 090C 3021      M		movlw	high MinTime		movlw	high ADDRESS
00329 090D 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00330 090E 2893 		goto	Cmd_SetWord7879
00331 090F 	;
00332 090F 	;---kCmd_GetMin_uS----------------
00333 090F 	; Get ServoMin_uS
00334 090F 0016 	Cmd_GetMin_uS	moviw	FSR1++
00335 0910 390F 		andlw	0x0F	;0 .. 15 only
00336 0911 00F8 		movwf	Param78	;Servo Number
00337 0912 35F8 		lslf	Param78,F	;x2
00338 0913 		LOADFSR1	MinTime,Param78
00338 0913 3040      M		movlw	low MinTime		movlw 	low ADDRESS 	; load address
00338 0914 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00338 0915 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00338 0916 0187      M		clrf	FSR1H		clrf	FSR1H
00338 0917 3021      M		movlw	high MinTime		movlw	high ADDRESS
00338 0918 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00339 0919 28A2 		goto	Cmd_GetWord
00340 091A 	;
00341 091A 	;---kCmd_SetMax_uS-------------------
SimpleServo16PS.asm                                                   Page: 36
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00342 091A 	; Set ServoMax_uS
00343 091A 0016 	Cmd_SetMax_uS	moviw	FSR1++
00344 091B 390F 		andlw	0x0F	;0 .. 15 only
00345 091C 00F8 		movwf	Param78	;Servo Number
00346 091D 35F8 		lslf	Param78,F	;x2
00347 091E 0016 		moviw	FSR1++
00348 091F 00F9 		movwf	Param79
00349 0920 0016 		moviw	FSR1++
00350 0921 00FA 		movwf	Param7A
00351 0922 		LOADFSR1	MaxTime,Param78
00351 0922 3060      M		movlw	low MaxTime		movlw 	low ADDRESS 	; load address
00351 0923 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00351 0924 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00351 0925 0187      M		clrf	FSR1H		clrf	FSR1H
00351 0926 3021      M		movlw	high MaxTime		movlw	high ADDRESS
00351 0927 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00352 0928 2893 		goto	Cmd_SetWord7879
00353 0929 	;
00354 0929 	;---kCmd_GetMax_uS-----------------
00355 0929 	; Get ServoMax_uS
00356 0929 0016 	Cmd_GetMax_uS	moviw	FSR1++
00357 092A 390F 		andlw	0x0F	;0 .. 15 only
00358 092B 00F8 		movwf	Param78	;Servo Number
00359 092C 35F8 		lslf	Param78,F	;x2
00360 092D 		LOADFSR1	MaxTime,Param78
00360 092D 3060      M		movlw	low MaxTime		movlw 	low ADDRESS 	; load address
00360 092E 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00360 092F 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00360 0930 0187      M		clrf	FSR1H		clrf	FSR1H
00360 0931 3021      M		movlw	high MaxTime		movlw	high ADDRESS
00360 0932 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00361 0933 28A2 		goto	Cmd_GetWord
00362 0934 	;
00363 0934 	;---kCmd_SetSeqByte-----------------
00364 0934 0016 	Cmd_SetSeqByte	moviw	FSR1++
00365 0935 397F 		andlw	0x7F	;00 .. 7F only
00366 0936 00F8 		movwf	Param78	;Address
00367 0937 0016 		moviw	FSR1++
00368 0938 00F9 		movwf	Param79	;Data
00369 0939 		LOADFSR1	SequencerData,Param78
00369 0939 3000      M		movlw	low SequencerData		movlw 	low ADDRESS 	; load address
00369 093A 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00369 093B 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00369 093C 0187      M		clrf	FSR1H		clrf	FSR1H
00369 093D 3022      M		movlw	high SequencerData		movlw	high ADDRESS
00369 093E 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00370 093F 28B2 		goto	Cmd_SetByte79
00371 0940 	;
00372 0940 	;---kCmd_GetSeqByte-----------------
00373 0940 0016 	Cmd_GetSeqByte	moviw	FSR1++
00374 0941 397F 		andlw	0x7F	;00 .. 7F only
00375 0942 00F8 		movwf	Param78	;Address
00376 0943 		LOADFSR1	SequencerData,Param78
00376 0943 3000      M		movlw	low SequencerData		movlw 	low ADDRESS 	; load address
00376 0944 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00376 0945 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00376 0946 0187      M		clrf	FSR1H		clrf	FSR1H
00376 0947 3022      M		movlw	high SequencerData		movlw	high ADDRESS
00376 0948 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00377 0949 28BE 		goto	Cmd_GetByte
00378 094A 	;
00379 094A 	;---kCmd_GetCurSpeed----------------	+1 Data (ServoNum) return ServoCurSpeed
00380 094A 0016 	Cmd_GetCurSpeed	moviw	FSR1++
00381 094B 390F 		andlw	0x0F	;0 .. 15 only
00382 094C 00F8 		movwf	Param78	;Servo Number
00383 094D 		LOADFSR1	ServoCurSpeed,Param78
00383 094D 3010      M		movlw	low ServoCurSpeed		movlw 	low ADDRESS 	; load address
00383 094E 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00383 094F 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00383 0950 0187      M		clrf	FSR1H		clrf	FSR1H
00383 0951 3021      M		movlw	high ServoCurSpeed		movlw	high ADDRESS
00383 0952 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00384 0953 28BE 		goto	Cmd_GetByte
00385 0954 	;
00386 0954 	;---kCmd_GetCurPos------------------	+1 Data (ServoNum) Return SigOutTime
00387 0954 0016 	Cmd_GetCurPos	moviw	FSR1++
00388 0955 390F 		andlw	0x0F	;0 .. 15 only
00389 0956 00F8 		movwf	Param78	;Servo Number
00390 0957 35F8 		lslf	Param78,F	;x2
00391 0958 		LOADFSR1	SigOutTime,Param78
00391 0958 3090      M		movlw	low SigOutTime		movlw 	low ADDRESS 	; load address
00391 0959 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00391 095A 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00391 095B 0187      M		clrf	FSR1H		clrf	FSR1H
00391 095C 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00391 095D 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00392 095E 28A2 		goto	Cmd_GetWord
00393 095F 	;
00394 095F 	;---kCmd_GetInPosition---------------
00395 095F 0016 	Cmd_GetInPosition	moviw	FSR1++
00396 0960 390F 		andlw	0x0F	;0 .. 15 only
00397 0961 00F8 		movwf	Param78	;Servo Number
00398 0962 3907 		andlw	0x07	;2 servos per ServoFlags byte
00399 0963 		LOADFSR1W	ServoFlags
00399 0963 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00399 0964 0086      M		movwf	FSR1L		movwf 	FSR1L
00399 0965 0187      M		clrf	FSR1H		clrf	FSR1H
00399 0966 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00399 0967 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
SimpleServo16PS.asm                                                   Page: 37
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00400 0968 19F8 		BTFSC	Param78,3
00401 0969 3203 		bra	Cmd_GetInPosition_1
00402 096A 1881 		btfsc	INDF1,InPositionFlag0_7 ;Is in position?
00403 096B 1400 		bsf	INDF0,0	; Yes
00404 096C 2800 		goto	RS232_Send_S0
00405 096D 	;
00406 096D 1A81 	Cmd_GetInPosition_1	btfsc	INDF1,InPositionFlag8_15 ;Is in position?
00407 096E 1400 		bsf	INDF0,0	; Yes
00408 096F 2800 		goto	RS232_Send_S0
00409 0970 	;
00410 0970 	;---kCmd_SaveParams-----------------
00411 0970 	Cmd_SaveParams	mLongCall	SaveParams
00411 0970 3180      M		movlp	SaveParams	                       movlp                  Destination
00411 0971 205C      M		call	SaveParams	                       call                   Destination
00411 0972 3189      M		movlp	$	                       movlp                  $
00412 0973 		mLongCall	ServoParamsToEEProm
00412 0973 3183      M		movlp	ServoParamsToEEProm	                       movlp                  Destination
00412 0974 23ED      M		call	ServoParamsToEEProm	                       call                   Destination
00412 0975 3189      M		movlp	$	                       movlp                  $
00413 0976 29C5 		goto	TX_ACK
00414 0977 	;
00415 0977 	;---kCmd_RestoreParams--------------
00416 0977 	Cmd_RestoreParams	mLongCall	CopyToRam
00416 0977 3180      M		movlp	CopyToRam	                       movlp                  Destination
00416 0978 204F      M		call	CopyToRam	                       call                   Destination
00416 0979 3189      M		movlp	$	                       movlp                  $
00417 097A 		mLongCall	EEPromToServoParams
00417 097A 3183      M		movlp	EEPromToServoParams	                       movlp                  Destination
00417 097B 23CD      M		call	EEPromToServoParams	                       call                   Destination
00417 097C 3189      M		movlp	$	                       movlp                  $
00418 097D 29C5 		goto	TX_ACK
00419 097E 	;
00420 097E 	;---kCmd_SaveSequencerData----------	;Save Sequencer data to EEPROM, return ACK
00421 097E 	Cmd_SaveSequencerData	mLongCall	SequencerToEEProm
00421 097E 3184      M		movlp	SequencerToEEProm	                       movlp                  Destination
00421 097F 2404      M		call	SequencerToEEProm	                       call                   Destination
00421 0980 3189      M		movlp	$	                       movlp                  $
00422 0981 29C5 		goto	TX_ACK
00423 0982 	;	
00424 0982 	;---kCmd_LoadSequencerData----------	;Load Sequencer from EEPROM, return ACK
00425 0982 	Cmd_LoadSequencerData	mLongCall	EEPromToSequencer
00425 0982 3183      M		movlp	EEPromToSequencer	                       movlp                  Destination
00425 0983 23E3      M		call	EEPromToSequencer	                       call                   Destination
00425 0984 3189      M		movlp	$	                       movlp                  $
00426 0985 29C5 		goto	TX_ACK
00427 0986 	;
00428 0986 	;---kCmd_GetStatus----------------
00429 0986 0831 	Cmd_GetStatus	movf	ssStatus,W
00430 0987 001A 		movwi	FSR0++
00431 0988 0832 		movf	ssStatus+1,W
00432 0989 001A 		movwi	FSR0++
00433 098A 0833 		movf	ssStatus+2,W
00434 098B 001A 		movwi	FSR0++
00435 098C 0834 		movf	ssStatus+3,W
00436 098D 001A 		movwi	FSR0++
00437 098E 	;reset flags
00438 098E 11B1 		bcf	ssRX_Timeout
00439 098F 	;
00440 098F 01B2 		clrf	ssStatus+1
00441 0990 	;	
00442 0990 2800 		goto	RS232_Send_S0
00443 0991 	;
00444 0991 	;---kCmd_RunBootloader--------------
00445 0991 30FF 	Cmd_RunBootloader	movlw	0xFF
00446 0992 00A5 		movwf	EEDataTemp
00447 0993 		mLongCall	EEWriteW	;Write EEPROM address in W
00447 0993 3180      M		movlp	EEWriteW	                       movlp                  Destination
00447 0994 20A3      M		call	EEWriteW	                       call                   Destination
00447 0995 3189      M		movlp	$	                       movlp                  $
00448 0996 0001 		reset
00449 0997 	;
00450 0997 	;---kCmd_SequencerStart-----------
00451 0997 0025 	Cmd_SequencerStart	movlb	5	;Bank 5
00452 0998 1465 		bsf	SequencerFlags,SeqActive	
00453 0999 29C5 		goto	TX_ACK
00454 099A 	;
00455 099A 	;---kCmd_SetMasterAddr------------
00456 099A 0016 	Cmd_SetMasterAddr	moviw	FSR1++
00457 099B 00B8 		movwf	RS232_MasterAddr
00458 099C 		mLongCall	SaveParams
00458 099C 3180      M		movlp	SaveParams	                       movlp                  Destination
00458 099D 205C      M		call	SaveParams	                       call                   Destination
00458 099E 3189      M		movlp	$	                       movlp                  $
00459 099F 2800 		goto	RS232_Send_S0
00460 09A0 	;
00461 09A0 	;---kCmd_SetSlaveAddr-------------
00462 09A0 0016 	Cmd_SetSlaveAddr	moviw	FSR1++
00463 09A1 00B9 		movwf	RS232_SlaveAddr
00464 09A2 		mLongCall	SaveParams
00464 09A2 3180      M		movlp	SaveParams	                       movlp                  Destination
00464 09A3 205C      M		call	SaveParams	                       call                   Destination
00464 09A4 3189      M		movlp	$	                       movlp                  $
00465 09A5 2800 		goto	RS232_Send_S0
00466 09A6 	;
00467 09A6 	;---kCmd_SendIDString------------
00468 09A6 01F9 	Cmd_SendIDString	clrf	Param79
00469 09A7 0879 	Cmd_SendIDString_L1	movf	Param79,W
00470 09A8 21AF 		call	IDString
00471 09A9 3800 		iorlw	0x00
SimpleServo16PS.asm                                                   Page: 38
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00472 09AA 		SKPNZ
00472 09AA 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00473 09AB 0008 		return
00474 09AC 21C6 		call	StoreSerOut_S0
00475 09AD 0AF9 		incf	Param79,F
00476 09AE 33F8 		bra	Cmd_SendIDString_L1
00477 09AF 	;
00478 09AF 000B 	IDString	brw
00479 09B0 3444 		retlw	'D'
00480 09B1 344D 		retlw	'M'
00481 09B2 3446 		retlw	'F'
00482 09B3 3445 		retlw	'E'
00483 09B4 3420 		retlw	' '
00484 09B5 3453 		retlw	'S'
00485 09B6 3453 		retlw	'S'
00486 09B7 3443 		retlw	'C'
00487 09B8 3431 		retlw	'1'
00488 09B9 3436 		retlw	'6'
00489 09BA 3450 		retlw	'P'
00490 09BB 3453 		retlw	'S'
00491 09BC 3420 		retlw	' '
00492 09BD 3476 		retlw	'v'
00493 09BE 3431 		retlw	'1'
00494 09BF 342E 		retlw	'.'
00495 09C0 3430 		retlw	'0'
00496 09C1 3420 		retlw	' '
00497 09C2 340A 		retlw	'\n'
00498 09C3 3400 		retlw	0x00
00499 09C4 	;
00500 09C4 	;--------------------------------
00501 09C4 0008 		return
00502 09C5 	;
00503 09C5 30FF 	TX_ACK	movlw	0xFF
00504 09C6 	StoreSerOut_S0	mLongCall	StoreSerOut
00504 09C6 3181      M		movlp	StoreSerOut	                       movlp                  Destination
00504 09C7 2103      M		call	StoreSerOut	                       call                   Destination
00504 09C8 3189      M		movlp	$	                       movlp                  $
00505 09C9 0008 		return
00506 09CA 	;
00507 09CA 	;=========================================================================================
00508 09CA 	;=========================================================================================
00570 09CA 		include <ssInit.inc>
00001 09CA 	;=========================================================================================
00002 09CA 	; call once
00003 09CA 	;=========================================================================================
00004 09CA 	;
00005 09CA 0021 	InitializeIO	MOVLB	0x01	; select bank 1
00006 09CB 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00007 09CC 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00008 09CD 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00009 09CE 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00010 09CF 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00011 09D0 1515 		bsf	OPTION_REG,PS2
00012 09D1 	;
00013 09D1 0021 		MOVLB	0x01	; bank 1
00014 09D2 30F0 		MOVLW	OSCCON_Value
00015 09D3 0099 		MOVWF	OSCCON
00016 09D4 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00017 09D5 0097 		movwf	WDTCON
00018 09D6 	;
00019 09D6 0024 		movlb	4	; bank 4
00020 09D7 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00021 09D8 	;
00022 09D8 0023 		MOVLB	ANSELA	; bank 3
00023 09D9 3000 		movlw	ANSELA_Val
00024 09DA 008C 		movwf	ANSELA
00025 09DB 3000 		movlw	ANSELB_Val
00026 09DC 008D 		movwf	ANSELB
00027 09DD 	;
00028 09DD 	;Setup T2 for 100/s
00029 09DD 0020 		movlb	0	; bank 0
00030 09DE 304F 		MOVLW	T2CON_Value
00031 09DF 009C 		MOVWF	T2CON
00032 09E0 307D 		MOVLW	PR2_Value
00033 09E1 009B 		MOVWF	PR2
00034 09E2 0021 		movlb	1	; bank 1
00035 09E3 1491 		bsf	PIE1,TMR2IE	; enable Timer 2 interupt
00036 09E4 	;
00037 09E4 	; setup timer 1 for 0.5uS/count
00038 09E4 	;
00039 09E4 0020 		MOVLB	0x00	; bank 0
00040 09E5 3021 		MOVLW	T1CON_Val
00041 09E6 0098 		MOVWF	T1CON
00042 09E7 1399 		bcf	T1GCON,TMR1GE	;always count
00043 09E8 	;	
00044 09E8 	; clear memory to zero
00045 09E8 		mLongCall	ClearRam
00045 09E8 3180      M		movlp	ClearRam	                       movlp                  Destination
00045 09E9 2030      M		call	ClearRam	                       call                   Destination
00045 09EA 3189      M		movlp	$	                       movlp                  $
00046 09EB 0064 		CLRWDT
00047 09EC 		mLongCall	CopyToRam
00047 09EC 3180      M		movlp	CopyToRam	                       movlp                  Destination
00047 09ED 204F      M		call	CopyToRam	                       call                   Destination
00047 09EE 3189      M		movlp	$	                       movlp                  $
00048 09EF 	;
00049 09EF 	;
00050 09EF 	; Setup CCP1 & CCP2
00051 09EF 0022 		MOVLB	0x02	; bank 2
SimpleServo16PS.asm                                                   Page: 39
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00052 09F0 159D 		BSF	APFCON0,CCP2SEL
00053 09F1 	;
00054 09F1 0020 		MOVLB	0x00	;Bank 0
00055 09F2 	; setup data ports
00056 09F2 3004 		movlw	PortBValue
00057 09F3 008D 		movwf	PORTB	;init port B
00058 09F4 3018 		movlw	PortAValue
00059 09F5 008C 		movwf	PORTA
00060 09F6 0021 		MOVLB	0x01	; bank 1
00061 09F7 3060 		movlw	PortADDRBits
00062 09F8 008C 		movwf	TRISA
00063 09F9 30F7 		movlw	PortBDDRBits	;setup for programer
00064 09FA 008D 		movwf	TRISB
00065 09FB 	;
00066 09FB 		if useRS232
00067 09FB 	; setup serial I/O
00068 09FB 0023  a		MOVLB	BAUDCON	;banksel
00067 09FC 		BANKSEL	BAUDCON	; bank 3
00069 09FC 3008 		movlw	BAUDCON_Value
00070 09FD 009F 		movwf	BAUDCON
00071 09FE 30CF 		MOVLW	low BaudRate
00072 09FF 009B 		MOVWF	SPBRGL
00073 0A00 3000 		MOVLW	high BaudRate
00074 0A01 009C 		MOVWF	SPBRGH
00075 0A02 3024 		MOVLW	TXSTA_Value
00076 0A03 009E 		MOVWF	TXSTA
00077 0A04 3090 		MOVLW	RCSTA_Value
00078 0A05 009D 		MOVWF	RCSTA
00079 0A06 0021 		movlb	0x01	; bank 1
00080 0A07 1691 		BSF	PIE1,RCIE	; Serial Receive interupt
00081 0A08 0020 		movlb	0x00	; bank 0
00082 0A09 	;
00083 0A09 		endif
00084 0A09 	;
00085 0A09 0064 		CLRWDT
00086 0A0A 	;-----------------------
00087 0A0A 	;
00088 0A0A 0020 		MOVLB	0x00
00089 0A0B 3064 		MOVLW	LEDTIME
00090 0A0C 00A0 		MOVWF	SysLED_Time
00091 0A0D 3001 		movlw	0x01
00092 0A0E 00A3 		movwf	SysLED_Count	;start blinking right away
00093 0A0F 3064 		movlw	.100
00094 0A10 00AC 		movwf	Timer4Lo	;ignor buttons for 1st second
00095 0A11 	;
00096 0A11 	;
00097 0A11 	;
00098 0A11 0064 		CLRWDT
00099 0A12 	;
00100 0A12 170B 		bsf	INTCON,PEIE	; enable periferal interupts
00101 0A13 178B 		bsf	INTCON,GIE	; enable interupts
00102 0A14 	;
00103 0A14 0008 		return
00104 0A15 	;=============================================================
00105 0A15 	;=============================================================
00571 0A15 	;
00572 0A15 		org BootLoaderStart
00573 1E00 		include <BootLoader1847.inc>
00001 1E00 	;************************************************
00002 1E00 	; BootLoader for PIC16F1847
00003 1E00 	; filename: Bootloader1847.inc
00004 1E00 	; Created: 3/21/2019
00005 1E00 	; Revision: 1.0a2 3/26/2020
00006 1E00 	;************************************************
00007 1E00 	; History
00008 1E00 	; 1.0a2 3/26/2020      Bug Fixes.
00009 1E00 	; 1.0a1 4/7/2019	First working version.
00010 1E00 	; 1.0d1 3/21/2019	first code
00011 1E00 	;************************************************
00012 1E00 	; Notes:
00013 1E00 	;
00014 1E00 	; WDT is not suported.
00015 1E00 	;
00016 1E00 	;  Does not program data EEProm, or other than prog mem 0..BootLoaderStart-1
00017 1E00 	;
00018 1E00 	; Must be the last thing in prog mem, will not overwrite itself or anything after it.
00019 1E00 	;
00020 1E00 	;BootLoaderStart	EQU	0x1E00
00021 1E00 	;	org BootLoaderStart
00022 1E00 	;	include <Bootloader1847.inc>
00023 1E00 	;
00024 1E00 	;  Reset vector:
00025 1E00 	;  	movlp	high BootLoaderStart
00026 1E00 	;    	goto	BootLoaderStart
00027 1E00 	;  ProgStartVector	CLRF	PCLATH
00028 1E00 	;	goto	Start
00029 1E00 	;
00030 1E00 	;  DataEEProm (0xFF) = 0xFF = run bootloader
00031 1E00 	;
00032 1E00 	; What happens next:
00033 1E00 	;  If Data EEProm address (0xFF) <> 0xFF then goto ProgStartVector
00034 1E00 	;  Setup  UART for 38.4KBaud
00035 1E00 	;  Parse incoming text as .hex file
00036 1E00 	;   if program memory address > 0 and < BootLoader then
00037 1E00 	;    read block from prog mem
00038 1E00 	;    if compare blocks then
00039 1E00 	;      if prog mem is not blank then erase block
00040 1E00 	;    write block
00041 1E00 	;
SimpleServo16PS.asm                                                   Page: 40
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00042 1E00 	;  DataEEProm (0xFF) = 0x00
00043 1E00 	;
00044 1E00 	;  reset
00045 1E00 	;************************************************
00046 1E00 	; .hex
00047 1E00 	;:020000040000FA 
00048 1E00 	;       ^^^^^^ Set high word of address to 0x0000
00049 1E00 	;:100010005A23582356235423422021000C16200033
00050 1E00 	;:100020003A100C1E3A14A10B053221000C122000CC
00051 1E00 	;^ Start code                             ^^ Checksum
00052 1E00 	; ^^ Bytes of data (0x10)
00053 1E00 	;   ^^^^ Address low word (0x0020)
00054 1E00 	;       ^^ Record type 0x00 = Data
00055 1E00 	;         ^^^^ LSB MSB of data for Addr / 2
00056 1E00 	;                                         
00057 1E00 	; Checksum is 2's complement of all other bytes added together
00058 1E00 	; Valid address range 0000 0000 .. 0000 3BFE (bootloader is at 0000 3C00 .. 0000 3FFF, 512 words)
00059 1E00 	;************************************************
00060 1E00 	;
00061 1E00 	;
00062 1E00 		cblock 0x20
00063 1E00 0020 		PROG_ADDR_LO                                  ;word address PC
00064 1E00 0021 		PROG_ADDR_HI                                  ; high 7 bits of PC
00065 1E00 0022 		ProgWordCount                                 ;Words in SourceBuffer
00066 1E00 		
00067 1E00 0023 		IH_Addr_Lo:2		;
00068 1E00 0025 		IH_Addr_Hi:2		;extended linear address, alway 0x0000 for Prog mem
00069 1E00 0027 		IH_Bytes
00070 1E00 0028 		IH_ByteCount
00071 1E00 0029 		IH_Type		;Record Type 0..5
00072 1E00 002A 		IH_State
00073 1E00 002B 		IH_TempVal
00074 1E00 002C 		IH_Flags
00075 1E00 002D 		ChkSum
00076 1E00 		endc
00077 1E00 	;
00078 1E00 002C 	#Define	MSN_Done	IH_Flags,0	;Most Significant Nibble
00079 1E00 002C 	#Define	DataInBuffer	IH_Flags,1             ;SourceBuffer has data
00080 1E00 	;
00081 1E00 	;IH_Type: Intel Hex Types
00082 1E00 0000 	IHT_Data	EQU	0x00
00083 1E00 0001 	IHT_End	EQU	0x01	;ie :00000001FF
00084 1E00 0002 	IHT_XSA	EQU	0x02	;extended segment address, not supported
00085 1E00 0003 	IHT_SSA	EQU	0x03	;start segment address, not supported
00086 1E00 0004 	IHT_HighAddr	EQU	0x04	;extended linear address, :02000004FFFFFC
00087 1E00 0005 	IHT_SLA	EQU	0x05	;start linear address, not supported, :04000005000000CD2A
00088 1E00 	;
00089 1E00 	;IH_State values
00090 1E00 0000 	IHS_WaitForColon	EQU	0x00
00091 1E00 0001 	IHS_Length	EQU	0x01
00092 1E00 0002 	IHS_AddrMSB	EQU	0x02
00093 1E00 0003 	IHS_AddrLSB	EQU	0x03
00094 1E00 0004 	IHS_DataType	EQU	0x04
00095 1E00 0005 	IHS_Data	EQU	0x05
00096 1E00 0006 	IHS_CSum	EQU	0x06	;waiting for check sum
00097 1E00 	;
00098 1E00 002B 	IH_ErrorBadLen	EQU	'+'	;>64 Too big
00099 1E00 002D 	IH_ErrorBadCSum	EQU	'-'	;Checksum didn't match
00100 1E00 003D 	IH_ErrorBadType        EQU                    '='                    ;IH_Type not recognized 
00101 1E00 002A 	IH_Ack	EQU	'*'	;We got a good Intel Hex line
00102 1E00 	;
00103 1E00 0040 	BlockSize	EQU	0x40
00104 1E00 0020 	BlockWords	EQU	BlockSize/2	;0x20
00105 1E00 00E0 	AddressMask	EQU	0xE0
00106 1E00 	;
00107 1E00 	;Contiguous ram 0x2000..0x23EF
00108 1E00 		cblock 0x2100		;0x0100 after start of ram
00109 1E00 2100 		SourceBuffer:BlockSize
00110 1E00 2140 		DestBuffer:BlockSize
00111 1E00 2180 		SerialBuffer:BlockSize
00112 1E00 		endc
00113 1E00 	;
00114 1E00 	;=========================================================================================
00115 1E00 	;
00116 1E00 	; Entry: DataEEProm255
00117 1E00 	; Exit: goto ProgStartVector
00118 1E00 	; Calls: none
00119 1E00 	; RAM used: ALL
00120 1E00 	;
00121 1E00 279E 	BootLoader	call	InitializeBLIO	;returns w/ bank 0 selected
00122 1E01 	;
00123 1E01 2704 		call	ReadEEData	;Get Data from EEPROM (0xFF) 
00124 1E02 3AFF 		xorlw	0xFF
00125 1E03 		SKPZ		;0xFF xor 0xFF = 0
00125 1E03 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00126 1E04 320B 		bra	BootLoader_End
00127 1E05 	;
00128 1E05 	; Bootloader is active send "**"
00129 1E05 302A 		movlw	IH_Ack
00130 1E06 26FE 		call	SendChar
00131 1E07 302A 		movlw	IH_Ack
00132 1E08 26FE 		call	SendChar
00133 1E09 	;
00134 1E09 	;Initialize
00135 1E09 01A0 		clrf	PROG_ADDR_LO
00136 1E0A 01A1 		clrf	PROG_ADDR_HI
00137 1E0B 01A5 		clrf	IH_Addr_Hi
00138 1E0C 01A6 		clrf	IH_Addr_Hi+1
00139 1E0D 2746 		call	EraseSourceBuffer
SimpleServo16PS.asm                                                   Page: 41
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00140 1E0E 	;
00141 1E0E 2612 		call	BL_Parse
00142 1E0F 	;	
00143 1E0F 	;if successful then clear EEProm(255)
00144 1E0F 270D 		call	WriteEEData
00145 1E10 	;
00146 1E10 3180 	BootLoader_End	movlp	0x00
00147 1E11 2802 		goto	ProgStartVector
00148 1E12 	;
00149 1E12 	;=========================================================================================
00150 1E12 	; Parse incoming data and do stuff
00151 1E12 	;
00152 1E12 10AC 	BL_Parse	bcf	DataInBuffer
00153 1E13 01AA 	BL_ParseNextLine	clrf	IH_State
00154 1E14 01A8 		clrf	IH_ByteCount
00155 1E15 01AD 		clrf	ChkSum
00156 1E16 26DE 		call                   FSR0_SerialBuffer
00157 1E17 	;
00158 1E17 102C 	BLP_L1	bcf	MSN_Done
00159 1E18 	;
00160 1E18 26ED 	BLP_L2	call	GetChar
00161 1E19 00F8 		movwf	Param78
00162 1E1A 303A 		movlw	':'
00163 1E1B 0278 		subwf	Param78,W
00164 1E1C 		SKPZ		;Char=":"
00164 1E1C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00165 1E1D 3203 		bra	BLP_TestNum	; No
00166 1E1E 	; It's a ":" so set state=1, wait for length
00167 1E1E 3001 		movlw	IHS_Length
00168 1E1F 00AA 		movwf	IH_State
00169 1E20 33F6 		bra	BLP_L1
00170 1E21 	;
00171 1E21 08AA 	BLP_TestNum	movf	IH_State,F
00172 1E22 		SKPNZ		;Are we waiting for a number?
00172 1E22 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00173 1E23 33F4 		bra	BLP_L2	; No
00174 1E24 	;
00175 1E24 3030 		movlw	0x30	;'0'
00176 1E25 0278 		subwf	Param78,W
00177 1E26 		SKPNB		;Char>="0"?
00177 1E26 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00178 1E27 33EB 		bra	BL_ParseNextLine	; No start over
00179 1E28 303A 		movlw	0x3A	;':'
00180 1E29 0278 		subwf	Param78,W
00181 1E2A 		SKPNB                                         ;>"9"?
00181 1E2A 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00182 1E2B 320A 		bra	BLP_TestNum_1          ; No, it's 0..9
00183 1E2C 3041 		movlw	0x41	;'A'
00184 1E2D 0278 		subwf	Param78,W
00185 1E2E 		SKPNB		;Char>="A"?
00185 1E2E 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00186 1E2F 33E3 		bra	BL_ParseNextLine	; No start over
00187 1E30 3047 		movlw	0x47	;'G'
00188 1E31 0278 		subwf	Param78,W
00189 1E32 		SKPB		;Char<"G"
00189 1E32 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00190 1E33 33DF 		bra	BL_ParseNextLine	; No, start over
00191 1E34 3007 		movlw	0x07	; Yes, A..F
00192 1E35 02F8 		subwf	Param78,F              ;  make "A" "0"+.10
00193 1E36 	;
00194 1E36 3030 	BLP_TestNum_1	movlw	0x30
00195 1E37 02F8 		subwf	Param78,F	;'0' >> 0x00
00196 1E38 182C 		btfsc	MSN_Done
00197 1E39 3204 		bra	BLP_TestNum_2	;do low nibble
00198 1E3A 0E78 		swapf	Param78,W
00199 1E3B 00AB 		movwf	IH_TempVal
00200 1E3C 142C 		bsf	MSN_Done
00201 1E3D 33DA 		bra	BLP_L2                 ;go get the next char
00202 1E3E 	;
00203 1E3E 0878 	BLP_TestNum_2	movf	Param78,W
00204 1E3F 07AB 		addwf	IH_TempVal,F           ;add the low nibble
00205 1E40 	;
00206 1E40 	; We have a number in IH_TempVal
00207 1E40 082A 	                       movf                   IH_State,W
00208 1E41 3907 	                       andlw                  0x07
00209 1E42 000B 	                       brw
00210 1E43 33CF 	                       bra                    BL_ParseNextLine       ;IHS_WaitForColon already handled
00211 1E44 3206 	                       bra                    BLP_IHS_Length         ;Waiting for length byte
00212 1E45 3211 	                       bra                    BLP_IHS_AddrMSB        ;IHS_AddrMSB
00213 1E46 3214 	                       bra                    BLP_IHS_AddrLSB        ;IHS_AddrLSB
00214 1E47 3217 	                       bra                    BLP_IHS_DataType       ;IHS_DataType
00215 1E48 321D 	                       bra                    BLP_IHS_Data           ;IHS_Data
00216 1E49 3225 	                       bra                    BLP_IHS_CSum           ;IHS_CSum
00217 1E4A 33C8 	                       bra                    BL_ParseNextLine       ;oops
00218 1E4B 	;	
00219 1E4B 3041 	BLP_IHS_Length	movlw	.65	; Yes, is it in range 0..64?
00220 1E4C 022B 		subwf	IH_TempVal,W
00221 1E4D 		SKPNB		;<=64?
00221 1E4D 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00222 1E4E 3203 		bra	BLP_SaveIH_Length
00223 1E4F 	;
00224 1E4F 302B 		movlw	IH_ErrorBadLen
00225 1E50 26FE 		call	SendChar
00226 1E51 2E13 		goto	BL_ParseNextLine
00227 1E52 	;
00228 1E52 082B 	BLP_SaveIH_Length	movf	IH_TempVal,W
00229 1E53 00A7 		movwf	IH_Bytes
00230 1E54 07AD 		addwf	ChkSum,F
00231 1E55 0AAA 	BLP_NextState	incf	IH_State,F
SimpleServo16PS.asm                                                   Page: 42
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00232 1E56 2E17 		goto	BLP_L1
00233 1E57 	;
00234 1E57 082B 	BLP_IHS_AddrMSB	movf	IH_TempVal,W
00235 1E58 00A4 		movwf	IH_Addr_Lo+1
00236 1E59 07AD 		addwf	ChkSum,F
00237 1E5A 33FA 		bra	BLP_NextState
00238 1E5B 	;
00239 1E5B 082B 	BLP_IHS_AddrLSB	movf	IH_TempVal,W
00240 1E5C 00A3 		movwf	IH_Addr_Lo
00241 1E5D 07AD 		addwf	ChkSum,F
00242 1E5E 33F6 		bra	BLP_NextState
00243 1E5F 	;
00244 1E5F 082B 	BLP_IHS_DataType	movf	IH_TempVal,W
00245 1E60 00A9 		movwf	IH_Type
00246 1E61 07AD 		addwf	ChkSum,F
00247 1E62 	; Ship IHS_Data if length = 0
00248 1E62 08A7 		movf	IH_Bytes,F
00249 1E63 		SKPNZ		;Expecting zero length data?
00249 1E63 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00250 1E64 0AAA 		incf	IH_State,F	; Yes
00251 1E65 33EF 		bra	BLP_NextState
00252 1E66 	;
00253 1E66 082B 	BLP_IHS_Data	movf	IH_TempVal,W
00254 1E67 001A 		movwi	FSR0++
00255 1E68 07AD 		addwf	ChkSum,F
00256 1E69 0AA8 		incf	IH_ByteCount,F
00257 1E6A 	; if IH_ByteCount=IH_Bytes then next state
00258 1E6A 0828 		movf	IH_ByteCount,W
00259 1E6B 0227 		subwf	IH_Bytes,W
00260 1E6C 		SKPZ		;Done with data?
00260 1E6C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00261 1E6D 2E17 		goto	BLP_L1	; No
00262 1E6E 33E6 		bra	BLP_NextState	; Yes
00263 1E6F 	;
00264 1E6F 	BLP_IHS_CSum:
00265 1E6F 	; get 2's comp
00266 1E6F 01F8 		clrf	Param78
00267 1E70 082D 		movf	ChkSum,W
00268 1E71 0278 		subwf	Param78,W
00269 1E72 022B 		subwf	IH_TempVal,W
00270 1E73 		SKPNZ		;Checksum matches?
00270 1E73 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00271 1E74 3203 		bra	BLP_Validate           ; Yes
00272 1E75 	;
00273 1E75 302D 		movlw	IH_ErrorBadCSum
00274 1E76 26FE 		call	SendChar
00275 1E77 2E13 		goto	BL_ParseNextLine
00276 1E78 	;
00277 1E78 	;===================
00278 1E78 	; We have received a complete Intel Hex command
00279 1E78 	;
00280 1E78 0829 	BLP_Validate	movf                   IH_Type,W
00281 1E79 39F8 	                       andlw                  0xF8
00282 1E7A 	                       SKPZ
00282 1E7A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00283 1E7B 3218 	                       bra                    BLPV_BadType
00284 1E7C 	;
00285 1E7C 0829 	                       movf                   IH_Type,W
00286 1E7D 000B 	                       brw
00287 1E7E 320B 	                       bra                    BLPV_Data              ;IHT_Data
00288 1E7F 3206 	                       bra                    BLPV_EndCmd            ;IHT_End
00289 1E80 3213 	                       bra                    BLPV_BadType           ;IHT_XSA
00290 1E81 3212 	                       bra                    BLPV_BadType           ;IHT_SSA
00291 1E82 3209 	                       bra                    BLPV_HighAddr          ;IHT_HighAddr
00292 1E83 3210 	                       bra                    BLPV_BadType           ;IHT_SLA
00293 1E84 320F 	                       bra                    BLPV_BadType           ;6
00294 1E85 320E 	                       bra                    BLPV_BadType           ;7
00295 1E86 	;---------------------
00296 1E86 	; handle end command
00297 1E86 18AC 	BLPV_EndCmd	btfsc	DataInBuffer
00298 1E87 26CD 		call	BLP_WriteBuffer
00299 1E88 302A 		movlw	IH_Ack
00300 1E89 2EFE 	                       goto	SendChar
00301 1E8A 	;
00302 1E8A 	;---------------------
00303 1E8A 	; handle data
00304 1E8A 2696 	BLPV_Data	call	BufferIHData           ;Move to source buffer
00305 1E8B 3205 	                       bra                    BLPV_Exit_Ack
00306 1E8C 	;
00307 1E8C 	;---------------------
00308 1E8C 	; handle high address change
00309 1E8C 26DE 	BLPV_HighAddr	call                   FSR0_SerialBuffer
00310 1E8D 0012 		moviw	FSR0++
00311 1E8E 00A6 		movwf	IH_Addr_Hi+1
00312 1E8F 0012 		moviw	FSR0++
00313 1E90 00A5 		movwf	IH_Addr_Hi
00314 1E91 302A 	BLPV_Exit_Ack	movlw	IH_Ack
00315 1E92 26FE 	BLPV_Exit	call	SendChar
00316 1E93 2E13 		goto	BL_ParseNextLine
00317 1E94 	;---------------------
00318 1E94 303D 	BLPV_BadType           movlw                  IH_ErrorBadType
00319 1E95 33FC 	                       bra                    BLPV_Exit
00320 1E96 	;
00321 1E96 	;===========================================
00322 1E96 	; Validate address is in range and move to SourceBuffer
00323 1E96 	;
00324 1E96 	; Entry: DataInBuffer, IH_ByteCount, Data in SerialBuffer, 32bit address IH_Addr_Hi:IH_Addr_Lo
00325 1E96 	; Exit: SourceBuffer, DataInBuffer, ProgWordCount, PROG_ADDR_HI:PROG_ADDR_LO
00326 1E96 	; 
SimpleServo16PS.asm                                                   Page: 43
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00327 1E96 	; check address range, max 32K program words
00328 1E96 0825 	BufferIHData	movf	IH_Addr_Hi,W
00329 1E97 0426 		iorwf	IH_Addr_Hi+1,W
00330 1E98 		SKPZ		;High address = 0x0000 ?
00330 1E98 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00331 1E99 0008 		return		; No, > 64KB or 32K words
00332 1E9A 	;
00333 1E9A 	; convert to words, IH_Addr_Lo = IH_Addr_Lo / 2
00334 1E9A 36A4 		lsrf	IH_Addr_Lo+1,F
00335 1E9B 0CA3 		rrf	IH_Addr_Lo,F
00336 1E9C 301E 		movlw	high BootLoaderStart   ;0x0E
00337 1E9D 0224 		subwf	IH_Addr_Lo+1,W
00338 1E9E 		SKPB		;BootLoaderStart > IH_Addr_Lo?
00338 1E9E 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00339 1E9F 0008 		return		; No, don't allow overwrite of bootloader
00340 1EA0 	;
00341 1EA0 1CAC 		btfss	DataInBuffer	;Any old data in the buffer?
00342 1EA1 320D 		bra	BIHD_PutInBuff	; No
00343 1EA2 	;
00344 1EA2 	; Continue filling buffer or flush and add to new buffer?
00345 1EA2 	;
00346 1EA2 0824 		movf	IH_Addr_Lo+1,W
00347 1EA3 0221 		subwf	PROG_ADDR_HI,W
00348 1EA4 		SKPZ		;MSB of Address Matches?
00348 1EA4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00349 1EA5 3208 		bra	BIHD_FlushBuff	; No, write current data to PFM
00350 1EA6 	;
00351 1EA6 30E0 		movlw	AddressMask
00352 1EA7 0520 		andwf	PROG_ADDR_LO,W
00353 1EA8 00F8 		movwf	Param78                ;Param78 = Prog Address LSB & 0xE0
00354 1EA9 30E0 		movlw	AddressMask
00355 1EAA 0523 		andwf	IH_Addr_Lo,W           ;W = IH Word Address LSB & 0xE0
00356 1EAB 0278 		subwf	Param78,W
00357 1EAC 		SKPNZ		;Row Address Matches?
00357 1EAC 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00358 1EAD 320A 		bra	BIHD_PutInBuff_E2	; Yes
00359 1EAE 	;
00360 1EAE 26CD 	BIHD_FlushBuff	call	BLP_WriteBuffer
00361 1EAF 	;
00362 1EAF 	; Entry: IH_Addr_Lo=Word Address
00363 1EAF 	; 
00364 1EAF 0823 	BIHD_PutInBuff	movf	IH_Addr_Lo,W           ;was converted to words
00365 1EB0 39E0 		andlw	AddressMask            ; 0xE0
00366 1EB1 00A0 		movwf	PROG_ADDR_LO
00367 1EB2 0824 		movf	IH_Addr_Lo+1,W
00368 1EB3 00A1 		movwf	PROG_ADDR_HI
00369 1EB4 	; ProgWordCount = 0x1F & IH_Addr_Lo
00370 1EB4 30FF 		movlw	0xFF
00371 1EB5 3AE0 		xorlw	AddressMask	;0x1F
00372 1EB6 0523 		andwf	IH_Addr_Lo,W	;Offset within block
00373 1EB7 00A2 		movwf	ProgWordCount
00374 1EB8 	;
00375 1EB8 26DE 	BIHD_PutInBuff_E2	call                   FSR0_SerialBuffer
00376 1EB9 	;
00377 1EB9 	; FSR1 = SourceBuffer + ProgWordCount * 2
00378 1EB9 3522 		lslf	ProgWordCount,W	;ProgWordCount * 2
00379 1EBA 3E00 		addlw	low SourceBuffer
00380 1EBB 0086 		movwf	FSR1L
00381 1EBC 3021 		movlw	high SourceBuffer
00382 1EBD 0087 		movwf	FSR1H
00383 1EBE 	;
00384 1EBE 	;Param79 = IH_ByteCount
00385 1EBE 0828 		movf	IH_ByteCount,W
00386 1EBF 00F9 		movwf	Param79
00387 1EC0 	;ProgWordCount += IH_ByteCount / 2
00388 1EC0 3628 		lsrf	IH_ByteCount,W	; divide by 2
00389 1EC1 07A2 		addwf	ProgWordCount,F
00390 1EC2 	;
00391 1EC2 0012 	BIHD_PutInBuff_L1	moviw	FSR0++                 ;move SerialBuffer
00392 1EC3 001E 		movwi	FSR1++                 ;to SourceBuffer
00393 1EC4 0BF9 		decfsz	Param79,F
00394 1EC5 33FC 		bra	BIHD_PutInBuff_L1
00395 1EC6 	;
00396 1EC6 14AC 		bsf	DataInBuffer
00397 1EC7 	;
00398 1EC7 3020 		movlw	BlockWords             ;0x20
00399 1EC8 0222 		subwf	ProgWordCount,W        ;W = ProgWordCount - 0x20
00400 1EC9 		SKPNZ		;buffer full?
00400 1EC9 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00401 1ECA 3202 		bra	BLP_WriteBuffer	; Yes, ProgWordCount = 0x20
00402 1ECB 		SKPNB		;Overflow? This should not happen.
00402 1ECB 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00403 1ECC 0008 		return		; No, ProgWordCount < 0x20
00404 1ECD 	;
00405 1ECD 	; fall thru to BLP_WriteBuffer
00406 1ECD 	;=============================================
00407 1ECD 	; Write SourceBuffer to Prog memory
00408 1ECD 	;
00409 1ECD 	; Entry: SourceBuffer, ProgWordCount, PROG_ADDR_HI:PROG_ADDR_LO
00410 1ECD 	;
00411 1ECD 	BLP_WriteBuffer:
00412 1ECD 	; copy old prog mem to DestBuffer
00413 1ECD 26E3 		call                   FSR1_DestBuff
00414 1ECE 2751 		call	ReadProgBlock
00415 1ECF 	;
00416 1ECF 3000 		movlw	low SourceBuffer	;new data
00417 1ED0 0084 		movwf	FSR0L
00418 1ED1 3021 		movlw	high SourceBuffer
00419 1ED2 0085 		movwf	FSR0H	
SimpleServo16PS.asm                                                   Page: 44
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00420 1ED3 26E3 		call                   FSR1_DestBuff          ;old data
00421 1ED4 272C 		call	CompareBlock
00422 1ED5 	;
00423 1ED5 1809 		btfsc	WREG,0	;Matches?
00424 1ED6 3206 		bra	BLP_WriteBuffer_end	; Yes
00425 1ED7 	;	
00426 1ED7 26E3 		call                   FSR1_DestBuff
00427 1ED8 271F 		call	TestErased
00428 1ED9 1C09 		btfss	WREG,0	;Erased?
00429 1EDA 2763 		call	EraseProgBlock	; No, Erase it.
00430 1EDB 	;
00431 1EDB 26E8 		call                   FSR1_SourceBuffer	
00432 1EDC 277A 		call	WriteProgBlock
00433 1EDD 	;
00434 1EDD 2F46 	BLP_WriteBuffer_end	goto	EraseSourceBuffer
00435 1EDE 	;
00436 1EDE 	;---------------------
00437 1EDE 3080 	FSR0_SerialBuffer      movlw	low SerialBuffer
00438 1EDF 0084 		movwf	FSR0L
00439 1EE0 3021 		movlw	high SerialBuffer
00440 1EE1 0085 		movwf	FSR0H
00441 1EE2 0008 		return
00442 1EE3 	;
00443 1EE3 	;---------------------
00444 1EE3 3040 	FSR1_DestBuff          movlw	low DestBuffer
00445 1EE4 0086 		movwf	FSR1L
00446 1EE5 3021 		movlw	high DestBuffer
00447 1EE6 0087 		movwf	FSR1H
00448 1EE7 0008 		return
00449 1EE8 	;
00450 1EE8 	;---------------------
00451 1EE8 3000 	FSR1_SourceBuffer      movlw	low SourceBuffer
00452 1EE9 0086 		movwf	FSR1L
00453 1EEA 3021 		movlw	high SourceBuffer
00454 1EEB 0087 		movwf	FSR1H
00455 1EEC 0008 		return
00456 1EED 	;
00457 1EED 	;==============================================
00458 1EED 	; Get a byte from UART, waits forever
00459 1EED 	;
00460 1EED 	; Entry: none
00461 1EED 	; Exit: W=Char
00462 1EED 	;
00463 1EED 0020 	GetChar	MOVLB	0x00
00464 1EEE 1E91 		BTFSS	PIR1,RCIF	;RX has a byte?
00465 1EEF 33FD 		BRA	GetChar
00466 1EF0 	;
00467 1EF0 0023 		movlb	RCSTA	; bank 3
00468 1EF1 081D 		MOVF	RCSTA,W
00469 1EF2 3906 		ANDLW	0x06
00470 1EF3 		SKPZ		;Frame or Overrun Err?
00470 1EF3 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00471 1EF4 3203 		BRA	GetChar_Err	; yes
00472 1EF5 0819 		MOVF	RCREG,W
00473 1EF6 	;
00474 1EF6 0020 		movlb	0x00	; bank 0
00475 1EF7 	;	goto	SendChar	; tc
00476 1EF7 0008 		RETURN
00477 1EF8 	;
00478 1EF8 0819 	GetChar_Err	MOVF	RCREG,W	;bad byte so drop it
00479 1EF9 121D 		BCF	RCSTA,CREN
00480 1EFA 111D 		BCF	RCSTA,FERR
00481 1EFB 109D 		BCF	RCSTA,OERR
00482 1EFC 161D 		BSF	RCSTA,CREN
00483 1EFD 33EF 		bra	GetChar
00484 1EFE 	;
00485 1EFE 	;==============================================
00486 1EFE 	; Send a byte to UART
00487 1EFE 	;
00488 1EFE 	; Entry: W=Char to send
00489 1EFE 	SendChar:
00490 1EFE 1E11 		BTFSS	PIR1,TXIF	;TX done?
00491 1EFF 33FE 		bra	SendChar
00492 1F00 0023 		movlb	TXREG
00493 1F01 009A 		MOVWF	TXREG
00494 1F02 0020 		MOVLB	0
00495 1F03 0008 		RETURN
00496 1F04 	;	
00497 1F04 	;==============================================
00498 1F04 	; Read EEProm(255)
00499 1F04 	;
00500 1F04 	ReadEEData:	
00501 1F04 0023 		movlb	EEADRL
00502 1F05 30FF 		MOVLW	0xFF
00503 1F06 0091 		MOVWF	EEADRL
00504 1F07 	;
00505 1F07 	;Data Memory
00506 1F07 	;Address to read ;Deselect Config space
00507 1F07 1315 		BCF	EECON1,CFGS
00508 1F08 1395 		BCF	EECON1,EEPGD
00509 1F09 	;Point to DATA memory
00510 1F09 1415 		BSF	EECON1,RD	;EE Read
00511 1F0A 0813 		MOVF	EEDATL,W	;W = EEDATL
00512 1F0B 0020 		movlb	0
00513 1F0C 0008 		return
00514 1F0D 	;
00515 1F0D 	;==============================================
00516 1F0D 	; Clear EEProm(255)
00517 1F0D 	;
SimpleServo16PS.asm                                                   Page: 45
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00518 1F0D 	WriteEEData:
00519 1F0D 0023 		movlb	EEADRL
00520 1F0E 30FF 		MOVLW	0xFF
00521 1F0F 0091 		MOVWF	EEADRL
00522 1F10 3000 		movlw	0x00
00523 1F11 0093 		movwf	EEDATL
00524 1F12 1315 		BCF	EECON1,CFGS	;not config mem
00525 1F13 1395 		BCF	EECON1,EEPGD	;not prog mem
00526 1F14 1515 		BSF	EECON1,WREN
00527 1F15 3055 		movlw	0x55
00528 1F16 0096 		movwf	EECON2
00529 1F17 30AA 		movlw	0xAA
00530 1F18 0096 		movwf	EECON2
00531 1F19 1495 		bsf	EECON1,WR
00532 1F1A 1895 	WriteEEData_L1	btfsc	EECON1,WR
00533 1F1B 33FE 		bra	WriteEEData_L1
00534 1F1C 1115 		bcf	EECON1,WREN
00535 1F1D 0020 		movlb	0
00536 1F1E 0008 		return
00537 1F1F 	;
00538 1F1F 	;==============================================
00539 1F1F 	; Test if block is erased
00540 1F1F 	;
00541 1F1F 	; Entry: FSR1 -> current data
00542 1F1F 	; Exit: W=1 if new = blank else W=0
00543 1F1F 	;
00544 1F1F 3020 	TestErased	movlw	BlockWords
00545 1F20 00F9 		movwf	Param79
00546 1F21 0016 	TestErased_L1	moviw	FSR1++	;LSB
00547 1F22 3CFF 		sublw	0xFF
00548 1F23 		SKPZ		;=0xFF?
00548 1F23 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00549 1F24 3400 		retlw	0x00	; No
00550 1F25 	;
00551 1F25 0016 		moviw	FSR1++	;MSB
00552 1F26 3C3F 		sublw	0x3F
00553 1F27 		SKPZ		;=0x3F?
00553 1F27 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00554 1F28 3400 		retlw	0x00	; No
00555 1F29 	;
00556 1F29 0BF9 		decfsz	Param79,F
00557 1F2A 33F6 		bra	TestErased_L1
00558 1F2B 3401 		retlw	0x01                   ;All words are 0x3FFF
00559 1F2C 	;
00560 1F2C 	;==============================================
00561 1F2C 	; Compare Block
00562 1F2C 	;
00563 1F2C 	; Entry: FSR0 -> new data, FSR1 -> current data
00564 1F2C 	; Exit: W=1 if new = current else W=0
00565 1F2C 	;
00566 1F2C 3020 	CompareBlock	movlw	BlockWords
00567 1F2D 00F9 		movwf	Param79
00568 1F2E 0012 	CompareBlock_L1	moviw	FSR0++	;LSB
00569 1F2F 00F7 		movwf	Param77
00570 1F30 0012 		moviw	FSR0++	;MSB
00571 1F31 00F8 		movwf	Param78
00572 1F32 	; skip?
00573 1F32 3C3F 		sublw	0x3F
00574 1F33 		SKPZ
00574 1F33 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00575 1F34 3206 		bra	CB_NotBlank
00576 1F35 0A77 		incf	Param77,W
00577 1F36 		SKPZ
00577 1F36 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00578 1F37 3203 		bra	CB_NotBlank
00579 1F38 0016 		moviw	FSR1++
00580 1F39 0016 		moviw	FSR1++
00581 1F3A 3208 		bra	CB_Next
00582 1F3B 	;
00583 1F3B 0016 	CB_NotBlank	moviw	FSR1++
00584 1F3C 0277 		subwf	Param77,W
00585 1F3D 		SKPZ		;Matches?
00585 1F3D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00586 1F3E 3400 		retlw	0x00	; No
00587 1F3F 0016 		moviw	FSR1++
00588 1F40 0278 		subwf	Param78,W
00589 1F41 		SKPZ		;Matches?
00589 1F41 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00590 1F42 3400 		retlw	0x00	; No
00591 1F43 	;
00592 1F43 0BF9 	CB_Next	decfsz	Param79,F
00593 1F44 33E9 		bra	CompareBlock_L1
00594 1F45 3401 		retlw	0x01	;It's a match!
00595 1F46 	;
00596 1F46 	;==============================================
00597 1F46 	; Fill SourceBuffer w/ 0x3FFF
00598 1F46 	;
00599 1F46 26E8 	EraseSourceBuffer	call                   FSR1_SourceBuffer
00600 1F47 10AC 	                       bcf	DataInBuffer           ;mark SourceBuffer as empty
00601 1F48 	;
00602 1F48 	; Fall thru to EraseBlock
00603 1F48 	;==============================================
00604 1F48 	; Erase Block (Fill with 0x3FFF)
00605 1F48 	;
00606 1F48 	; Entry: FSR1
00607 1F48 	;
00608 1F48 3020 	EraseBlock	movlw	BlockWords
00609 1F49 00F9 		movwf	Param79
00610 1F4A 30FF 	EraseBlock_L1	movlw	0xFF
SimpleServo16PS.asm                                                   Page: 46
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00611 1F4B 001E 		movwi	FSR1++
00612 1F4C 303F 		movlw	0x3F
00613 1F4D 001E 		movwi	FSR1++
00614 1F4E 0BF9 		decfsz	Param79,F
00615 1F4F 33FA 		bra	EraseBlock_L1
00616 1F50 0008 		return
00617 1F51 	;	
00618 1F51 	;==============================================
00619 1F51 	; Read Program memory block
00620 1F51 	;
00621 1F51 	; Entry: FSR1,PROG_ADDR_HI:PROG_ADDR_LO
00622 1F51 	; Exit: FSR1 changed, 32 words >> (FSR1++)
00623 1F51 	;
00624 1F51 2772 	ReadProgBlock	call	LoadProgAddr
00625 1F52 1315 		BCF	EECON1,CFGS	; Do not select Configuration Space
00626 1F53 1795 		BSF	EECON1,EEPGD	; Select Program Memory
00627 1F54 3020 		movlw	BlockWords	;Block is .32 words
00628 1F55 00F9 		movwf	Param79
00629 1F56 1415 	ReadProgBlock_L1	BSF	EECON1,RD	; Initiate read
00630 1F57 0000 		NOP		; skipped
00631 1F58 0000 		NOP		; do nothing
00632 1F59 0813 		MOVF	EEDATL,W	; Get LSB of word
00633 1F5A 001E 		movwi	FSR1++	; Store in user location
00634 1F5B 0814 		MOVF	EEDATH,W	; Get MSB of word
00635 1F5C 001E 		movwi	FSR1++	; Store in user location
00636 1F5D 0BF9 		decfsz	Param79,F
00637 1F5E 3202 		bra	ReadProgBlock_1
00638 1F5F 0020 		movlb	0
00639 1F60 0008 		return
00640 1F61 	;
00641 1F61 0A91 	ReadProgBlock_1	incf	EEADRL,F
00642 1F62 33F3 		bra	ReadProgBlock_L1
00643 1F63 	;
00644 1F63 	;=====================================================
00645 1F63 	; Erase Program memory block
00646 1F63 	;
00647 1F63 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO
00648 1F63 	;
00649 1F63 2772 	EraseProgBlock	call	LoadProgAddr
00650 1F64 1795 		BSF	EECON1,EEPGD	;Point to program memory
00651 1F65 1315 		BCF	EECON1,CFGS	;Not configuration space
00652 1F66 1615 		BSF	EECON1,FREE	;Specify an erase operation, automaticaly cleared
00653 1F67 1515 		BSF	EECON1,WREN	;Enable writes
00654 1F68 3055 		MOVLW	55h	;Start of required sequence to initiate erase
00655 1F69 0096 		MOVWF	EECON2	;Write 55h
00656 1F6A 30AA 		MOVLW	0AAh
00657 1F6B 0096 		MOVWF	EECON2	;Write AAh
00658 1F6C 1495 		BSF	EECON1,WR	;Set WR bit to begin erase
00659 1F6D 0000 		NOP		;Any instructions here are ignored as processor
00660 1F6E 0000 		NOP		; halts to begin erase sequence
00661 1F6F 				;Processor will stop here and wait for erase complete.
00662 1F6F 				;after erase processor continues with 3rd instruction
00663 1F6F 1115 		BCF	EECON1,WREN	;Disable writes
00664 1F70 0020 		movlb	0
00665 1F71 0008 		return
00666 1F72 	;
00667 1F72 	;=========================================================
00668 1F72 	; Load the program address PROG_ADDR_HI:PROG_ADDR_LO into EEADRH:EEADRL
00669 1F72 	;
00670 1F72 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, bank 0
00671 1F72 	; Exit: bank 16
00672 1F72 	;
00673 1F72 0821 	LoadProgAddr	movf	PROG_ADDR_HI,W
00674 1F73 0023 		movlb	EEADRH	;bank ?
00675 1F74 0092 		MOVWF	EEADRH	; Store MSB of address
00676 1F75 0020 		movlb	0	;bank 0
00677 1F76 0820 		movf	PROG_ADDR_LO,W
00678 1F77 0023 		movlb	EEADRH	;bank ?
00679 1F78 0091 		MOVWF	EEADRL	; Store LSB of address
00680 1F79 0008 		return
00681 1F7A 	;
00682 1F7A 	;==========================================================
00683 1F7A 	; Write Program memory block
00684 1F7A 	;
00685 1F7A 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, FSR1
00686 1F7A 	; Exit: FSR1 changed
00687 1F7A 	; 
00688 1F7A 2772 	WriteProgBlock	call	LoadProgAddr
00689 1F7B 1795 		BSF	EECON1,EEPGD	;Point to program memory
00690 1F7C 1315 		BCF	EECON1,CFGS	;Not configuration space
00691 1F7D 1515 		BSF	EECON1,WREN	;Enable writes
00692 1F7E 1695 		BSF	EECON1,LWLO	;Only Load Write Latches
00693 1F7F 3020 		movlw	BlockWords
00694 1F80 00F9 		movwf	Param79
00695 1F81 	;
00696 1F81 0016 	WriteProgBlock_L1	moviw	FSR1++
00697 1F82 0093 		movwf	EEDATL
00698 1F83 0016 		moviw	FSR1++
00699 1F84 0094 		movwf	EEDATH
00700 1F85 	;
00701 1F85 0811 		movf	EEADRL,W
00702 1F86 3A1F 		xorlw	0x1F
00703 1F87 391F 		andlw	0x1F
00704 1F88 1903 		btfsc	_Z	;EEADRL = xxx1 1111?
00705 1F89 3209 		bra	WriteProgBlock_Wr	; Yes
00706 1F8A 	;
00707 1F8A 3055 		movlw	0x55	; Start of required write sequence:
00708 1F8B 0096 		movwf	EECON2
00709 1F8C 30AA 		movlw	0xAA
SimpleServo16PS.asm                                                   Page: 47
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00710 1F8D 0096 		movwf	EECON2
00711 1F8E 1495 		bsf	EECON1,WR	; Set WR bit to begin write to latches
00712 1F8F 0000 		nop
00713 1F90 0000 		nop
00714 1F91 0A91 		incf	EEADRL,F
00715 1F92 33EE 		bra	WriteProgBlock_L1
00716 1F93 	;
00717 1F93 1295 	WriteProgBlock_Wr	bcf	EECON1,LWLO	; Write memory not latches
00718 1F94 3055 		movlw	0x55	; Start of required write sequence:
00719 1F95 0096 		movwf	EECON2
00720 1F96 30AA 		movlw	0xAA
00721 1F97 0096 		movwf	EECON2
00722 1F98 1495 		bsf	EECON1,WR	; Set WR bit to begin write
00723 1F99 0000 		nop
00724 1F9A 0000 		nop
00725 1F9B 	;
00726 1F9B 1115 		bcf	EECON1,WREN
00727 1F9C 	;
00728 1F9C 0020 	WriteProgBlock_end	movlb	0
00729 1F9D 0008 		return	
00730 1F9E 	;
00731 1F9E 	;============================================================
00732 1F9E 	; call once
00733 1F9E 	;
00734 1F9E 0021 	InitializeBLIO	MOVLB	0x01	; select bank 1
00735 1F9F 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00736 1FA0 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00737 1FA1 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00738 1FA2 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00739 1FA3 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00740 1FA4 1515 		bsf	OPTION_REG,PS2
00741 1FA5 	;
00742 1FA5 30F0 		MOVLW	OSCCON_Value
00743 1FA6 0099 		MOVWF	OSCCON
00744 1FA7 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00745 1FA8 0097 		movwf	WDTCON
00746 1FA9 	;
00747 1FA9 0024 		movlb	4	; bank 4
00748 1FAA 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00749 1FAB 	;
00750 1FAB 0023 		MOVLB	0x03	; bank 3
00751 1FAC 3000 		movlw	ANSELA_Val
00752 1FAD 008C 		movwf	ANSELA
00753 1FAE 3000 		movlw	ANSELB_Val
00754 1FAF 008D 		movwf	ANSELB
00755 1FB0 	;
00756 1FB0 	;
00757 1FB0 		if UseAltSerialPort
00764 1FB0 		endif
00765 1FB0 	;
00766 1FB0 0020 		MOVLB	0x00	;Bank 0
00767 1FB1 	; setup data ports
00768 1FB1 3004 		movlw	PortBValue
00769 1FB2 008D 		movwf	PORTB	;init port B
00770 1FB3 3018 		movlw	PortAValue
00771 1FB4 008C 		movwf	PORTA
00772 1FB5 0021 		MOVLB	0x01	; bank 1
00773 1FB6 3060 		movlw	PortADDRBits
00774 1FB7 008C 		movwf	TRISA
00775 1FB8 30F7 		movlw	PortBDDRBits	;setup for programer
00776 1FB9 008D 		movwf	TRISB
00777 1FBA 	;
00778 1FBA 	; setup serial I/O
00779 1FBA 0023 		movlb	BAUDCON	; bank 3
00780 1FBB 3008 		movlw	BAUDCON_Value
00781 1FBC 009F 		movwf	BAUDCON
00782 1FBD 30CF 		MOVLW	low BaudRate
00783 1FBE 009B 		MOVWF	SPBRGL
00784 1FBF 3000 		MOVLW	high BaudRate
00785 1FC0 009C 		MOVWF	SPBRGH
00786 1FC1 3024 		MOVLW	TXSTA_Value
00787 1FC2 009E 		MOVWF	TXSTA
00788 1FC3 3090 		MOVLW	RCSTA_Value
00789 1FC4 009D 		MOVWF	RCSTA
00790 1FC5 	;	movlb	0x01	; bank 1
00791 1FC5 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00792 1FC5 0020 		movlb	0x00	; bank 0
00793 1FC6 	;
00794 1FC6 	;	bsf	INTCON,PEIE	; enable periferal interupts
00795 1FC6 138B 		bcf	INTCON,GIE	; disable interupts
00796 1FC7 	;
00797 1FC7 0008 		return
00798 1FC8 	;
00799 1FC8 	;
00800 1FC8 	 
00801 1FC8 	 
00802 1FC8 	 
00803 1FC8 	 
00804 1FC8 	 
00805 1FC8 	 
00806 1FC8 	 
00807 1FC8 	 
00808 1FC8 	 
00809 1FC8 	 
00810 1FC8 	 
00811 1FC8 	 
00812 1FC8 	 
00813 1FC8 	 
00814 1FC8 	 
SimpleServo16PS.asm                                                   Page: 48
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00815 1FC8 	 
00816 1FC8 	 
00817 1FC8 	 
00818 1FC8 	 
00819 1FC8 	 
00820 1FC8 	 
00821 1FC8 	 
00822 1FC8 	 
00823 1FC8 	 
00824 1FC8 	 
00825 1FC8 	 
00826 1FC8 	 
00574 1FC8 	;
00575 1FC8 	;
00576 1FC8 	;
00577 1FC8 	;
00578 1FC8 		END

X-Ref Table
_C	STATUS,C	IdleServos_L1
_Z	STATUS,Z	IdleServos_Accel_2, WriteProgBlock_L1
AccelComplete0_7	0000 	IdleServos_Accel, AccelDone, StartMotion
AccelComplete8_15	0004 	IdleServos_Accel_1, AccelDone, StartMotion
AccelDone ^	0342 	IdleServos_Accel_2
AccelRampLen	21E0 	IdleServos_Accel_2, StartMotion
AddrChngDwell	0004 	ISR_ServoCCP1, IRQ_Servo1_InAct, IRQ_Servo1_OL, IRQ_Servo_Next
AddressMask	00E0 	BufferIHData, BIHD_PutInBuff
AllDataRXd	RX_ParseFlags,6	RS232_Parse, RS232_Parse_DALo_End
ANSELA	018C 	InitializeIO, InitializeBLIO
ANSELA_Val	0000 	InitializeIO, InitializeBLIO
ANSELB	018D 	InitializeIO, InitializeBLIO
ANSELB_Val	0000 	InitializeIO, InitializeBLIO
APFCON0	011D 	InitializeIO
BAUDCON	019F 	InitializeIO, InitializeBLIO
BAUDCON_Value	0008 	InitializeIO, InitializeBLIO
BaudRate	00CF 	InitializeIO, InitializeBLIO
BIHD_FlushBuff ^	1EAE 	BufferIHData
BIHD_PutInBuff ^	1EAF 	BufferIHData
BIHD_PutInBuff_E2 ^	1EB8 	BufferIHData
BIHD_PutInBuff_L1 ^	1EC2 	BIHD_PutInBuff_L1
BL_Parse ^	1E12 	BootLoaderStart
BL_ParseNextLine ^	1E13 	BLP_TestNum, BLP_TestNum_2, BLP_IHS_Length, BLP_IHS_CSum
		BLPV_Exit
BlockSize	0040 	BootLoaderStart
BlockWords	0020 	BIHD_PutInBuff_L1, TestErased, CompareBlock, EraseSourceBuffer, ReadProgBlock
		WriteProgBlock
BLP_IHS_AddrLSB ^	1E5B 	BLP_TestNum_2
BLP_IHS_AddrMSB ^	1E57 	BLP_TestNum_2
BLP_IHS_CSum ^	1E6F 	BLP_TestNum_2
BLP_IHS_Data ^	1E66 	BLP_TestNum_2
BLP_IHS_DataType ^	1E5F 	BLP_TestNum_2
BLP_IHS_Length ^	1E4B 	BLP_TestNum_2
BLP_L1 ^	1E17 	BLP_L2, BLP_NextState, BLP_IHS_Data
BLP_L2 ^	1E18 	BLP_TestNum, BLP_TestNum_1
BLP_NextState ^	1E55 	BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
BLP_SaveIH_Length ^	1E52 	BLP_IHS_Length
BLP_TestNum ^	1E21 	BLP_L2
BLP_TestNum_1 ^	1E36 	BLP_TestNum
BLP_TestNum_2 ^	1E3E 	BLP_TestNum_1
BLP_Validate ^	1E78 	BLP_IHS_CSum
BLP_WriteBuffer ^	1ECD 	BLPV_EndCmd, BIHD_FlushBuff, BIHD_PutInBuff_L1
BLP_WriteBuffer_end ^	1EDD 	BLP_WriteBuffer
BLPV_BadType ^	1E94 	BLP_Validate
BLPV_Data ^	1E8A 	BLP_Validate
BLPV_EndCmd ^	1E86 	BLP_Validate
BLPV_Exit ^	1E92 	BLPV_BadType
BLPV_Exit_Ack ^	1E91 	BLPV_Data
BLPV_HighAddr ^	1E8C 	BLP_Validate
BootLoader_End ^	1E10 	BootLoaderStart
BootLoaderStart ^	1E00 	, InitializeIO, BufferIHData
BSR	0008 	ProgStartVector
BufferIHData ^	1E96 	BLPV_Data
C	0000 	IdleServos_L1, IdleServos_L2, IdleServos_Accel_2, DoSequenceCmd, DoSeqWaitForBtnCmd
		ClampInt_1, ClampInt_tooHigh, ClampMinMax_1, Cmd_SetMode, BLP_TestNum, BLP_IHS_Length
		BufferIHData, BIHD_PutInBuff_L1
CalcdDwell	02E3 	IRQ_Servo1_PulseOrDwell, IRQ_Servo2_PulseOrDwell
CalcdDwellH	02E4 	IRQ_Servo1_PulseOrDwell, IRQ_Servo2_PulseOrDwell
CB_Next ^	1F43 	CompareBlock_L1
CB_NotBlank ^	1F3B 	CompareBlock_L1
CCP1CON	0293 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo_Next, IRQ_Servo1_IntOnly
		StartServos
CCP1IE	0002 	StartServos
CCP1IF	0002 	IRQ_Ser_End, IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo_Next
		IRQ_Servo1_X
CCP2CON	029A 	IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_IntOnly, StartServos
CCP2IE	0000 	StartServos
CCP2IF	0000 	IRQ_Ser_End, IRQ_Servo_Next, IRQ_Servo2_X
CCP2SEL	0003 	InitializeIO
CCPCON_Clr	0009 	IRQ_Servo1_PulseOrDwell, IRQ_Servo2_PulseOrDwell
CCPCON_Int	000A 	IRQ_Servo1_InAct, IRQ_Servo_Next, IRQ_Servo1_IntOnly, IRQ_Servo2_IntOnly
		StartServos
CCPCON_Set	0008 	IRQ_Servo_Next
CCPR1H	0292 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo1_OL, IRQ_Servo_Next
		StartServos
CCPR1L	0291 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo1_OL, IRQ_Servo_Next
		StartServos
CCPR2H	0299 	IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_InAct, IRQ_Servo2_OL
		StartServos
CCPR2L	0298 	IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_InAct, IRQ_Servo2_OL
SimpleServo16PS.asm   X-Ref Table                                        Page: 49
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

		StartServos
CFGS	0006 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
ChkSum	002D 	BootLoaderStart, BL_ParseNextLine, BLP_SaveIH_Length, BLP_IHS_AddrMSB
		BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
ClampInt_1 ^	04FA 	DoSeqWaitForBtnCmd
ClampInt_tooHigh ^	0509 	DoSeqWaitForBtnCmd
ClampInt_tooLow ^	0504 	ClampInt_1
ClampMinMax_1 ^	0522 	ClampInt_tooHigh
ClampMinMax_too ^	0532 	ClampInt_tooHigh, ClampMinMax_1
ClearRam ^	0030 	InitializeIO
ClearRam_2 ^	0041 	ClearRam
ClearRam_L2 ^	004A 	ClearRam, ClearRam_2, ClearRam_L2
Cmd_GetAccel ^	08B5 	HandleRXData_1
Cmd_GetByte ^	08BE 	Cmd_GetMaxSpeed, Cmd_GetSeqByte, Cmd_GetCurSpeed
Cmd_GetCmdPos ^	0898 	HandleRXData_1
Cmd_GetCurPos ^	0954 	Dispatcher_4
Cmd_GetCurSpeed ^	094A 	Dispatcher_4
Cmd_GetInPosition ^	095F 	Dispatcher_4
Cmd_GetInPosition_1 ^	096D 	Cmd_GetInPosition
Cmd_GetMax_uS ^	0929 	HandleRXData_1
Cmd_GetMaxSpeed ^	08F6 	HandleRXData_1
Cmd_GetMin_uS ^	090F 	HandleRXData_1
Cmd_GetMode ^	0884 	HandleRXData_1
Cmd_GetSeqByte ^	0940 	HandleRXData_1
Cmd_GetServoEnable ^	08D9 	HandleRXData_1
Cmd_GetServoEnable_1 ^	08E7 	Cmd_GetServoEnable
Cmd_GetStatus ^	0986 	Dispatcher_4
Cmd_GetWord ^	08A2 	Cmd_GetMin_uS, Cmd_GetMax_uS, Cmd_GetCurPos
Cmd_LoadSequencerData ^	0982 	Dispatcher_4
Cmd_RestoreParams ^	0977 	Dispatcher_4
Cmd_RunBootloader ^	0991 	Dispatcher_4
Cmd_SaveParams ^	0970 	Dispatcher_4
Cmd_SaveSequencerData ^	097E 	Dispatcher_4
Cmd_SendIDString ^	09A6 	Dispatcher_6
Cmd_SendIDString_L1 ^	09A7 	Cmd_SendIDString_L1
Cmd_SequencerStart ^	0997 	Dispatcher_4
Cmd_SetAccel ^	08A7 	Dispatcher_1
Cmd_SetByte79 ^	08B2 	Cmd_SetMaxSpeed, Cmd_SetSeqByte
Cmd_SetCmdPos ^	0887 	Dispatcher_1
Cmd_SetMasterAddr ^	099A 	Dispatcher_6
Cmd_SetMax_uS ^	091A 	Dispatcher_1
Cmd_SetMaxSpeed ^	08EA 	Dispatcher_1
Cmd_SetMin_uS ^	0900 	Dispatcher_1
Cmd_SetMode ^	087D 	Dispatcher_1
Cmd_SetSeqByte ^	0934 	Dispatcher_1
Cmd_SetServoEnable ^	08C1 	Dispatcher_1
Cmd_SetServoEnable_1 ^	08D4 	Cmd_SetServoEnable
Cmd_SetSlaveAddr ^	09A0 	Dispatcher_6
Cmd_SetWord7879 ^	0893 	Cmd_SetMin_uS, Cmd_SetMax_uS
CMDServoIDX	02E0 	IdleServos, IdleServos_Update, IdleServos_Clamp, IdleServos_DisInt
		IdleServos_MovPlus, IdleServos_InPos, IdleServos_Next, IdleServos_Accel, IdleServos_Accel_2
		AccelDone, SaveSpeed, GetSpeed, GetMaxSpeed, GetAccelValue, SetFSR0ToServoFlags2
		SetFSR0ToServoFlags
CMDSigTime	2120 	IdleServos_Update, StartMotion, Cmd_GetCmdPos
CompareBlock ^	1F2C 	BLP_WriteBuffer
CompareBlock_L1 ^	1F2E 	CB_Next
CopyToRam ^	004F 	Cmd_RestoreParams, InitializeIO
CopyToRam_L1 ^	0054 	CopyToRam_L1
CREN	0004 	RX_TheByte_Err, GetChar_Err
CyclePulseEnd1	0002 	ISR_ServoCCP1, IRQ_Servo1_PulseOrDwell, IRQ_Servo1_OL
CyclePulseEnd2	0003 	ISR_ServoCCP2, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL
CyclePulseStart	0000 	ISR_ServoCCP1, IRQ_Servo1_PulseOrDwell, IRQ_Servo_Next, StartServos
DataInBuffer	IH_Flags,1	BootLoaderStart, BL_Parse, BLPV_EndCmd, BufferIHData, BIHD_PutInBuff_L1
		EraseSourceBuffer
DataReceivedFlag	SerFlags,1	RX_TheByte, ML_1
DataSentFlag	SerFlags,2	TX_TheByte, ML_Ser_Out
DecTimer ^	0071 	DecTimer4, DecTimer3, DecTimer2
DecTimer1 ^	0070 	ProgStartVector
DecTimer2 ^	006E 	ProgStartVector
DecTimer3 ^	006C 	ProgStartVector
DecTimer4 ^	006A 	ProgStartVector
DefaultAccel	0001 	InitializeBLIO, ServoInit16
DefaultMaxSpeed	0030 	InitializeBLIO, ServoInit16
DefaultSFlags	0022 	InitializeBLIO, ServoInit16
DelayWuS ^	0093 	DecTimer
DelayWuS_Loop ^	0094 	DelayWuS_Loop
DestAddHiRXd	RX_ParseFlags,5	RS232_Parse
DestAddLoRXd	RX_ParseFlags,4	RS232_Parse, RS232_Parse_SALo_end
DestBuffer	2140 	BootLoaderStart, FSR1_DestBuff
Dispatcher_1 ^	082B 	HandleRXData_1
Dispatcher_2 ^	0841 	Dispatcher_1
Dispatcher_3 ^	0847 	Dispatcher_2
Dispatcher_4 ^	084D 	Dispatcher_3
Dispatcher_5 ^	0865 	Dispatcher_4
Dispatcher_6 ^	086D 	Dispatcher_5
DoSeqCpByte ^	0486 	DoSeqSetAccelCmd, DoSeqCpWord
DoSeqCpWord ^	0499 	DoSeqSetMaxCmd
DoSeqDone ^	0467 	DoSequenceCmd
DoSeqMov2 ^	047B 	SeqMov2FSR0, DoSeqMov2CtrCmd
DoSeqMov2CtrCmd ^	04D7 	DoSequenceCmd
DoSeqMov2MaxCmd ^	04CF 	DoSequenceCmd
DoSeqMov2MinCmd ^	04C3 	DoSequenceCmd
DoSeqMoveCmd ^	0470 	DoSequenceCmd
DoSeqSetAccelCmd ^	048A 	DoSequenceCmd
DoSeqSetLoopTimeCmd ^	04A5 	DoSequenceCmd
DoSeqSetMaxCmd ^	049D 	DoSequenceCmd
DoSeqSetMinCmd ^	0492 	DoSequenceCmd
DoSeqSetSpeedCmd ^	047F 	DoSequenceCmd
SimpleServo16PS.asm   X-Ref Table                                        Page: 50
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

DoSeqStopCmd ^	04E1 	DoSequenceCmd
DoSequenceCmd ^	0446 	IdleServos
DoSeqWaitForBtnCmd ^	04E8 	DoSequenceCmd
DoSeqWaitInPosCmd ^	04DC 	DoSequenceCmd
DoSeqWaitUntilCmd ^	04B5 	DoSequenceCmd
DwellTime	21B0 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_OL, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL
EEAddrTemp	0024 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DelayWuS_Loop
		EERead, EEWriteW, EEWrite, EEPromToServoParams, ETSP_L1, EEPromToSequencer, ServoParamsToEEProm
		SPTE_L1, SequencerToEEProm
EEADR	0191 	EERead, EEWrite
EEADRH	0192 	LoadProgAddr
EEADRL	0191 	ReadEEData, WriteEEData, ReadProgBlock_1, LoadProgAddr, WriteProgBlock_L1
EECON1	0195 	EERead, EEWrite, EEWriteLoop, ReadEEData, WriteEEData, WriteEEData_L1
		ReadProgBlock, ReadProgBlock_L1, EraseProgBlock, WriteProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
EECON2	0196 	EEWrite, WriteEEData, EraseProgBlock, WriteProgBlock_L1, WriteProgBlock_Wr
EEDAT	0193 	EERead, EEWrite
EEDataTemp	0025 	SaveParams_L1, EEWrite, SPTE_L1, Cmd_RunBootloader
EEDATH	0194 	ReadProgBlock_L1, WriteProgBlock_L1
EEDATL	0193 	ReadEEData, WriteEEData, ReadProgBlock_L1, WriteProgBlock_L1
EEPGD	0007 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
EEPromToSequencer ^	03E3 	ServoInit16, Cmd_LoadSequencerData
EEPromToServoParams ^	03CD 	ServoInit16, Cmd_RestoreParams
EERead ^	009A 	CopyToRam_L1, ETSP_L1
EEWrite ^	00A4 	SaveParams_L1, SPTE_L1
EEWriteLoop ^	00B7 	EEWriteLoop
EEWriteW ^	00A3 	Cmd_RunBootloader
Enable0_7	LATA,3	StartServos
Enable8_15	LATA,4	StartServos
EraseBlock_L1 ^	1F4A 	EraseBlock_L1
EraseProgBlock ^	1F63 	BLP_WriteBuffer
EraseSourceBuffer ^	1F46 	BootLoaderStart, BLP_WriteBuffer_end
ETSP_L1 ^	03DD 	EEPromToServoParams, ETSP_L1, EEPromToSequencer
F	0001 	ProgStartVector, ClearRam, ClearRam_L2, CopyToRam_L1, SaveParams_L1, DecTimer
		DelayWuS_Loop, StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse, RS232_Parse_Byte
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_ClearTXData_L1
		RS232_Send, RS232_Send_L1, IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo1_OL
		IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_InAct, IRQ_Servo2_OL, IdleServos_Update
		IdleServos_DecAcc, IdleServos_Minus, IdleServos_DisInt, IdleServos_MovPlus, IdleServos_IncAcc
		IdleServos_Plus, IdleServos_Accel_2, SaveSpeed, GetSpeed, GetMaxSpeed, GetAccelValue
		SetFSR0ToServoFlags2, SetFSR0ToServoFlags, ServoInit16, StoreWord16Times_L1, StoreXTimes_L1
		ETSP_L1, SPTE_L1, StartMotion, DoSequenceCmd, DoSeqDone, DoSeqMoveCmd, DoSeqSetSpeedCmd
		DoSeqCpByte, DoSeqSetAccelCmd, DoSeqSetMinCmd, DoSeqCpWord, DoSeqSetMaxCmd, DoSeqSetLoopTimeCmd
		DoSeqWaitUntilCmd, DoSeqMov2MinCmd, DoSeqMov2MaxCmd, DoSeqStopCmd, ClampInt_tooHigh
		ClampMinMax_1, Cmd_GetCmdPos, Cmd_SetAccel, Cmd_GetAccel, Cmd_SetServoEnable, Cmd_GetServoEnable
		Cmd_SetMaxSpeed, Cmd_GetMaxSpeed, Cmd_SetMin_uS, Cmd_GetMin_uS, Cmd_SetMax_uS, Cmd_GetMax_uS
		Cmd_SetSeqByte, Cmd_GetSeqByte, Cmd_GetCurSpeed, Cmd_GetCurPos, Cmd_GetInPosition
		Cmd_SendIDString_L1, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2, BLP_SaveIH_Length
		BLP_NextState, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
		BufferIHData, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, TestErased_L1, CB_Next, EraseBlock_L1
		ReadProgBlock_L1, ReadProgBlock_1, WriteProgBlock_L1
FERR	0002 	RX_TheByte_Err, GetChar_Err
FirstRAMParam	SysMode	CopyToRam, SaveParams
FlushInBuff ^	00F5 	RS232_Parse_Error
FREE	0004 	EraseProgBlock
FSR0	0004 	ClearRam, ClearRam_2, ClearRam_L2, StoreSerIn, StoreSerOut, HandleRXData_1
FSR0_SerialBuffer ^	1EDE 	BL_ParseNextLine, BLPV_HighAddr, BIHD_PutInBuff_E2
FSR0H	0005 	ProgStartVector, ClearRam, CopyToRam, SaveParams, DecTimer, StoreSerIn
		GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, IRQ_Servo1_PulseOrDwell
		IRQ_Servo1_OL, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL, IdleServos_Update, IdleServos_Accel_2
		SaveSpeed, GetSpeed, GetMaxSpeed, GetAccelValue, SetFSR0ToServoFlags2, SetFSR0ToServoFlags
		ServoInit16, EEPromToServoParams, EEPromToSequencer, ServoParamsToEEProm, SequencerToEEProm
		StartMotion, DoSequenceCmd, DoSeqMov2MinCmd, DoSeqMov2MaxCmd, ClampInt_tooHigh
		ClampMinMax_1, BLP_WriteBuffer, FSR0_SerialBuffer
FSR0L	0004 	ProgStartVector, CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DecTimer
		GetSerIn, GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, IRQ_Servo1_PulseOrDwell
		IRQ_Servo1_OL, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL, IdleServos_Update, IdleServos_Accel_2
		SaveSpeed, GetSpeed, GetMaxSpeed, GetAccelValue, SetFSR0ToServoFlags2, SetFSR0ToServoFlags
		ServoInit16, EEPromToServoParams, EEPromToSequencer, ServoParamsToEEProm, SequencerToEEProm
		StartMotion, DoSequenceCmd, DoSeqMov2MinCmd, DoSeqMov2MaxCmd, ClampInt_tooHigh
		ClampMinMax_1, BLP_WriteBuffer, FSR0_SerialBuffer
FSR1	0006 	HandleRXData_1
FSR1_DestBuff ^	1EE3 	BLP_WriteBuffer
FSR1_SourceBuffer ^	1EE8 	BLP_WriteBuffer, EraseSourceBuffer
FSR1H	0007 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, IRQ_Servo1_PulseOrDwell
		IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IdleServos_Update, IdleServos_DisInt, DoSeqSetSpeedCmd
		DoSeqSetAccelCmd, DoSeqSetMinCmd, DoSeqSetMaxCmd, Cmd_GetCmdPos, Cmd_SetAccel, Cmd_GetAccel
		Cmd_SetServoEnable, Cmd_GetServoEnable, Cmd_SetMaxSpeed, Cmd_GetMaxSpeed, Cmd_SetMin_uS
		Cmd_GetMin_uS, Cmd_SetMax_uS, Cmd_GetMax_uS, Cmd_SetSeqByte, Cmd_GetSeqByte, Cmd_GetCurSpeed
		Cmd_GetCurPos, Cmd_GetInPosition, BIHD_PutInBuff_E2, FSR1_DestBuff, FSR1_SourceBuffer
FSR1L	0006 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, IRQ_Servo1_PulseOrDwell
		IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IdleServos_Update, IdleServos_Minus, IdleServos_DisInt
		IdleServos_Plus, DoSeqSetSpeedCmd, DoSeqSetAccelCmd, DoSeqSetMinCmd, DoSeqSetMaxCmd
		Cmd_GetCmdPos, Cmd_SetAccel, Cmd_GetAccel, Cmd_SetServoEnable, Cmd_GetServoEnable
		Cmd_SetMaxSpeed, Cmd_GetMaxSpeed, Cmd_SetMin_uS, Cmd_GetMin_uS, Cmd_SetMax_uS, Cmd_GetMax_uS
		Cmd_SetSeqByte, Cmd_GetSeqByte, Cmd_GetCurSpeed, Cmd_GetCurPos, Cmd_GetInPosition
		BIHD_PutInBuff_E2, FSR1_DestBuff, FSR1_SourceBuffer
GetAccelValue ^	0361 	IdleServos_Accel_2
GetChar ^	1EED 	BLP_L2, GetChar, GetChar_Err
GetChar_Err ^	1EF8 	GetChar
GetMaxSpeed ^	0359 	IdleServos_Accel_2
GetSerIn ^	00E4 	RS232_Parse_Byte
GetSerIn_End ^	00F3 	GetSerIn
GetSerInBytes ^	00FB 	MainLoop
GetSerOut ^	0119 	ML_Ser_Out
GetSerOut_End ^	0128 	GetSerOut
GetSpeed ^	0351 	IdleServos_Update, IdleServos_MovPlus, IdleServos_Accel_2
GIE	0007 	EEWrite, IdleServos_DisInt, InitializeIO, InitializeBLIO
SimpleServo16PS.asm   X-Ref Table                                        Page: 51
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

HandleRXData ^	0804 	MainLoop
HandleRXData_1 ^	080A 	HandleRXData
HandleRXData_Rtn ^	0808 	Cmd_SetMode
IdleServos ^	029D 	ML_Ser_End
IdleServos_Accel ^	031D 	IdleServos_Update
IdleServos_Accel_1 ^	0323 	IdleServos_Accel
IdleServos_Accel_2 ^	0325 	IdleServos_Accel
IdleServos_Clamp ^	02E9 	IdleServos_Plus
IdleServos_DecAcc ^	02E0 	IdleServos_L1
IdleServos_DisInt ^	02EA 	IdleServos_DisInt
IdleServos_IncAcc ^	030A 	IdleServos_L2
IdleServos_InPos ^	0314 	IdleServos_Update
IdleServos_L1 ^	02D9 	IdleServos_DecAcc
IdleServos_L2 ^	0303 	IdleServos_IncAcc
IdleServos_Minus ^	02E2 	IdleServos_Update, IdleServos_L1
IdleServos_MovPlus ^	02FA 	IdleServos_Update
IdleServos_Next ^	0319 	IdleServos, IdleServos8_15, IdleServos_DisInt
IdleServos_Plus ^	030C 	IdleServos_MovPlus, IdleServos_L2
IdleServos_Update ^	02AC 	IdleServos
IdleServos8_15 ^	02A8 	IdleServos
IDString ^	09AF 	Cmd_SendIDString_L1
IH_Ack	002A 	BootLoaderStart, BLPV_EndCmd, BLPV_Exit_Ack
IH_Addr_Hi	0025 	BootLoaderStart, BLPV_HighAddr, BufferIHData
IH_Addr_Lo	0023 	BootLoaderStart, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BufferIHData
		BIHD_PutInBuff
IH_ByteCount	0028 	BootLoaderStart, BL_ParseNextLine, BLP_IHS_Data, BIHD_PutInBuff_E2
IH_Bytes	0027 	BootLoaderStart, BLP_SaveIH_Length, BLP_IHS_DataType, BLP_IHS_Data
IH_ErrorBadCSum	002D 	BLP_IHS_CSum
IH_ErrorBadLen	002B 	BLP_IHS_Length
IH_ErrorBadType	003D 	BLPV_BadType
IH_Flags	002C 	BootLoaderStart, BL_Parse, BLP_L1, BLP_TestNum_1, BLPV_EndCmd, BufferIHData
		BIHD_PutInBuff_L1, EraseSourceBuffer
IH_State	002A 	BootLoaderStart, BL_ParseNextLine, BLP_L2, BLP_TestNum, BLP_TestNum_2
		BLP_NextState, BLP_IHS_DataType
IH_TempVal	002B 	BootLoaderStart, BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_Length, BLP_SaveIH_Length
		BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
IH_Type	0029 	BootLoaderStart, BLP_IHS_DataType, BLP_Validate
IHS_Length	0001 	BLP_L2
INDF0	0000 	ProgStartVector, ClearRam_L2, DecTimer, StoreSerIn, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse_DALo_End, IdleServos, IdleServos8_15, IdleServos_Update
		IdleServos_MovPlus, IdleServos_InPos, IdleServos_Accel, IdleServos_Accel_1, IdleServos_Accel_2
		AccelDone, SaveSpeed, GetSpeed, GetMaxSpeed, GetAccelValue, StartMotion, ClampInt_tooHigh
		ClampMinMax_1, ClampMinMax_too, Cmd_GetServoEnable, Cmd_GetServoEnable_1, Cmd_GetInPosition
		Cmd_GetInPosition_1
INDF1	0001 	IRQ_Servo1_PulseOrDwell, IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IdleServos_Update
		IdleServos_Minus, IdleServos_Plus, Cmd_SetMode, Cmd_SetServoEnable, Cmd_SetServoEnable_1
		Cmd_GetServoEnable, Cmd_GetServoEnable_1, Cmd_GetInPosition, Cmd_GetInPosition_1
InitializeBLIO ^	1F9E 	BootLoaderStart
InitializeIO ^	09CA 	start
InPositionFlag0_7	0001 	IdleServos_Update, IdleServos_InPos, StartMotion, Cmd_GetInPosition
InPositionFlag8_15	0005 	IdleServos_Update, IdleServos_InPos, StartMotion, Cmd_GetInPosition_1
INTCON	000B 	EEWrite, IdleServos_DisInt, InitializeIO, InitializeBLIO
IRQ_Ser_End ^	002A 	SystemTick_end
IRQ_Servo_Next ^	022C 	ISR_ServoCCP1
IRQ_Servo1_InAct ^	0215 	IRQ_Servo1_PulseOrDwell
IRQ_Servo1_IntOnly ^	0252 	IRQ_Servo1_OL
IRQ_Servo1_OL ^	021F 	ISR_ServoCCP1
IRQ_Servo1_PulseOrDwell ^	01E9 	ISR_ServoCCP1
IRQ_Servo1_X ^	0254 	ISR_ServoCCP1
IRQ_Servo2_InAct ^	0287 	IRQ_Servo2_PulseOrDwell
IRQ_Servo2_IntOnly ^	0298 	IRQ_Servo2_InAct
IRQ_Servo2_OL ^	028C 	ISR_ServoCCP2
IRQ_Servo2_PulseOrDwell ^	025B 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct
IRQ_Servo2_X ^	029A 	ISR_ServoCCP2, IRQ_Servo2_PulseOrDwell
ISR_ServoCCP1 ^	01E1 	IRQ_Ser_End
ISR_ServoCCP2 ^	0257 	IRQ_Ser_End
kCenterPulseWidth	0BB8 	ServoInit16, DoSeqMov2CtrCmd
kMaxMode	0000 	Cmd_SetMode
kMaxPulseWidth	1068 	ServoInit16, DoSeqWaitForBtnCmd, ClampInt_tooHigh
kMinPulseWidth	0708 	ServoInit16, ClampInt_1, ClampInt_tooLow
kRS232_MasterAddr	0001 	InitializeBLIO
kRS232_SlaveAddr	0002 	InitializeBLIO
kRS232SyncByteValue	00DD 	RS232_Parse_Byte, RS232_Parse_Sync2
kSeqMemSize	0080 	InitializeBLIO, DoSequenceCmd
kServoAddrTime	01F4 	IRQ_Servo_Next
kServoDwellTime	1388 	ServoInit16
kServoDwellTimeA	1194 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo2_PulseOrDwell
		IRQ_Servo2_InAct
kssFlags	0000 	InitializeBLIO
kSysMode	0000 	InitializeBLIO
LastRAMParam	SysFlags	CopyToRam_L1, SaveParams_L1
LATA	010C 	IRQ_Servo_Next, StartServos
LED1_Bit	0000 	ProgStartVector
LED2_Bit	0004 	ProgStartVector
LED2_Flag	SysFlags,3	ProgStartVector
LED3_Bit	0005 	ProgStartVector
LED3_Flag	SysFlags,4	ProgStartVector
LEDTIME	0064 	InitializeIO
LoadProgAddr ^	1F72 	ReadProgBlock, EraseProgBlock, WriteProgBlock
LWLO	0005 	WriteProgBlock, WriteProgBlock_Wr
MainLoop ^	01C3 	ML_Ser_End
MaxTime	2160 	DoSeqSetMaxCmd, DoSeqMov2MaxCmd, ClampInt_tooHigh, Cmd_SetMax_uS, Cmd_GetMax_uS
MinTime	2140 	EEPromToServoParams, ServoParamsToEEProm, DoSeqSetMinCmd, DoSeqMov2MinCmd
		ClampMinMax_1, Cmd_SetMin_uS, Cmd_GetMin_uS
ML_1 ^	01CD 	MainLoop
ML_Ser_End ^	01DC 	ML_Ser_Out
ML_Ser_Out ^	01D5 	ML_1
MovingFWD0_7	0003 	IdleServos_Update, IdleServos_MovPlus
MovingFWD8_15	0007 	IdleServos_Update, IdleServos_MovPlus
SimpleServo16PS.asm   X-Ref Table                                        Page: 52
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

MSN_Done	IH_Flags,0	BootLoaderStart, BLP_L1, BLP_TestNum_1
NOT_WPUEN	0007 	InitializeIO, InitializeBLIO
nvFirstParamByte	nvSysMode	InitializeBLIO, CopyToRam, SaveParams
nvLastParamByte	nvSysFlags	InitializeBLIO
nvMaxTime	0045 	InitializeBLIO
nvMinTime	0025 	InitializeBLIO
nvRS232_MasterAddr	0001 	InitializeBLIO
nvRS232_SlaveAddr	0002 	InitializeBLIO
nvSequencerData	006D 	InitializeBLIO, EEPromToSequencer, SequencerToEEProm
nvServoAccelValue	0015 	InitializeBLIO
nvServoFlags	0065 	InitializeBLIO
nvServoMaxSpeed	0005 	InitializeBLIO, EEPromToServoParams, ServoParamsToEEProm
nvssFlags	0003 	InitializeBLIO
nvSysFlags	0004 	InitializeBLIO
nvSysMode	0000 	InitializeBLIO, CopyToRam, SaveParams
OERR	0001 	RX_TheByte_Err, GetChar_Err
oldCode	0000 	DecTimer, DoSeqWaitForBtnCmd
OPTION_REG	0095 	InitializeIO, InitializeBLIO
OSCCON	0099 	InitializeIO, InitializeBLIO
OSCCON_Value	00F0 	InitializeIO, InitializeBLIO
Param77	0077 	DelayWuS, DelayWuS_Loop, CompareBlock_L1, CB_NotBlank
Param78	0078 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_Byte, RS232_Parse_Sync2
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
		RS232_Parse_L1, RS232_ClearTXData, RS232_ClearTXData_L1, ML_Ser_Out, IdleServos_Update
		IdleServos_L1, IdleServos_DecAcc, IdleServos_Minus, IdleServos_MovPlus, IdleServos_L2
		IdleServos_IncAcc, IdleServos_Plus, IdleServos_Accel_2, SaveSpeed, ServoInit16
		StoreWord16Times_L1, Store16Times, StoreXTimes, Store8Times, StartMotion, DoSequenceCmd
		DoSeqMov2, DoSeqSetSpeedCmd, DoSeqSetAccelCmd, DoSeqSetMinCmd, DoSeqSetMaxCmd, DoSeqSetLoopTimeCmd
		DoSeqWaitUntilCmd, DoSeqMov2MinCmd, DoSeqMov2MaxCmd, DoSeqWaitInPosCmd, DoSeqWaitForBtnCmd
		ClampInt_tooHigh, ClampMinMax_1, HandleRXData_1, Dispatcher_1, Dispatcher_2, Dispatcher_3
		Dispatcher_4, Dispatcher_5, Cmd_SetCmdPos, Cmd_GetCmdPos, Cmd_SetAccel, Cmd_GetAccel
		Cmd_SetServoEnable, Cmd_SetServoEnable_1, Cmd_GetServoEnable, Cmd_SetMaxSpeed, Cmd_GetMaxSpeed
		Cmd_SetMin_uS, Cmd_GetMin_uS, Cmd_SetMax_uS, Cmd_GetMax_uS, Cmd_SetSeqByte, Cmd_GetSeqByte
		Cmd_GetCurSpeed, Cmd_GetCurPos, Cmd_GetInPosition, BLP_L2, BLP_TestNum, BLP_TestNum_1
		BLP_TestNum_2, BLP_IHS_CSum, BufferIHData, CompareBlock_L1, CB_NotBlank
Param79	0079 	RS232_Send, RS232_Send_L1, IdleServos_Accel_2, ServoInit16, StoreWord16Times_L1
		StoreXTimes, StoreXTimes_L1, EEPromToServoParams, ETSP_L1, EEPromToSequencer, ServoParamsToEEProm
		SPTE_L1, SequencerToEEProm, Cmd_SetWord7879, Cmd_SetAccel, Cmd_SetByte79, Cmd_SetServoEnable
		Cmd_SetMaxSpeed, Cmd_SetMin_uS, Cmd_SetMax_uS, Cmd_SetSeqByte, Cmd_SendIDString
		Cmd_SendIDString_L1, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, TestErased, TestErased_L1
		CompareBlock, CB_Next, EraseSourceBuffer, EraseBlock_L1, ReadProgBlock, ReadProgBlock_L1
		WriteProgBlock
Param7A	007A 	RS232_Send, RS232_Send_L1, StoreWord16Times, StoreWord16Times_L1, DoSeqSetLoopTimeCmd
		Cmd_SetWord7879, Cmd_SetMin_uS, Cmd_SetMax_uS
Param7C	007C 	IdleServos_Update, IdleServos_L1, IdleServos_Minus, IdleServos_DisInt
		IdleServos_L2, IdleServos_Plus, StartMotion, DoSeqMoveCmd, SeqMov2FSR0, DoSeqMov2CtrCmd
		DoSeqWaitForBtnCmd, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh, ClampMinMax_1
		ClampMinMax_too, Cmd_SetCmdPos
Param7D	007D 	IdleServos_Update, IdleServos_Minus, IdleServos_DisInt, IdleServos_MovPlus
		IdleServos_Plus, StartMotion, DoSeqMoveCmd, SeqMov2FSR0, DoSeqMov2CtrCmd, DoSeqWaitForBtnCmd
		ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh, ClampMinMax_1, ClampMinMax_too, Cmd_SetCmdPos
Param7F	007F 	ClearRam, ClearRam_2, ClearRam_L2
PCLATH	000A 	ProgStartVector
PEIE	0006 	InitializeIO
PIE1	0091 	StartServos, InitializeIO
PIE2	0092 	StartServos
PIR1	0011 	ProgStartVector, SystemTick_end, IRQ_Ser_End, ML_1, IRQ_Servo1_PulseOrDwell
		IRQ_Servo1_InAct, IRQ_Servo_Next, IRQ_Servo1_X, GetChar, SendChar
PIR2	0012 	IRQ_Ser_End, IRQ_Servo_Next, IRQ_Servo2_X
POP_SerOut_End ^	0117 	StoreSerOut
PORTA	000C 	InitializeIO, InitializeBLIO
PortADDRBits	0060 	InitializeIO, InitializeBLIO
PortAValue	0018 	InitializeIO, InitializeBLIO
PORTB	000D 	ProgStartVector, InitializeIO, InitializeBLIO
PortBDDRBits	00F7 	InitializeIO, InitializeBLIO
PortBValue	0004 	InitializeIO, InitializeBLIO
PR2	001B 	InitializeIO
PR2_Value	007D 	InitializeIO
PROG_ADDR_HI	0021 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PROG_ADDR_LO	0020 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
ProgStartVector ^	0002 	BootLoader_End
ProgWordCount	0022 	BootLoaderStart, BIHD_PutInBuff, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
PS0	0000 	InitializeIO, InitializeBLIO
PS1	0001 	InitializeIO, InitializeBLIO
PS2	0002 	InitializeIO, InitializeBLIO
PSA	0003 	InitializeIO, InitializeBLIO
RCIE	0005 	InitializeIO
RCIF	0005 	SystemTick_end, GetChar
RCREG	0199 	RX_TheByte, RX_TheByte_Err, GetChar, GetChar_Err
RCSTA	019D 	RX_TheByte, RX_TheByte_Err, InitializeIO, GetChar, GetChar_Err, InitializeBLIO
RCSTA_Value	0090 	InitializeIO, InitializeBLIO
RD	0000 	EERead, ReadEEData, ReadProgBlock_L1
ReadEEData ^	1F04 	BootLoaderStart
ReadProgBlock ^	1F51 	BLP_WriteBuffer
ReadProgBlock_1 ^	1F61 	ReadProgBlock_L1
ReadProgBlock_L1 ^	1F56 	ReadProgBlock_1
RP_DataBytes	0004 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_ClearTXData
		RS232_Send
RP_LongAddr	0000 	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Send
RS232_ClearTXData ^	019A 	RS232_Send_L1
RS232_ClearTXData_L1 ^	01A2 	RS232_ClearTXData_L1
RS232_MasterAddr	0038 	RS232_Parse_SALo, RS232_Send, Cmd_SetMasterAddr
RS232_Parse ^	012A 	MainLoop
RS232_Parse_Byte ^	0135 	RS232_Parse
RS232_Parse_DALo_End ^	016C 	RS232_Parse_SALo_end
RS232_Parse_Data_end ^	017D 	RS232_Parse_DALo_End
RS232_Parse_Error ^	0198 	RS232_Parse_Sync2, RS232_Parse_Data_end
RS232_Parse_L1 ^	018B 	RS232_Parse_L1
RS232_Parse_Rtn ^	015C 	RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo_end
SimpleServo16PS.asm   X-Ref Table                                        Page: 53
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

		RS232_Parse_DALo_End
RS232_Parse_SALo ^	014C 	RS232_Parse_Sync2
RS232_Parse_SALo_end ^	015E 	RS232_Parse_SALo
RS232_Parse_Sync2 ^	0144 	RS232_Parse_Byte
RS232_Send ^	01A7 	RS232_Send_S0
RS232_Send_L1 ^	01B6 	RS232_Send_L1
RS232_Send_S0 ^	0800 	Cmd_GetMode, Cmd_GetWord, Cmd_GetByte, Cmd_GetServoEnable, Cmd_GetServoEnable_1
		Cmd_GetInPosition, Cmd_GetInPosition_1, Cmd_GetStatus, Cmd_SetMasterAddr, Cmd_SetSlaveAddr
RS232_SlaveAddr	0039 	RS232_Parse_SALo_end, RS232_Send, Cmd_SetSlaveAddr
RX_CSUM	00A3 	RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_Data	00AA 	RS232_Parse_Data_end, HandleRXData_1
RX_DataCount	00A2 	RS232_Parse_SALo, RS232_Parse_DALo_End
RX_DstAdd	00A5 	RS232_Parse_SALo_end
RX_Flags	00A1 	RS232_Parse, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_L1
		MainLoop, HandleRXData
RX_ParseFlags	00A0 	RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo
		RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_Parse_Error
RX_SrcAdd	00A4 	RS232_Parse_SALo
RX_TempData	00A6 	RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_TheByte ^	00C4 	SystemTick_end
RX_TheByte_Err ^	00CE 	RX_TheByte
RXByte	002F 	RX_TheByte, RX_TheByte_Err, ML_1
RXDataIsNew	RX_Flags,1	RS232_Parse, RS232_Parse_L1, MainLoop, HandleRXData
RXDataValidFlag	RX_Flags,0	RS232_Parse, RS232_Parse_L1, HandleRXData
RXDstIsMe	RX_Flags,3	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_L1
RXSrcIsMaster	RX_Flags,2	RS232_Parse, RS232_Parse_SALo, RS232_Parse_L1
RXTimeout	0005 	RS232_Parse_Byte
SaveParams ^	005C 	Cmd_SaveParams, Cmd_SetMasterAddr, Cmd_SetSlaveAddr
SaveParams_L1 ^	0061 	SaveParams_L1
SaveSpeed ^	0348 	IdleServos_Accel_2
SendChar ^	1EFE 	BootLoaderStart, BLP_IHS_Length, BLP_IHS_CSum, BLPV_EndCmd, BLPV_Exit
		SendChar
SeqActive	0000 	IdleServos, DoSeqDone, DoSeqStopCmd, Cmd_SequencerStart
SeqMov2FSR0 ^	04CA 	DoSeqMov2MaxCmd
SeqReturn ^	046E 	DoSequenceCmd, DoSeqMov2, DoSeqCpByte, DoSeqWaitUntilCmd, DoSeqWaitInPosCmd
		DoSeqStopCmd, DoSeqWaitForBtnCmd
SequencerData	2200 	EEPromToSequencer, SequencerToEEProm, DoSequenceCmd, Cmd_SetSeqByte
		Cmd_GetSeqByte
SequencerFlags	02E5 	IdleServos, DoSeqDone, DoSeqWaitUntilCmd, DoSeqWaitInPosCmd
		DoSeqStopCmd, DoSeqWaitForBtnCmd, Cmd_SequencerStart
SequencerPtr	02E6 	DoSequenceCmd, DoSeqDone, DoSeqMoveCmd, DoSeqCpByte, DoSeqCpWord
		DoSeqSetLoopTimeCmd, DoSeqWaitUntilCmd
SequencerServoNum	02E7 	DoSeqWaitUntilCmd, DoSeqWaitInPosCmd
SequencerTime	02E8 	DoSeqWaitUntilCmd
SequencerToEEProm ^	0404 	Cmd_SaveSequencerData
SeqWaitForBtn2	0004 	DoSeqWaitForBtnCmd
SeqWaitForBtn3	0005 	DoSeqWaitForBtnCmd
SeqWaitForInPos	0002 	DoSeqWaitInPosCmd
SeqWaitForTimer	0001 	DoSeqWaitUntilCmd
Ser_Buff_Bank	2	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes, StoreSerOut, GetSerOut
Ser_In_Buff	0126 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut
Ser_In_Bytes	0120 	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes
Ser_In_InPtr	0122 	StoreSerIn, FlushInBuff
Ser_In_OutPtr	0123 	GetSerIn, FlushInBuff
Ser_Out_Buff	0146 	StoreSerOut, GetSerOut
Ser_Out_Bytes	0121 	GetSerInBytes, StoreSerOut, GetSerOut
Ser_Out_InPtr	0124 	StoreSerOut
Ser_Out_OutPtr	0125 	GetSerOut
SerFlags	0030 	TX_TheByte, RX_TheByte, ML_1, ML_Ser_Out
SerialBuffer	2180 	BootLoaderStart, FSR0_SerialBuffer
ServoAccelValue	2100 	GetAccelValue, DoSeqSetAccelCmd, Cmd_SetAccel, Cmd_GetAccel
ServoCtlFlags	02E2 	ISR_ServoCCP1, IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo1_OL
		IRQ_Servo_Next, ISR_ServoCCP2, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL, StartServos
ServoCurSpeed	2110 	SaveSpeed, GetSpeed, StartMotion, Cmd_GetCurSpeed
ServoFlags	2180 	IRQ_Servo1_PulseOrDwell, IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell
		SetFSR0ToServoFlags, StartMotion, Cmd_SetServoEnable, Cmd_GetServoEnable, Cmd_GetInPosition
ServoFlags2	2188 	SetFSR0ToServoFlags2, StartMotion
ServoIDX	02E1 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_OL, IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell
		IRQ_Servo2_OL
ServoInit16 ^	038A 	start
ServoMaxSpeed	20F0 	GetMaxSpeed, ServoInit16, EEPromToServoParams, ServoParamsToEEProm
		DoSeqSetSpeedCmd, Cmd_SetMaxSpeed, Cmd_GetMaxSpeed
ServoOnBit0_7	0002 	IRQ_Servo1_PulseOrDwell, IRQ_Servo_Next, IdleServos, StartMotion
		Cmd_SetServoEnable, Cmd_SetServoEnable_1, Cmd_GetServoEnable
ServoOnBit8_15	0006 	IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IdleServos8_15, StartMotion
		Cmd_SetServoEnable, Cmd_SetServoEnable_1, Cmd_GetServoEnable_1
ServoParamsToEEProm ^	03ED 	Cmd_SaveParams
SetFSR0ToServoFlags ^	0371 	IdleServos, IdleServos_Update, IdleServos_InPos
SetFSR0ToServoFlags2 ^	0369 	IdleServos_Accel, AccelDone
SigOutTime	2190 	IRQ_Servo1_PulseOrDwell, IRQ_Servo2_PulseOrDwell, IdleServos_Update
		IdleServos_DisInt, ServoInit16, Cmd_GetCurPos
SourceAddHiRXd	RX_ParseFlags,3	RS232_Parse
SourceAddLoRXd	RX_ParseFlags,2	RS232_Parse, RS232_Parse_SALo
SourceBuffer	2100 	BootLoaderStart, BIHD_PutInBuff_E2, BLP_WriteBuffer, FSR1_SourceBuffer
SPBRGH	019C 	InitializeIO, InitializeBLIO
SPBRGL	019B 	InitializeIO, InitializeBLIO
SPTE_L1 ^	03FD 	ServoParamsToEEProm, SPTE_L1, SequencerToEEProm
ssRX_Timeout	ssStatus,3	RS232_Parse, Cmd_GetStatus
ssStatus	0031 	RS232_Parse, Cmd_GetStatus
start ^	01BE 	ProgStartVector, ML_Ser_End
StartMotion ^	040E 	DoSeqMov2, Cmd_SetCmdPos
StartServos ^	0379 	start
STATUS	0003 	CopyToRam_L1, SaveParams_L1, DecTimer, RX_TheByte, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end
		RS232_Parse_DALo_End, RS232_Parse_Data_end, MainLoop, IdleServos_Update, IdleServos_L1
		IdleServos_MovPlus, IdleServos_L2, IdleServos_Accel_2, DoSequenceCmd, DoSeqDone
		DoSeqStopCmd, DoSeqWaitForBtnCmd, ClampInt_1, ClampInt_tooHigh, ClampMinMax_1, HandleRXData_1
		Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetMode
		Cmd_SendIDString_L1, BootLoaderStart, BLP_L2, BLP_TestNum, BLP_IHS_Length, BLP_IHS_DataType
SimpleServo16PS.asm   X-Ref Table                                        Page: 54
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

		BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate, BufferIHData, BIHD_PutInBuff_L1, GetChar
		TestErased_L1, CompareBlock_L1, CB_NotBlank, WriteProgBlock_L1
Store16Times ^	03C2 	ServoInit16
Store8Times ^	03CA 	ServoInit16
StoreSerIn ^	00D6 	ML_1
StoreSerOut ^	0103 	RS232_Send, RS232_Send_L1, StoreSerOut_S0
StoreSerOut_S0 ^	09C6 	Cmd_SendIDString_L1
StoreWord16Times ^	03B9 	ServoInit16
StoreWord16Times_L1 ^	03BB 	StoreWord16Times_L1
StoreXTimes ^	03C4 	Store8Times
StoreXTimes_L1 ^	03C6 	StoreXTimes_L1
SW1_Flag	SysFlags,0	ProgStartVector, ML_Ser_End
SW1_In	PORTB,0	ProgStartVector
SW2_Flag	SysFlags,1	ProgStartVector
SW2_In	PORTB,4	ProgStartVector
SW3_Flag	SysFlags,2	ProgStartVector
SW3_In	PORTB,5	ProgStartVector
SyncByte1RXd	RX_ParseFlags,0	RS232_Parse, RS232_Parse_Byte
SyncByte2RXd	RX_ParseFlags,1	RS232_Parse, RS232_Parse_Sync2
SysFlags	003B 	ProgStartVector, CopyToRam_L1, SaveParams_L1, ML_Ser_End
SysLED_Count	0023 	ProgStartVector, InitializeIO
SysLED_Time	0020 	ProgStartVector, InitializeIO
SysMode	0037 	CopyToRam, SaveParams, DoSeqDone, DoSeqStopCmd, Cmd_SetMode, Cmd_GetMode
SystemTick_end ^	0026 	ProgStartVector
T1CON	0018 	InitializeIO
T1CON_Val	0021 	InitializeIO
T1GCON	0019 	InitializeIO
T2CON	001C 	InitializeIO
T2CON_Value	004F 	InitializeIO
TestErased ^	1F1F 	BLP_WriteBuffer
TestErased_L1 ^	1F21 	TestErased_L1
Timer1Hi	0027 	DecTimer1, DecTimer
Timer1Lo	0026 	DecTimer, RS232_Parse, RS232_Parse_Byte
Timer2Hi	0029 	DecTimer2, DecTimer, DoSeqSetLoopTimeCmd
Timer2Lo	0028 	DecTimer, DoSeqSetLoopTimeCmd
Timer3Hi	002B 	DecTimer3, DecTimer
Timer3Lo	002A 	DecTimer
Timer4Hi	002D 	DecTimer4, DecTimer
Timer4Lo	002C 	DecTimer, InitializeIO
TMR0CS	0005 	InitializeIO, InitializeBLIO
TMR1GE	0007 	InitializeIO
TMR2_Done ^	0026 	ProgStartVector
TMR2IE	0001 	InitializeIO
TMR2IF	0001 	ProgStartVector
TRISA	008C 	InitializeIO, InitializeBLIO
TRISB	008D 	ProgStartVector, InitializeIO, InitializeBLIO
TX_ACK ^	09C5 	Cmd_SetMode, Cmd_SetCmdPos, Cmd_SetWord7879, Cmd_SetByte79, Cmd_SetServoEnable
		Cmd_SetServoEnable_1, Cmd_SaveParams, Cmd_RestoreParams, Cmd_SaveSequencerData
		Cmd_LoadSequencerData, Cmd_SequencerStart
TX_Data	00AE 	RS232_ClearTXData, RS232_Send, HandleRXData_1
TX_TheByte ^	00BC 	ML_1
TXByte	002E 	TX_TheByte, ML_Ser_Out
TXIF	0004 	ML_1, SendChar
TXREG	019A 	TX_TheByte, SendChar
TXSTA	019E 	InitializeIO, InitializeBLIO
TXSTA_Value	0024 	InitializeIO, InitializeBLIO
UseAltSerialPort	0000 	InitializeBLIO
UseEEParams	0001 	ClearRam, CopyToRam
useRS232	0001 	InitializeIO
UseRS232Chksum	0001 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_Send_L1
UseRS232SendSyncBytes	0000 	RS232_Parse, RS232_Send
UseRS232SyncBytes	0001 	RS232_Parse, RS232_Parse_Byte
ValueSentFlag0_7	0000 	IRQ_Servo1_PulseOrDwell, IdleServos, IdleServos_Update
ValueSentFlag8_15	0004 	IRQ_Servo2_PulseOrDwell, IdleServos8_15, IdleServos_Update
W	0000 	ProgStartVector, CopyToRam_L1, SaveParams_L1, DecTimer, EERead, EEWrite, TX_TheByte
		RX_TheByte, RX_TheByte_Err, StoreSerIn, GetSerIn, GetSerInBytes, StoreSerOut, GetSerOut
		RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End
		RS232_Parse_Data_end, RS232_Send, RS232_Send_L1, ML_1, IRQ_Servo1_PulseOrDwell
		IRQ_Servo1_OL, IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL, IdleServos_Update
		IdleServos_L1, IdleServos_Minus, IdleServos_Clamp, IdleServos_DisInt, IdleServos_L2
		IdleServos_Plus, IdleServos_Next, IdleServos_Accel_2, SaveSpeed, GetSpeed, GetMaxSpeed
		GetAccelValue, SetFSR0ToServoFlags2, SetFSR0ToServoFlags, StoreWord16Times_L1, StoreXTimes
		StartMotion, DoSequenceCmd, DoSeqMov2, DoSeqSetSpeedCmd, DoSeqSetAccelCmd, DoSeqSetMinCmd
		DoSeqSetMaxCmd, DoSeqSetLoopTimeCmd, DoSeqWaitUntilCmd, DoSeqMov2MinCmd, DoSeqMov2MaxCmd
		DoSeqWaitInPosCmd, DoSeqWaitForBtnCmd, ClampInt_1, ClampInt_tooHigh, ClampMinMax_1
		ClampMinMax_too, HandleRXData_1, Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4
		Dispatcher_5, Cmd_SetMode, Cmd_GetMode, Cmd_SetCmdPos, Cmd_SetWord7879, Cmd_GetCmdPos
		Cmd_SetAccel, Cmd_SetByte79, Cmd_GetAccel, Cmd_SetServoEnable, Cmd_SetMaxSpeed
		Cmd_GetMaxSpeed, Cmd_SetMin_uS, Cmd_GetMin_uS, Cmd_SetMax_uS, Cmd_GetMax_uS, Cmd_SetSeqByte
		Cmd_GetSeqByte, Cmd_GetCurSpeed, Cmd_GetCurPos, Cmd_GetStatus, Cmd_SendIDString_L1
		BLP_L2, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_Length, BLP_SaveIH_Length
		BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
		BLP_Validate, BufferIHData, BIHD_PutInBuff, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
		GetChar, GetChar_Err, ReadEEData, CompareBlock_L1, CB_NotBlank, ReadProgBlock_L1
		LoadProgAddr, WriteProgBlock_L1
WDTCON	0097 	InitializeIO, InitializeBLIO
WPUA	020C 	InitializeIO, InitializeBLIO
WPUA5	0005 	InitializeIO, InitializeBLIO
WR	0001 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
WREG	0009 	BLP_WriteBuffer
WREN	0002 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock
		WriteProgBlock_Wr
WriteEEData ^	1F0D 	BootLoaderStart
WriteEEData_L1 ^	1F1A 	WriteEEData_L1
WriteProgBlock ^	1F7A 	BLP_WriteBuffer
WriteProgBlock_L1 ^	1F81 	WriteProgBlock_L1
WriteProgBlock_Wr ^	1F93 	WriteProgBlock_L1
Z	0002 	CopyToRam_L1, SaveParams_L1, DecTimer, RX_TheByte, GetSerIn, StoreSerOut
SimpleServo16PS.asm   X-Ref Table                                        Page: 55
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

		GetSerOut, RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end
		RS232_Parse_DALo_End, RS232_Parse_Data_end, MainLoop, IdleServos_Update, IdleServos_MovPlus
		IdleServos_Accel_2, DoSeqDone, DoSeqStopCmd, DoSeqWaitForBtnCmd, ClampInt_1, ClampInt_tooHigh
		ClampMinMax_1, HandleRXData_1, Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4
		Dispatcher_5, Cmd_SendIDString_L1, BootLoaderStart, BLP_L2, BLP_TestNum, BLP_IHS_DataType
		BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate, BufferIHData, BIHD_PutInBuff_L1, GetChar
		TestErased_L1, CompareBlock_L1, CB_NotBlank, WriteProgBlock_L1
 

X-Ref Table (The UnCalled)
BootLoader !	1E00 	
ClampInt !	04ED 	
ClampMinMax !	050E 	
Delay100uS !	0090 	
Delay10uS !	008E 	
Delay40uS !	0092 	
EEReadW !	0099 	
EraseBlock !	1F48 	
GetSerOutBytes !	00FF 	
IRQ_Servo2_End !	029C 	
POP_SerOut !	0111 	
RS232_Parse_DALo !	015E 	
RS232_Parse_Data !	016C 	
TestT1_Zero !	008A 	
TestT2_Zero !	0086 	
TestT3_Zero !	0082 	
TestT4_Zero !	007E 	
WriteProgBlock_end !	1F9C 	
 

Memory Usage Map ('X' = Used, '-' = Unused)
 
0000  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXX---------
0800  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00  : XXXXXXXXXXXXXXXX XXXXX----------- ---------------- ----------------
1E00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1EC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1FC0  : XXXXXXXX-------- ---------------- ---------------- ----------------
 
Program Memory Words Used:2324
Program Memory Words Free:5868
 
UserID
8000  :XXXX
 
Config
8007  :XX
 
EEPROM
F000  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
F040  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
F080  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
F0C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXX--- ---------------X
 
Data EEPROM Bytes Used:238
Data EEPROM Bytes Free:18
