SimpleServo16PS.asm                                                   Page: 1
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00001 0000 	;====================================================================================================
00002 0000 	;
00003 0000 	;    Filename:      SimpleServo16PS.asm
00004 0000 	;    Date:          3/31/2021
00005 0000 	;    File Version:  1.0d1
00006 0000 	;    
00007 0000 	;    Author:        David M. Flynn
00008 0000 	;    Company:       Oxford V.U.E., Inc.
00009 0000 	;    E-Mail:        dflynn@oxfordvue.com
00010 0000 	;    Web Site:      http://www.oxfordvue.com/
00011 0000 	;
00012 0000 	;====================================================================================================
00013 0000 	;    SimpleServo is a 16 servo controller with speed, accel and position control.
00014 0000 	;    SimpleServo16PS is the TTL packet serial version.
00015 0000 	;
00016 0000 	;    Features:	TTL Packet Serial
00017 0000 	;	R/C Servo PWM output 16 channel at 20mS
00018 0000 	;	3 Buttons/LEDs for config
00019 0000 	;
00020 0000 	;    History:
00021 0000 	; 1.0d1   3/31/2021	Copied from Simple Servo 16 1.0d3
00022 0000 	;
00023 0000 	;====================================================================================================
00024 0000 	; Options
00025 0000 0034 	I2C_ADDRESS	EQU	0x34	; Slave address
00026 0000 	;
00027 0000 	;====================================================================================================
00028 0000 	;====================================================================================================
00029 0000 	; What happens next:
00030 0000 	;   At power up the system LED will blink.
00031 0000 	;
00032 0000 	;====================================================================================================
00033 0000 	; PIC16F1847 on SimpleServo16 PCB Packet Serial Version
00034 0000 	;
00035 0000 	;   Pin 1 (RA2/AN2) Address A2 (output)
00036 0000 	;   Pin 2 (RA3/AN3) Enable Servos 0..7 (active low output)
00037 0000 	;   Pin 3 (RA4/AN4) Enable Servos 8..15 (active low output)
00038 0000 	;   Pin 4 (RA5/MCLR*) Vpp
00039 0000 	;   Pin 5 (GND) Ground
00040 0000 	;   Pin 6 (RB0) SW1/LED1 (Active Low Input/Output) (System LED)
00041 0000 	;   Pin 7 (RB1/AN11/SDA1) RX Data
00042 0000 	;   Pin 8 (RB2/AN10/RX)   TX Data 
00043 0000 	;   Pin 9 (RB3/CCP1) Pulse output for Servos 0..7
00044 0000 	;
00045 0000 	;   Pin 10 (RB4/AN8/SLC1) SW2/LED2 (Active Low Input/Output)
00046 0000 	;   Pin 11 (RB5/AN7)  SW3/LED3 (Active Low Input/Output)
00047 0000 	;   Pin 12 (RB6/AN5/CCP2) ICSPCLK
00048 0000 	;   Pin 13 (RB7/AN6) ICSPDAT
00049 0000 	;   Pin 14 (Vcc) +5 volts
00050 0000 	;   Pin 15 (RA6) N.C.
00051 0000 	;   Pin 16 (RA7/CCP2) Pulse output for Servos 8..15
00052 0000 	;   Pin 17 (RA0) Address A0 (output)
00053 0000 	;   Pin 18 (RA1) Address A1 (output)
00054 0000 	;
00055 0000 	;====================================================================================================
00056 0000 	;
00057 0000 	;
00058 0000 		list	p=16f1847,r=hex,W=1	; list directive to define processor
00001 0000 		nolist
00002 0000 	;
00003 0000 	;==========================================================================
00004 0000 	;  MPASM PIC16F1847 processor include
00005 0000 	; 
00006 0000 	;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
00007 0000 	;  Modified by DMF 11/16/2013
00008 0000 	;==========================================================================
00009 0000 	;
01163 0000 		NOLIST
01164 0000 	;
00061 0000 		list
00062 0000 	;
00063 8007 EFA4 		__CONFIG _CONFIG1,_FOSC_INTOSC & _WDTE_OFF & _MCLRE_OFF & _IESO_OFF
00064 0000 	;
00065 0000 	;
00066 0000 	; INTOSC oscillator: I/O function on CLKIN pin
00067 0000 	; WDT disabled
00068 0000 	; PWRT disabled
00069 0000 	; MCLR/VPP pin function is digital input
00070 0000 	; Program memory code protection is disabled
00071 0000 	; Data memory code protection is disabled
00072 0000 	; Brown-out Reset enabled
00073 0000 	; CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin
00074 0000 	; Internal/External Switchover mode is disabled
00075 0000 	; Fail-Safe Clock Monitor is enabled
00076 0000 	;
00077 8008 DEFF 		__CONFIG _CONFIG2,_WRT_OFF & _PLLEN_OFF & _LVP_OFF
00078 0000 	;
00079 0000 	; Write protection off
00080 0000 	; 4x PLL disabled
00081 0000 	; Stack Overflow or Underflow will cause a Reset
00082 0000 	; Brown-out Reset Voltage (Vbor), low trip point selected.
00083 0000 	; Low-voltage programming enabled
00084 0000 	;
00085 0000 	; '__CONFIG' directive is used to embed configuration data within .asm file.
00086 0000 	; The lables following the directive are located in the respective .inc file.
00087 0000 	; See respective data sheet for additional information on configuration word.
00088 0000 	;
00089 0000 		constant	oldCode=0
00090 0000 		constant	useRS232=1
SimpleServo16PS.asm                                                   Page: 2
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00091 0000 		constant	UseEEParams=1
00092 0000 		constant	UseAuxLEDBlinking=0
00093 0000 	;
00094 0000 		constant	UseAltSerialPort=0
00095 0000 		constant	RP_LongAddr=0
00096 0000 		constant	RP_AddressBytes=1
00097 0000 		constant	RP_DataBytes=4
00098 0000 		constant	UseRS232SyncBytes=1
00099 0000 00DD 	kRS232SyncByteValue	EQU	0xDD
00100 0000 		constant	UseRS232Chksum=1
00101 0000 		constant               UsePID=0
00102 0000 	;
00103 0000 0001 	kRS232_MasterAddr	EQU	0x01	;Master's Address
00104 0000 0002 	kRS232_SlaveAddr	EQU	0x02	;This Slave's Address
00105 0000 0000 	kSysMode	EQU	.0	;Default Mode
00106 0000 0000 	kMaxMode	EQU	.0	;Last mode
00107 0000 0000 	kssFlags	EQU	.0
00108 0000 	;
00109 0000 0003 	#Define	_C	STATUS,C
00110 0000 0003 	#Define	_Z	STATUS,Z
00111 0000 	;
00112 0000 	;====================================================================================================
00115 0000 		nolist
00116 0000 	;
00117 0000 	;    Port A bits
00118 0000 0060 	PortADDRBits	EQU	b'01100000'
00119 0000 0018 	PortAValue	EQU	b'00011000'
00120 0000 0000 	ANSELA_Val	EQU	b'00000000'
00121 0000 	;
00122 0000 010C 	#Define	Servo_A0	LATA,0	;Output
00123 0000 010C 	#Define	Servo_A1	LATA,1	;Output
00124 0000 010C 	#Define	Servo_A2	LATA,2	;Output
00125 0000 010C 	#Define	Enable0_7	LATA,3	;Output RA3
00126 0000 010C 	#Define	Enable8_15	LATA,4	;Output RA4
00127 0000 000C 	#Define	RA5_In	PORTA,5	;unused, Vpp
00128 0000 000C 	#Define	RA6_In	PORTA,6	;unused, n/c
00129 0000 000C 	#Define	RA7_Out	PORTA,7	;CCP2 Output
00130 0000 	;
00131 0000 00F8 	Servo_AddrDataMask	EQU	0xF8
00132 0000 	;
00133 0000 	;
00134 0000 	;    Port B bits
00135 0000 00F7 	PortBDDRBits	EQU	b'11110111'	;LEDs Out Others In
00136 0000 0004 	PortBValue	EQU	b'00000100'
00137 0000 0000 	ANSELB_Val	EQU	b'00000000'
00138 0000 	;
00139 0000 000D 	#Define	SW1_In	PORTB,0	;SW1/LED1
00140 0000 000D 	#Define	RB1_In	PORTB,1	;RX Data
00141 0000 000D 	#Define	RB2_In	PORTB,2	;TX Data
00142 0000 000D 	#Define	RB3_Out	PORTB,3	;CCP1 Output
00143 0000 000D 	#Define	SW2_In	PORTB,4	;SW2/LED2
00144 0000 000D 	#Define	SW3_In	PORTB,5	;SW3/LED3
00145 0000 000D 	#Define	RB6_In	PORTB,6	;N.C. ICSPCLK
00146 0000 000D 	#Define	RB7_In	PORTB,7	;N.C. ICSPDAT
00147 0000 0000 	LED1_Bit	EQU	0	;LED1 (Active Low Output)
00148 0000 0004 	LED2_Bit	EQU	4	;LED2 (Active Low Output)
00149 0000 0005 	LED3_Bit	EQU	5	;LED3 (Active Low Output)
00150 0000 008D 	#Define	LED1_Tris	TRISB,LED1_Bit	;LED1 (Active Low Output)
00151 0000 008D 	#Define	LED2_Tris	TRISB,LED2_Bit	;LED2 (Active Low Output)
00152 0000 008D 	#Define	LED3_Tris	TRISB,LED3_Bit	;LED3 (Active Low Output)
00153 0000 	;
00154 0000 	;
00155 0000 	;========================================================================================
00156 0000 	;========================================================================================
00157 0000 	;
00158 0000 	;Constants
00159 0000 00FF 	All_In	EQU	0xFF
00160 0000 0000 	All_Out	EQU	0x00
00161 0000 	;
00162 0000 	;OSCCON_Value	EQU	b'01110010'	;8MHz
00163 0000 00F0 	OSCCON_Value	EQU	b'11110000'	;32MHz
00164 0000 	;T2CON_Value	EQU	b'01001110'	;T2 On, /16 pre, /10 post
00165 0000 004F 	T2CON_Value	EQU	b'01001111'	;T2 On, /64 pre, /10 post
00166 0000 007D 	PR2_Value	EQU	.125
00167 0000 	;
00168 0000 0064 	LEDTIME	EQU	d'100'	;1.00 seconds
00169 0000 000A 	LEDErrorTime	EQU	d'10'
00170 0000 0014 	LEDFastTime	EQU	d'20'
00171 0000 	;
00172 0000 0001 	T1CON_Val	EQU	b'00000001'	;PreScale=1,Fosc/4,Timer ON
00173 0000 003C 	TMR1L_Val	EQU	0x3C	; -2500 = 2.5 mS, 400 steps/sec
00174 0000 00F6 	TMR1H_Val	EQU	0xF6
00175 0000 	;
00176 0000 	;TMR1L_Val	EQU	0x1E	; -1250 = 1.25 mS, 800 steps/sec
00177 0000 	;TMR1H_Val	EQU	0xFB
00178 0000 	;
00179 0000 	;TMR1L_Val	EQU	0x8F	; -625 = 0.625 mS, 1600 steps/sec
00180 0000 	;TMR1H_Val	EQU	0xFD
00181 0000 	;
00182 0000 0024 	TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, high speed
00183 0000 0090 	RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00184 0000 0008 	BAUDCON_Value	EQU	b'00001000'	;BRG16=1
00185 0000 	; 32MHz clock low speed (BRGH=1,BRG16=1)
00186 0000 682A 	Baud_300	EQU	.26666	;300, 0.00%
00187 0000 1A0A 	Baud_1200	EQU	.6666	;1200, 0.00%
00188 0000 0D04 	Baud_2400	EQU	.3332	;2400, +0.01%
00189 0000 0340 	Baud_9600	EQU	.832	;9604, +0.04%
00190 0000 01A0 	Baud_19200	EQU	.416	;19.18k, -0.08%
00191 0000 00CF 	Baud_38400	EQU	.207	;38.46k, +0.16%
SimpleServo16PS.asm                                                   Page: 3
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00192 0000 008A 	Baud_57600	EQU	.138	;57.55k, -0.08%
00193 0000 00CF 	BaudRate	EQU	Baud_38400
00194 0000 	;
00195 0000 	;
00196 0000 	;
00197 0000 000A 	DebounceTime	EQU	d'10'
00198 0000 	;
00199 0000 	;================================================================================================
00200 0000 	;***** VARIABLE DEFINITIONS
00201 0000 	; there are 256 bytes of ram, Bank0 0x20..0x7F, Bank1 0xA0..0xEF, Bank2 0x120..0x16F
00202 0000 	; there are 256 bytes of EEPROM starting at 0x00 the EEPROM is not mapped into memory but
00203 0000 	;  accessed through the EEADR and EEDATA registers
00204 0000 	;================================================================================================
00205 0000 	;  Bank0 Ram 020h-06Fh 80 Bytes
00206 0000 	;
00207 0000 		cblock	0x20 
00208 0000 	;
00209 0000 0020 		SysLED_Time		;sys LED time
00210 0000 0021 		SysLED_Blinks		;0=1 flash,1,2,3
00211 0000 0022 		SysLED_BlinkCount
00212 0000 0023 		SysLED_Count		;sys LED Timer tick count
00213 0000 	;
00214 0000 0024 		EEAddrTemp		;EEProm address to read or write
00215 0000 0025 		EEDataTemp		;Data to be writen to EEProm
00216 0000 	;
00217 0000 0026 		Timer1Lo		;1st 16 bit timer
00218 0000 0027 		Timer1Hi		; one second RX timeiout
00219 0000 0028 		Timer2Lo		;2nd 16 bit timer
00220 0000 0029 		Timer2Hi		;
00221 0000 002A 		Timer3Lo		;3rd 16 bit timer
00222 0000 002B 		Timer3Hi		;GP wait timer
00223 0000 002C 		Timer4Lo		;4th 16 bit timer
00224 0000 002D 		Timer4Hi		; debounce timer
00225 0000 	;
00226 0000 002E 		TXByte		;Next byte to send
00227 0000 002F 		RXByte		;Last byte received
00228 0000 0030 		SerFlags
00229 0000 	;
00230 0000 0031 		ssStatus:4		;Status and condition flags for the user.
00231 0000 	;
00232 0000 0035 		Flags
00233 0000 0036 		SendingIdx
00234 0000 	;---------------------
00235 0000 	;Below here are saved in eeprom
00236 0000 	;
00237 0000 0037 		SysMode
00238 0000 0038 		RS232_MasterAddr
00239 0000 0039 		RS232_SlaveAddr
00240 0000 003A 		ssFlags		;Serial Servo flags
00241 0000 003B 		SysFlags
00242 0000 	;
00243 0000 		endc
00244 0000 	;
00245 0000 003B 	#Define	SW1_Flag	SysFlags,0
00246 0000 003B 	#Define	SW2_Flag	SysFlags,1
00247 0000 003B 	#Define	SW3_Flag	SysFlags,2
00248 0000 003B 	#Define	LED2_Flag	SysFlags,3
00249 0000 003B 	#Define	LED3_Flag	SysFlags,4
00250 0000 	;
00251 0000 0037 	#Define	FirstRAMParam	SysMode
00252 0000 003B 	#Define	LastRAMParam	SysFlags
00253 0000 	;
00254 0000 0030 	#Define	DataReceivedFlag	SerFlags,1
00255 0000 0030 	#Define	DataSentFlag	SerFlags,2
00256 0000 	;
00257 0000 	;----ssStatus bits
00258 0000 0031 	#Define	ssRX_Timeout	ssStatus,3	;cleared by host read
00259 0000 	;
00260 0000 	; all bits of ssStatus+1 are cleared by a host kCmd_GetStatus command.
00261 0000 	;
00262 0000 	;================================================================================================
00263 0000 	;  Bank1 Ram 0A0h-0EFh 80 Bytes
00264 0000 		cblock	0x0A0
00265 0000 00A0 		RX_ParseFlags
00266 0000 00A1 		RX_Flags
00267 0000 00A2 		RX_DataCount
00268 0000 00A3 		RX_CSUM
00269 0000 00A4 		RX_SrcAdd:RP_AddressBytes
00270 0000 00A5 		RX_DstAdd:RP_AddressBytes
00271 0000 00A6 		RX_TempData:RP_DataBytes
00272 0000 00AA 		RX_Data:RP_DataBytes
00273 0000 00AE 		TX_Data:RP_DataBytes
00274 0000 		endc
00275 0000 	;
00276 0000 	;================================================================================================
00277 0000 	;  Bank2 Ram 120h-16Fh 80 Bytes
00278 0000 	;
00279 0000 0002 	#Define	Ser_Buff_Bank	2
00280 0000 	;
00281 0000 		cblock	0x120
00282 0000 0120 		Ser_In_Bytes		;Bytes in Ser_In_Buff
00283 0000 0121 		Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00284 0000 0122 		Ser_In_InPtr
00285 0000 0123 		Ser_In_OutPtr
00286 0000 0124 		Ser_Out_InPtr
00287 0000 0125 		Ser_Out_OutPtr
00288 0000 0126 		Ser_In_Buff:20
00289 0000 0146 		Ser_Out_Buff:20
00290 0000 		endc
SimpleServo16PS.asm                                                   Page: 4
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00291 0000 	;
00292 0000 	;
00293 0000 	;====================================================================================================
00294 0000 	;  Part of SimpleServo16
00295 0000 	;    Defines constants and variables in Banks 3,4,5 and 6
00296 0000 	;
00297 0000 		include <ServoLib.h>
00001 0000 	;====================================================================================================
00002 0000 	;
00003 0000 	;    Filename:      ServoLib.h
00004 0000 	;    Date:          11/28/2015
00005 0000 	;    File Version:  1.0
00006 0000 	;    
00007 0000 	;    Author:        David M. Flynn
00008 0000 	;    Company:       Oxford V.U.E., Inc.
00009 0000 	;    E-Mail:        dflynn@oxfordvue.com
00010 0000 	;    Web Site:      http://www.oxfordvue.com/
00011 0000 	;
00012 0000 	;====================================================================================================
00013 0000 	;  Part of SimpleServo16
00014 0000 	;    Defines constants and variables in Banks 3,4,5 and 6
00015 0000 	;
00016 0000 	;    History:
00017 0000 	;
00018 0000 	; 1.0   11/28/2015	First rev'd version.
00019 0000 	;
00020 0000 	;====================================================================================================
00021 0000 	;====================================================================================================
00022 0000 	; Constants:
00023 0000 	;
00024 0000 0030 	DefaultMaxSpeed	EQU	0x30	;1uS/20mS^2
00025 0000 0001 	DefaultAccel	EQU	0x01
00026 0000 0022 	DefaultSFlags	EQU	b'00100010'	;In Position
00027 0000 	;
00028 0000 0009 	CCPCON_Clr	EQU	b'00001001'	;Clear output on match
00029 0000 0008 	CCPCON_Set	EQU	b'00001000'	;Set output on match
00030 0000 000A 	CCPCON_Int	EQU	b'00001010'	;Interupt only on match
00031 0000 	;
00032 0000 0BB8 	kCenterPulseWidth	EQU	d'3000'	;1500uS
00033 0000 0708 	kMinPulseWidth	EQU	d'1800'	;900uS
00034 0000 1068 	kMaxPulseWidth	EQU	d'4200'	;2100uS
00035 0000 1194 	kServoDwellTimeA	EQU	d'4500'	;Address Change time 2250uS
00036 0000 01F4 	kServoAddrTime	EQU	d'500'	;250uS
00037 0000 1388 	kServoDwellTime	EQU	d'5000'	;2.5mS/Channel
00038 0000 	;
00039 0000 	;================================================================================================
00040 0000 	; Linear data memory 0x2000 .. 0x29AF access using FSR
00041 0000 		cblock	0x20F0	;beginning of bank 3
00042 0000 	;  Bank3 Ram 1A0h-1EFh 80 Bytes
00043 0000 20F0 		ServoMaxSpeed:10		;0=no Accel, 1..255 counts/20mS
00044 0000 2100 		ServoAccelValue:10		;1..8 counts/20mS squared
00045 0000 2110 		ServoCurSpeed:10		;0=Stopped, MSb=Direction, 1..127
00046 0000 2120 		CMDSigTime:20		;Commanded position MinTime .. MaxTime
00047 0000 	; bank4 Ram 220h-26Fh 80 Bytes
00048 0000 2140 		MinTime:20		;Minimum pulse time (900uS=1800)
00049 0000 2160 		MaxTime:20		;Maximum pulse time (2100uS=4200)
00050 0000 2180 		ServoFlags:8		;4 bits per servo
00051 0000 2188 		ServoFlags2:8		;4 bits per servo
00052 0000 	; bank 5 Ram 2A0h-2EFh 80 Bytes
00053 0000 2190 		SigOutTime:20		;Current position
00054 0000 21B0 		DwellTime:20
00055 0000 		endc
00056 0000 	;
00057 0000 		cblock	0x2E0	;locate after DwellTime
00058 0000 	; these are in bank 5 because the CCP1 and CCP2 CONs are here, accessed w/o FSR
00059 0000 02E0 		CMDServoIDX
00060 0000 02E1 		ServoIDX		;Index 0..7
00061 0000 02E2 		ServoCtlFlags	
00062 0000 02E3 		CalcdDwell		;scratch var
00063 0000 02E4 		CalcdDwellH
00064 0000 	; there are .11 bytes left in bank 5
00065 0000 		endc
00066 0000 	;
00067 0000 		cblock	0x21E0	;beginning of bank 6
00068 0000 	;  Bank6 Ram 320h-26Fh 80 Bytes
00069 0000 21E0 		AccelRampLen:20
00070 0000 		endc
00071 0000 	;
00072 0000 	;
00073 0000 	;================================================================================================
00074 0000 	;
00075 0000 	;
00076 0000 	; ServoCtlFlags Flag bits, ToDo at Next ISR:
00077 0000 0000 	CyclePulseStart	EQU	0	;Start cycle banks 1 and 2
00078 0000 0002 	CyclePulseEnd1	EQU	2	;End pulse, begin dwell
00079 0000 0003 	CyclePulseEnd2	EQU	3	; Set when a pulse is started.
00080 0000 0004 	AddrChngDwell	EQU	4	;dwell 100uS , change address
00081 0000 	;
00082 0000 	; ServoFlags Flag bits
00083 0000 0000 	ValueSentFlag0_7	EQU	0
00084 0000 0001 	InPositionFlag0_7	EQU	1
00085 0000 0002 	ServoOnBit0_7	EQU	2
00086 0000 0003 	MovingFWD0_7	EQU	3
00087 0000 0004 	ValueSentFlag8_15	EQU	4
00088 0000 0005 	InPositionFlag8_15	EQU	5
00089 0000 0006 	ServoOnBit8_15	EQU	6
00090 0000 0007 	MovingFWD8_15	EQU	7
00091 0000 	;
00092 0000 	; ServoFlags2 Flag bits
SimpleServo16PS.asm                                                   Page: 5
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00093 0000 0000 	AccelComplete0_7	EQU	0
00094 0000 0004 	AccelComplete8_15	EQU	4
00095 0000 	;
00096 0000 	;=========================================================================================
00097 0000 	;
00298 0000 	;
00299 0000 	;=======================================================================================================
00300 0000 	;  Common Ram 70-7F same for all banks
00301 0000 	;      except for ISR_W_Temp these are used for paramiter passing and temp vars
00302 0000 	;=======================================================================================================
00303 0000 	;
00304 0000 		cblock	0x70
00305 0000 0070 		Param70	
00306 0000 0071 		Param71	
00307 0000 0072 		Param72	
00308 0000 0073 		Param73
00309 0000 0074 		Param74
00310 0000 0075 		Param75
00311 0000 0076 		Param76
00312 0000 0077 		Param77
00313 0000 0078 		Param78
00314 0000 0079 		Param79
00315 0000 007A 		Param7A
00316 0000 007B 		Param7B
00317 0000 007C 		Param7C
00318 0000 007D 		Param7D
00319 0000 007E 		Param7E
00320 0000 007F 		Param7F
00321 0000 		endc
00322 0000 	;
00323 0000 	;
00324 0000 	;=========================================================================================
00325 0000 	;Conditions
00326 0000 0080 	HasISR	EQU	0x80	;used to enable interupts 0x80=true 0x00=false
00327 0000 	;
00328 0000 	;=========================================================================================
00329 0000 	;==============================================================================================
00330 0000 	; ID Locations
00331 0000 		__idlocs	0x10d1
00332 0000 	;
00333 0000 	;==============================================================================================
00334 0000 	; EEPROM locations (NV-RAM) 0x00..0x7F (offsets)
00335 0000 	;
00336 0000 	; default values
00337 0000 		ORG	0xF000
00338 F000 	;
00339 F000 0000 		de	kSysMode	;nvSysMode
00340 F001 0001 		de	kRS232_MasterAddr	;nvRS232_MasterAddr
00341 F002 0002 		de	kRS232_SlaveAddr	;nvRS232_SlaveAddr
00342 F003 0000 		de	kssFlags	;nvssFlags
00343 F004 	;
00344 F004 	; add any new params here
00345 F004 	;
00346 F004 0000 		de	0x00	;nvSysFlags
00347 F005 	;
00348 F005 		ORG	0xF0FF
00349 F0FF 0000 		de	0x00	;Skip BootLoader
00350 F100 	;
00351 F100 	; EEPROM locations (NV-RAM) 0x00..0x7F (offsets)
00352 F100 	;
00353 F100 		cblock	0x0000
00354 F100 	;
00355 F100 0000 		nvSysMode
00356 F100 0001 		nvRS232_MasterAddr
00357 F100 0002 		nvRS232_SlaveAddr
00358 F100 0003 		nvssFlags
00359 F100 0004 		nvSysFlags
00360 F100 	;
00361 F100 		endc
00362 F100 	;
00363 F100 0000 	#Define	nvFirstParamByte	nvSysMode
00364 F100 0004 	#Define	nvLastParamByte	nvSysFlags
00365 F100 	;
00366 F100 	;
00367 F100 	;==============================================================================================
00368 F100 	;============================================================================================
00369 F100 	;
00370 F100 1E00 	BootLoaderStart	EQU	0x1E00
00371 F100 	;
00372 F100 		ORG	0x000	; processor reset vector
00373 0000 319E 		movlp	BootLoaderStart
00374 0001 2E00 		goto	BootLoaderStart
00375 0002 018A 	ProgStartVector	CLRF	PCLATH
00376 0003 29BB 	  	goto	start	; go to beginning of program
00377 0004 	;
00378 0004 	;===============================================================================================
00379 0004 	; Interupt Service Routine
00380 0004 	;
00381 0004 	; we loop through the interupt service routing every 0.008192 seconds
00382 0004 	;
00383 0004 	;
00384 0004 		ORG	0x004	; interrupt vector location
00385 0004 0188 		CLRF	BSR	; bank0
00386 0005 018A 		clrf	PCLATH
00387 0006 	;
00388 0006 	; Timer 2
00389 0006 1C91 		BTFSS	PIR1,TMR2IF
00390 0007 2827 		goto	SystemTick_end
00391 0008 	;
SimpleServo16PS.asm                                                   Page: 6
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00392 0008 1091 		BCF	PIR1,TMR2IF	; reset interupt flag bit
00393 0009 	;------------------
00394 0009 	; These routines run 100 times per second
00395 0009 	;------------------
00396 0009 	;Decrement timers until they are zero
00397 0009 	; 
00398 0009 0185 		CLRF	FSR0H
00399 000A 206D 		call	DecTimer1	;if timer 1 is not zero decrement
00400 000B 206B 		call	DecTimer2
00401 000C 2069 		call	DecTimer3
00402 000D 2067 		call	DecTimer4
00403 000E 	;
00404 000E 	;-----------------------------------------------------------------
00405 000E 	; blink LEDs
00406 000E 308D 		MOVLW	LOW TRISB
00407 000F 0084 		MOVWF	FSR0L
00408 0010 3000 		MOVLW	HIGH TRISB
00409 0011 0085 		MOVWF	FSR0H
00410 0012 	; All LEDs off
00411 0012 1400 		BSF	INDF0,LED1_Bit
00412 0013 1600 		BSF	INDF0,LED2_Bit
00413 0014 1680 		BSF	INDF0,LED3_Bit
00414 0015 	;
00415 0015 	; Read SW's
00416 0015 103B 		BCF	SW1_Flag
00417 0016 10BB 		BCF	SW2_Flag
00418 0017 113B 		BCF	SW3_Flag
00419 0018 1C0D 		BTFSS	SW1_In
00420 0019 143B 		BSF	SW1_Flag
00421 001A 1E0D 		BTFSS	SW2_In
00422 001B 14BB 		BSF	SW2_Flag
00423 001C 1E8D 		BTFSS	SW3_In
00424 001D 153B 		BSF	SW3_Flag
00425 001E 	; Dec LED time
00426 001E 0BA3 		DECFSZ	SysLED_Count,F	;Is it time?
00427 001F 3207 		bra	TMR2_Done	; No, not yet
00428 0020 	;
00429 0020 0820 		MOVF	SysLED_Time,W
00430 0021 00A3 		MOVWF	SysLED_Count
00431 0022 	; Flash LEDs
00432 0022 1000 		BCF	INDF0,LED1_Bit
00433 0023 19BB 		BTFSC	LED2_Flag
00434 0024 1200 		BCF	INDF0,LED2_Bit
00435 0025 1A3B 		BTFSC	LED3_Flag
00436 0026 1280 		BCF	INDF0,LED3_Bit
00437 0027 	;
00438 0027 	;
00439 0027 	TMR2_Done:
00440 0027 	SystemTick_end:	
00441 0027 	;
00442 0027 	;=========================================================================================
00443 0027 0020 		MOVLB	0	;Bank0
00444 0028 1911 		BTFSC	PIR1,CCP1IF
00445 0029 21DD 		CALL	ISR_ServoCCP1
00446 002A 	;
00447 002A 1812 		BTFSC	PIR2,CCP2IF
00448 002B 2253 		CALL	ISR_ServoCCP2
00449 002C 	;
00450 002C 	;=========================================================================================
00451 002C 	;-----------------------------------------------------------------------------------------
00452 002C 	;--------------------------------------------------------------------
00453 002C 	;
00454 002C 0009 		retfie		; return from interrupt
00455 002D 	;
00456 002D 	;
00457 002D 	;==============================================================================================
00458 002D 	;==============================================================================================
00459 002D 	;
00460 002D 		include <F1847_Common.inc>
00001 002D 	;=========================================================================================
00002 002D 	; Commonly used routines PIC16F1847 version
00003 002D 	;
00004 002D 	;    Filename:      F1847 Common.inc
00005 002D 	;    Date:          4/6/2019
00006 002D 	;    File Version:  1.0.2
00007 002D 	;
00008 002D 	;    Author:        David M. Flynn
00009 002D 	;    Company:       Oxford V.U.E., Inc.
00010 002D 	;    E-Mail:        dflynn@oxfordvue.com
00011 002D 	;    Web Site:      http://www.oxfordvue.com/
00012 002D 	;
00013 002D 	;=========================================================================================
00014 002D 	;    History:
00015 002D 	;
00016 002D 	; 1.0.2  4/6/2019	Fixes to EERead/EEwrite
00017 002D 	; 1.0.2 2/16/2019	Fix: added FSR0H to DecTimer.
00018 002D 	; 1.0.1 11/21/2015	Updates DecTimer.
00019 002D 	; 1.0   11/16/2013	Updated from F648A Common.inc
00020 002D 	;
00021 002D 	;=========================================================================================
00022 002D 	; Routines:
00023 002D 	;
00024 002D 	; ClearRam	(2+0) Clears all RAM, call once before initializing variables, FSR0
00025 002D 	; CopyToRam	(1+0) copy param memory (EEPROM) to ram, call once, FSR0
00026 002D 	; SaveParams	(1+0) copy ram to param memory (EEPROM), FSR0
00027 002D 	;
00028 002D 	; DecTimer4	(0+0) Decrement routine for 16 bit timers, FSR0
00029 002D 	; DecTimer3
00030 002D 	; DecTimer2
SimpleServo16PS.asm                                                   Page: 7
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00031 002D 	; DecTimer1
00032 002D 	; DecTimer	(0+0) High byte of counter address in W
00033 002D 	;
00034 002D 	; TestT4_Zero	Test for 16 bit timers = zero
00035 002D 	; TestT3_Zero	If Timer is zero return Z flag,1 else Z=0
00036 002D 	; TestT2_Zero
00037 002D 	; TestT1_Zero
00038 002D 	;
00039 002D 	; Delay10uS	(0+0)Delay uS    1 cycle = 1uS, 8Mhz clock version
00040 002D 	; Delay100uS
00041 002D 	; Delay40uS
00042 002D 	; DelayWuS
00043 002D 	;
00044 002D 	; EEReadW	(0+0) Read EEPROM address in W
00045 002D 	; EERead	(0+0) Read EEPROM address in EEAddrTemp
00046 002D 	; EEWriteW	(0+0) Write EEPROM address in W, Data in EEDataTemp
00047 002D 	; EEWrite	(0+0) Write EEPROM address in EEAdrTemp, Data in EEDataTemp, FSR0
00048 002D 	;
00049 002D 	;=========================================================================================
00050 002D 		ifndef UseEEParams
00052 002D 		endif
00053 002D 	;=========================================================================================
00054 002D 	; Clears all RAM
00055 002D 	; Entry: none
00056 002D 	; Exit: none
00057 002D 	; RAM used: All
00058 002D 	; Calls:(2+0) ClearRam_L2
00059 002D 	;
00060 002D 0020 	ClearRam	MOVLB	0x00
00061 002E 305F 		MOVLW	0x5F	;Clear 20h-7Eh, 95 bytes
00062 002F 00FF 		MOVWF	Param7F
00063 0030 3020 		MOVLW	0x20
00064 0031 0084 		MOVWF	FSR0
00065 0032 0185 		CLRF	FSR0H
00066 0033 2047 		CALL	ClearRam_L2
00067 0034 	;
00068 0034 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00069 0035 00FF 		MOVWF	Param7F
00070 0036 30A0 		MOVLW	0xA0
00071 0037 0084 		MOVWF	FSR0
00072 0038 2047 		CALL	ClearRam_L2
00073 0039 	;
00074 0039 0A85 		INCF	FSR0H,F	
00075 003A 203E 		CALL	ClearRam_2	;Banks 2,3
00076 003B 0A85 		INCF	FSR0H,F	
00077 003C 203E 		CALL	ClearRam_2	;Banks 4,5
00078 003D 0A85 		INCF	FSR0H,F	;Banks 6,7
00079 003E 	;	
00080 003E 3050 	ClearRam_2	MOVLW	0x50	;Clear 120h-16Fh, 80 bytes
00081 003F 00FF 		MOVWF	Param7F
00082 0040 3020 		MOVLW	0x20
00083 0041 0084 		MOVWF	FSR0
00084 0042 2047 		CALL	ClearRam_L2
00085 0043 	;
00086 0043 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00087 0044 00FF 		MOVWF	Param7F
00088 0045 30A0 		MOVLW	0xA0
00089 0046 0084 		MOVWF	FSR0
00090 0047 	;
00091 0047 0180 	ClearRam_L2	CLRF	INDF0
00092 0048 0A84 		INCF	FSR0,F
00093 0049 0BFF 		DECFSZ	Param7F,F
00094 004A 33FC 		bra	ClearRam_L2
00095 004B 0008 		RETURN
00096 004C 	;
00097 004C 		if UseEEParams
00098 004C 	;==========================================================================
00099 004C 	; copy param memory to ram
00100 004C 	;
00101 004C 3000 	CopyToRam	MOVLW	nvFirstParamByte
00102 004D 00A4 		MOVWF	EEAddrTemp
00103 004E 3037 		MOVLW	FirstRAMParam
00104 004F 0084 		MOVWF	FSR0L
00105 0050 0185 		CLRF	FSR0H
00106 0051 2097 	CopyToRam_L1	CALL	EERead
00107 0052 001A 		movwi	FSR0++
00108 0053 0AA4 		INCF	EEAddrTemp,F
00109 0054 303C 		MOVLW	LastRAMParam+1
00110 0055 0204 		SUBWF	FSR0L,W
00111 0056 		SKPZ
00111 0056 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00112 0057 33F9 		BRA	CopyToRam_L1
00113 0058 0008 		RETURN
00114 0059 	;
00115 0059 	;===========================================================================
00116 0059 	; copy ram to param memory
00117 0059 	;
00118 0059 3000 	SaveParams	MOVLW	nvFirstParamByte
00119 005A 00A4 		MOVWF	EEAddrTemp
00120 005B 3037 		MOVLW	FirstRAMParam
00121 005C 0084 		MOVWF	FSR0L
00122 005D 0185 		CLRF	FSR0H
00123 005E 0012 	SaveParams_L1	moviw	FSR0++
00124 005F 00A5 		MOVWF	EEDataTemp
00125 0060 20A1 		CALL	EEWrite
00126 0061 0AA4 		INCF	EEAddrTemp,F
00127 0062 303C 		MOVLW	LastRAMParam+1	;last byte
00128 0063 0204 		SUBWF	FSR0L,W
00129 0064 		SKPZ
SimpleServo16PS.asm                                                   Page: 8
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00129 0064 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00130 0065 33F8 		BRA	SaveParams_L1
00131 0066 0008 		RETURN
00132 0067 	;
00133 0067 		endif
00134 0067 	;=====================================================================================================
00135 0067 	;=========================================================================================================
00136 0067 	; Decrement routine for 16 bit timers
00137 0067 	; Set FSR0H before calling these routines.
00138 0067 	;
00139 0067 302D 	DecTimer4	movlw	Timer4Hi
00140 0068 3205 		bra	DecTimer
00141 0069 302B 	DecTimer3	movlw	Timer3Hi
00142 006A 3203 		bra	DecTimer
00143 006B 3029 	DecTimer2	movlw	Timer2Hi
00144 006C 3201 		bra	DecTimer
00145 006D 3027 	DecTimer1	movlw	Timer1Hi
00146 006E 	;DecTimer
00147 006E 	; entry: FSR=Timer(n)Hi
00148 006E 0084 	DecTimer	MOVWF	FSR0L
00149 006F 3000 		movlw	High Timer4Hi
00150 0070 0085 		movwf	FSR0H
00151 0071 0013 		MOVIW	FSR0--	;TimerNHi
00152 0072 0400 		IORWF	INDF0,W	;TimerNLo
00153 0073 		SKPNZ
00153 0073 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00154 0074 0008 		RETURN
00155 0075 3001 		MOVLW	0x01
00156 0076 0280 		SUBWF	INDF0,F	;TimerNLo
00157 0077 0A84 		INCF	FSR0L,F
00158 0078 0103 		CLRW
00159 0079 3B80 		SUBWFB	INDF0,F	;TimerNHi
00160 007A 0008 		RETURN
00161 007B 	;
00162 007B 	;==============================================================================================
00163 007B 	; Test for 16 bit timers = zero
00164 007B 	;If Timer is zero return Z flag,1 else Z=0
00165 007B 	;
00166 007B 0020 	TestT4_Zero	movlb	0
00167 007C 082C 		movf	Timer4Lo,W
00168 007D 042D 		iorwf	Timer4Hi,W
00169 007E 0008 		return
00170 007F 	;
00171 007F 0020 	TestT3_Zero	movlb	0
00172 0080 082A 		movf	Timer3Lo,W
00173 0081 042B 		iorwf	Timer3Hi,W
00174 0082 0008 		return
00175 0083 	;
00176 0083 0020 	TestT2_Zero	movlb	0
00177 0084 0828 		movf	Timer2Lo,W
00178 0085 0429 		iorwf	Timer2Hi,W
00179 0086 0008 		return
00180 0087 	;
00181 0087 0020 	TestT1_Zero	movlb	0
00182 0088 0826 		movf	Timer1Lo,W
00183 0089 0427 		iorwf	Timer1Hi,W
00184 008A 0008 		return	
00185 008B 	;
00186 008B 		if oldCode
00202 008B 		endif
00203 008B 	;======================================================================================
00204 008B 	;Delay uS    1 cycle = .125uS, 32MHz clock version
00205 008B 	; RAM used: Param77
00206 008B 	; Calls:(0) none
00207 008B 	;
00208 008B 3005 	Delay10uS	MOVLW	0x05	;(2*3+5)/2=10
00209 008C 3203 		bra	DelayWuS
00210 008D 3041 	Delay100uS	MOVLW	d'65'	;(28*3+5)/2=100
00211 008E 3201 		bra	DelayWuS
00212 008F 3019 	Delay40uS	MOVLW	d'25'	;(11*3+5)=40
00213 0090 00F7 	DelayWuS	MOVWF	Param77
00214 0091 0000 	DelayWuS_Loop	nop
00215 0092 0000 		nop
00216 0093 0BF7 		DECFSZ	Param77,F
00217 0094 33FC 		bra	DelayWuS_Loop
00218 0095 0008 		RETURN
00219 0096 	;==============================================================================================
00220 0096 	; Read EEPROM
00221 0096 	; entry: EEPROM address to read in W
00222 0096 	;        Bank 0 selected
00223 0096 	; exit: W=EEDATA, Bank 0 selected
00224 0096 	;
00225 0096 00A4 	EEReadW	movwf	EEAddrTemp
00226 0097 	;
00227 0097 	;==============================================================================================
00228 0097 	; Read EEPROM
00229 0097 	; entry: EEPROM address to read in EEAddrTemp
00230 0097 	;        Bank 0 selected
00231 0097 	; exit: W=EEDATA, Bank 0 selected
00232 0097 	;
00233 0097 0824 	EERead	movf	EEAddrTemp,W
00234 0098 0023 		MOVLB	0x03	;Bank 3
00235 0099 0091 		movwf	EEADR	;Address to read
00236 009A 1315 		bcf	EECON1,CFGS	;not config mem
00237 009B 1395 		bcf	EECON1,EEPGD	;Data memory
00238 009C 1415 		bsf	EECON1,RD
00239 009D 0813 		movf	EEDAT,W	;W=EEDAT
00240 009E 0020 		MOVLB	0x00	;Bank 0
00241 009F 0008 		return
SimpleServo16PS.asm                                                   Page: 9
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00242 00A0 	;
00243 00A0 	;==============================================================================================
00244 00A0 	; Write EEPROM
00245 00A0 	; entry: EEPROM address to write in W
00246 00A0 	;        EEPROM data to write in EEDataTemp
00247 00A0 	;        Bank 0 selected
00248 00A0 	; exit: Bank 0 selected
00249 00A0 	;
00250 00A0 00A4 	EEWriteW	movwf	EEAddrTemp
00251 00A1 	;
00252 00A1 	;==============================================================================================
00253 00A1 	; Write EEPROM
00254 00A1 	; entry: EEPROM address to write in EEAdrTemp
00255 00A1 	;        EEPROM data to write in EEDataTemp
00256 00A1 	;        Bank 0 selected
00257 00A1 	; exit: Bank 0 selected
00258 00A1 	;
00259 00A1 0824 	EEWrite	MOVF	EEAddrTemp,W
00260 00A2 0023 		MOVLB	0x03	;Bank 3
00261 00A3 0091 		movwf	EEADR	;Address to write
00262 00A4 0020 		movlb	0x00	; bank 0
00263 00A5 0825 		movf	EEDataTemp,W
00264 00A6 0023 		movlb	0x03
00265 00A7 0093 		movwf	EEDAT
00266 00A8 1315 		bcf	EECON1,CFGS	;not config mem
00267 00A9 1395 		bcf	EECON1,EEPGD	;Data memory
00268 00AA 1515 		bsf	EECON1,WREN
00269 00AB 138B 		bcf	INTCON,GIE	;Disale Ints
00270 00AC 1B8B 		btfsc	INTCON,GIE
00271 00AD 33FD 		bra	$-2
00272 00AE 3055 		movlw	0x55
00273 00AF 0096 		movwf	EECON2	;write 55
00274 00B0 30AA 		movlw	0xAA
00275 00B1 0096 		movwf	EECON2	;write AA
00276 00B2 1495 		bsf	EECON1,WR
00277 00B3 1895 	EEWriteLoop	btfsc	EECON1,WR	
00278 00B4 33FE 		bra	EEWriteLoop
00279 00B5 1115 		bcf	EECON1,WREN
00280 00B6 178B 		bsf	INTCON,GIE
00281 00B7 0020 		MOVLB	0x00	;Bank 0
00282 00B8 0008 		return
00283 00B9 	;
00284 00B9 	;	
00285 00B9 	;=========================================================================================
00286 00B9 	;=========================================================================================
00287 00B9 	;
00288 00B9 	;
00289 00B9 	;
00290 00B9 	;
00461 00B9 		include <SerBuff1938.inc>
00001 00B9 	;=========================================================================================
00002 00B9 	;
00003 00B9 	;    Filename:      SerBuff.inc
00004 00B9 	;    Date:          5/24/2018                                    
00005 00B9 	;    File Version:  1.0.5
00006 00B9 	;
00007 00B9 	;    Author:        David M. Flynn
00008 00B9 	;    Company:       Oxford V.U.E., Inc.
00009 00B9 	;    E-Mail:        dflynn@oxfordvue.com
00010 00B9 	;
00011 00B9 	;=========================================================================================
00012 00B9 	;=========================================================================================
00013 00B9 	; Notes:
00014 00B9 	;
00015 00B9 	; History:
00016 00B9 	; 1.0.5    5/24/2018   Added GetSerInBytes.
00017 00B9 	; 1.0.4    5/23/2018	Added FlushInBuff.
00018 00B9 	; 1.0.3    12/15/2015	Optimized some code to be segment independent.
00019 00B9 	; 1.0.2    10/23/2015	Modified for 'F1938
00020 00B9 	; 1.0.1    12/6/2013	Modified for 'F1847
00021 00B9 	; 1.0      5/25/2008	First Rev'd version
00022 00B9 	;
00023 00B9 	;=========================================================================================
00024 00B9 	; Bank0 Variables:
00025 00B9 	;
00026 00B9 	;	cblock	0x20
00027 00B9 	;	TXByte		;Next byte to send
00028 00B9 	;	RXByte		;Last byte received
00029 00B9 	;	SerFlags
00030 00B9 	;	endc
00031 00B9 	;
00032 00B9 	;#Define	DataReceivedFlag	SerFlags,1
00033 00B9 	;#Define	DataSentFlag	SerFlags,2
00034 00B9 	;
00035 00B9 	; Bank2 Variables:
00036 00B9 	;#Define	Ser_Buff_Bank	2
00037 00B9 	;	cblock	0x120
00038 00B9 	;	Ser_In_Bytes		;Bytes in Ser_In_Buff
00039 00B9 	;	Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00040 00B9 	;	Ser_In_InPtr
00041 00B9 	;	Ser_In_OutPtr
00042 00B9 	;	Ser_Out_InPtr
00043 00B9 	;	Ser_Out_OutPtr
00044 00B9 	;	Ser_In_Buff:20
00045 00B9 	;	Ser_Out_Buff:20
00046 00B9 	;	endc
00047 00B9 	;
00048 00B9 	;=========================================================================================
00049 00B9 	; Routines	(Bank In/Bank Out)
SimpleServo16PS.asm                                                   Page: 10
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00050 00B9 	;
00051 00B9 	; TX_TheByte	(0+0) Send one byte to UART
00052 00B9 	; RX_TheByte	(0+0) Receive one byte from UART
00053 00B9 	; StoreSerIn	(X/0) Put the byte in W into the serial input buffer, FSR0
00054 00B9 	; GetSerIn	(X/0) Get a byte from the serial input buffer, FSR0
00055 00B9 	; FlushInBuff	(X/0) Flush the serial incoming buffer.
00056 00B9 	; GetSerInBytes	(X/0) Get the number of bytes in the serial input buffer
00057 00B9 	; GetSerOutBytes	(X/0) Get the number of bytes in the serial ouput buffer
00058 00B9 	; StoreSerOut	(X/0) Put the byte in W into the serial output buffer, FSR0
00059 00B9 	; POP_SerOut	(X/0) Remove the last char stored in the output buffer
00060 00B9 	; GetSerOut	(X/0) Get a byte from the serial Output buffer, FSR0
00061 00B9 	;	       W=Byte, Param78:0=ValidFlag
00062 00B9 	;=========================================================================================
00063 00B9 	;=========================================================================================
00064 00B9 	; *** Put in main loop ***
00065 00B9 	;
00066 00B9 	; Handle Serial Communications
00067 00B9 	;	BTFSC	PIR1,TXIF	;TX done?
00068 00B9 	;	CALL	TX_TheByte	; Yes
00069 00B9 	;
00070 00B9 	; move any serial data received into the 32 byte input buffer
00071 00B9 	;	BTFSS	DataReceivedFlag
00072 00B9 	;	BRA	ML_Ser_Out
00073 00B9 	;	MOVF	RXByte,W
00074 00B9 	;	BCF	DataReceivedFlag
00075 00B9 	;	CALL	StoreSerIn
00076 00B9 	;
00077 00B9 	;=========================================================================================
00078 00B9 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00079 00B9 	;
00080 00B9 	;ML_Ser_Out	BTFSS	DataSentFlag
00081 00B9 	;	BRA	ML_Ser_End
00082 00B9 	;	CALL	GetSerOut
00083 00B9 	;	BTFSS	Param78,0
00084 00B9 	;	BRA	ML_Ser_End
00085 00B9 	;	MOVWF	TXByte
00086 00B9 	;	BCF	DataSentFlag
00087 00B9 	;ML_Ser_End
00088 00B9 	;
00089 00B9 	;=========================================================================================
00090 00B9 	; *** Put in Init section ***
00091 00B9 	;BAUDCON_Value	EQU	b'00001000'
00092 00B9 	;TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, High speed
00093 00B9 	;RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00094 00B9 	;; 8MHz clock low speed (BRGH=0,BRG16=1)
00095 00B9 	;;Baud_300	EQU	d'1666'	;0.299, -0.02%
00096 00B9 	;;Baud_1200	EQU	d'416'	;1.199, -0.08%
00097 00B9 	;;Baud_2400	EQU	d'207'	;2.404, +0.16%
00098 00B9 	;;Baud_9600	EQU	d'51'	;9.615, +0.16%
00099 00B9 	;; 8MHz clock high speed (BRGH=1,BRG16=1)
00100 00B9 	;Baud_300	EQU	d'6666'	;0.299, -0.02%
00101 00B9 	;Baud_1200	EQU	d'1666'	;1.199, -0.08%
00102 00B9 	;Baud_2400	EQU	d'832'	;2.404, +0.16%
00103 00B9 	;Baud_9600	EQU	d'207'	;9.615, +0.16%
00104 00B9 	;Baud_19_2	EQU	d'103'	;19.23k, +0.16
00105 00B9 	;Baud_57_6	EQU	d'34'	;57.14k, -0.79
00106 00B9 	;BaudRate	EQU	Baud_9600
00107 00B9 	;-------------
00108 00B9 	;
00109 00B9 	; setup serial I/O
00110 00B9 	;	movlb	0x03	; bank 3
00111 00B9 	;	MOVLW	TXSTA_Value
00112 00B9 	;	MOVWF	TXSTA
00113 00B9 	;	MOVLW	low BaudRate
00114 00B9 	;	MOVWF	SPBRGL
00115 00B9 	;	MOVLW	high BaudRate
00116 00B9 	;	MOVWF	SPBRGH
00117 00B9 	;	MOVLW	RCSTA_Value
00118 00B9 	;	MOVWF	RCSTA
00119 00B9 	;
00120 00B9 	;	movlb	0x01	; bank 1
00121 00B9 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00122 00B9 	;	movlb	0x00	; bank 0
00123 00B9 	;	BSF	INTCON,PEIE	;Peripheral IRQ Enable
00124 00B9 	;	BSF	INTCON,GIE
00125 00B9 	;
00126 00B9 	;=========================================================================================
00127 00B9 	; *** Put in ISR ***
00128 00B9 	;-----------------------------------------------------------------------------------------
00129 00B9 	;AUSART Serial ISR
00130 00B9 	;
00131 00B9 	;IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00132 00B9 	;	BRA	IRQ_Ser_End
00133 00B9 	;	CALL	RX_TheByte
00134 00B9 	;
00135 00B9 	;IRQ_Ser_End
00136 00B9 	;
00137 00B9 	;=========================================================================================
00138 00B9 	; Send one byte
00139 00B9 	; Entry: Bank0
00140 00B9 	; Exit: Bank0
00141 00B9 	;
00142 00B9 	;
00143 00B9 1930 	TX_TheByte	BTFSC	DataSentFlag
00144 00BA 0008 		RETURN
00145 00BB 082E 		MOVF	TXByte,W	
00146 00BC 0023  a		MOVLB	TXREG	;banksel
00145 00BD 		BANKSEL	TXREG
00147 00BD 009A 		MOVWF	TXREG
SimpleServo16PS.asm                                                   Page: 11
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00148 00BE 0020 		MOVLB	0
00149 00BF 1530 		BSF	DataSentFlag
00150 00C0 0008 		RETURN
00151 00C1 	;
00152 00C1 	;=========================================================================================
00153 00C1 	;
00154 00C1 	RX_TheByte:
00155 00C1 0023  a		MOVLB	RCSTA	;banksel
00154 00C2 		BANKSEL	RCSTA	; bank 3
00156 00C2 081D 		MOVF	RCSTA,W
00157 00C3 3906 		ANDLW	0x06
00158 00C4 		SKPZ		;Frame or Overrun Err?
00158 00C4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00159 00C5 3205 		BRA	RX_TheByte_Err	; yes
00160 00C6 0819 		MOVF	RCREG,W
00161 00C7 	;
00162 00C7 0020 		movlb	0x00	; bank 0
00163 00C8 00AF 		MOVWF	RXByte
00164 00C9 14B0 		BSF	DataReceivedFlag
00165 00CA 0008 		RETURN
00166 00CB 	;
00167 00CB 0819 	RX_TheByte_Err	MOVF	RCREG,W	;bad byte so drop it
00168 00CC 01AF 		CLRF	RXByte
00169 00CD 121D 		BCF	RCSTA,CREN
00170 00CE 111D 		BCF	RCSTA,FERR
00171 00CF 109D 		BCF	RCSTA,OERR
00172 00D0 161D 		BSF	RCSTA,CREN
00173 00D1 0020 		movlb	0x00
00174 00D2 0008 		RETURN
00175 00D3 	;
00176 00D3 	;=========================================================================================
00177 00D3 	;=========================================================================================
00178 00D3 	; Put the byte in W into the serial input buffer
00179 00D3 	;
00180 00D3 	; Entry: W = byte to store
00181 00D3 	; Exit: none
00182 00D3 	; Ram Used: Param78, FSR
00183 00D3 	;
00184 00D3 00F8 	StoreSerIn	MOVWF	Param78
00185 00D4 0022 		MOVLB	Ser_Buff_Bank
00186 00D5 0AA0 		INCF	Ser_In_Bytes,F
00187 00D6 	;	
00188 00D6 0822 		MOVF	Ser_In_InPtr,W
00189 00D7 391F 		ANDLW	0x1F
00190 00D8 0AA2 		INCF	Ser_In_InPtr,F
00191 00D9 3E26 		ADDLW	low Ser_In_Buff
00192 00DA 0084 		MOVWF	FSR0
00193 00DB 3001 		MOVLW	high Ser_In_Buff
00194 00DC 0085 		MOVWF	FSR0H
00195 00DD 0878 		MOVF	Param78,W
00196 00DE 0080 		MOVWF	INDF0
00197 00DF 0020 		MOVLB	0x00
00198 00E0 0008 		RETURN
00199 00E1 	;
00200 00E1 	;=========================================================================================
00201 00E1 	; Get a byte from the serial input buffer
00202 00E1 	;
00203 00E1 	; Entry: none
00204 00E1 	; Exit: W=byte from buffer, Param78,0=valid
00205 00E1 	;
00206 00E1 0022 	GetSerIn	MOVLB	Ser_Buff_Bank
00207 00E2 1078 		BCF	Param78,0	;no data
00208 00E3 08A0 		MOVF	Ser_In_Bytes,F
00209 00E4 		SKPNZ
00209 00E4 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00210 00E5 320A 		bra	GetSerIn_End
00211 00E6 1478 		BSF	Param78,0
00212 00E7 03A0 		DECF	Ser_In_Bytes,F
00213 00E8 0823 		MOVF	Ser_In_OutPtr,W
00214 00E9 391F 		ANDLW	0x1F
00215 00EA 0AA3 		INCF	Ser_In_OutPtr,F
00216 00EB 3E26 		ADDLW	low Ser_In_Buff
00217 00EC 0084 		MOVWF	FSR0L
00218 00ED 3001 		MOVLW	high Ser_In_Buff
00219 00EE 0085 		MOVWF	FSR0H
00220 00EF 0800 		MOVF	INDF0,W
00221 00F0 0020 	GetSerIn_End	movlb	0
00222 00F1 0008 		return
00223 00F2 	;
00224 00F2 	;=========================================================================================
00225 00F2 	; Flush the serial incoming buffer
00226 00F2 	; Entry: none
00227 00F2 	; Exit: bank 0
00228 00F2 	;
00229 00F2 0022 	FlushInBuff	movlb	Ser_Buff_Bank
00230 00F3 01A0 		clrf	Ser_In_Bytes
00231 00F4 01A3 		clrf	Ser_In_OutPtr
00232 00F5 01A2 		clrf	Ser_In_InPtr
00233 00F6 0020 		movlb	0
00234 00F7 0008 		return
00235 00F8 	;
00236 00F8 	;=========================================================================================
00237 00F8 	; Get the number of bytes in the serial input buffer
00238 00F8 	;
00239 00F8 	; Entry: none
00240 00F8 	; Exit: W=bytes in buffer, Z
00241 00F8 	;
00242 00F8 0022 	GetSerInBytes	MOVLB	Ser_Buff_Bank
00243 00F9 0820 		MOVF	Ser_In_Bytes,W
SimpleServo16PS.asm                                                   Page: 12
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00244 00FA 0020 		movlb	0
00245 00FB 0008 		return
00246 00FC 	;
00247 00FC 	;=========================================================================================
00248 00FC 	; Get the number of bytes in the serial ouput buffer
00249 00FC 	;
00250 00FC 	; Entry: none
00251 00FC 	; Exit: W=bytes in buffer, Z
00252 00FC 	;
00253 00FC 0022 	GetSerOutBytes	MOVLB	Ser_Buff_Bank
00254 00FD 0821 		MOVF	Ser_Out_Bytes,W
00255 00FE 0020 		movlb	0
00256 00FF 0008 		return
00257 0100 	;
00258 0100 	;=========================================================================================
00259 0100 	; Put the byte in W into the serial output buffer
00260 0100 	;
00261 0100 	; Entry: W = byte to store
00262 0100 	; Exit: Param78 & W = byte stored, Bank 0
00263 0100 	; Ram used: Param78, FSR0
00264 0100 	; Calls: (0) none
00265 0100 	;
00266 0100 00F8 	StoreSerOut	MOVWF	Param78
00267 0101 0022 		MOVLB	Ser_Buff_Bank
00268 0102 0AA1 		INCF	Ser_Out_Bytes,F
00269 0103 	;	
00270 0103 0824 		MOVF	Ser_Out_InPtr,W
00271 0104 391F 		ANDLW	0x1F
00272 0105 0AA4 		INCF	Ser_Out_InPtr,F
00273 0106 3E46 		ADDLW	low Ser_Out_Buff
00274 0107 0084 		MOVWF	FSR0
00275 0108 3001 		MOVLW	high Ser_In_Buff
00276 0109 0085 		MOVWF	FSR0H
00277 010A 0878 		MOVF	Param78,W
00278 010B 0080 		MOVWF	INDF0
00279 010C 0020 		movlb	0
00280 010D 0008 		return
00281 010E 	;
00282 010E 	;=========================================================================================
00283 010E 	; Remove the last char stored in the output buffer
00284 010E 	;
00285 010E 0022 	POP_SerOut	MOVLB	Ser_Buff_Bank
00286 010F 08A1 		MOVF	Ser_Out_Bytes,F
00287 0110 		SKPNZ
00287 0110 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00288 0111 3202 		bra	POP_SerOut_End
00289 0112 03A1 		DECF	Ser_Out_Bytes,F
00290 0113 03A4 		DECF	Ser_Out_InPtr,F
00291 0114 0020 	POP_SerOut_End	movlb	0
00292 0115 0008 		return
00293 0116 	;
00294 0116 	;=========================================================================================
00295 0116 	; Get a byte from the serial Output buffer
00296 0116 	;
00297 0116 	; Entry: none
00298 0116 	; Exit: W=byte from buffer, Param78,0=valid
00299 0116 	;
00300 0116 0022 	GetSerOut	MOVLB	Ser_Buff_Bank
00301 0117 1078 		BCF	Param78,0	;no data
00302 0118 08A1 		MOVF	Ser_Out_Bytes,F
00303 0119 		SKPNZ
00303 0119 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00304 011A 320A 		bra	GetSerOut_End
00305 011B 1478 		BSF	Param78,0
00306 011C 03A1 		DECF	Ser_Out_Bytes,F
00307 011D 0825 		MOVF	Ser_Out_OutPtr,W
00308 011E 391F 		ANDLW	0x1F
00309 011F 0AA5 		INCF	Ser_Out_OutPtr,F
00310 0120 3E46 		ADDLW	low Ser_Out_Buff
00311 0121 0084 		MOVWF	FSR0L
00312 0122 3001 		MOVLW	high Ser_In_Buff
00313 0123 0085 		MOVWF	FSR0H
00314 0124 0800 		MOVF	INDF0,W
00315 0125 0020 	GetSerOut_End	movlb	0
00316 0126 0008 		return
00317 0127 	;
00318 0127 	;=========================================================================================
00319 0127 	;
00320 0127 	;
00321 0127 	;
00322 0127 	;
00323 0127 	;
00324 0127 	;
00325 0127 	;
00326 0127 	;
00327 0127 	;
00328 0127 	;
00329 0127 	;
00330 0127 	;
00331 0127 	;
00332 0127 	;
00333 0127 	;
00334 0127 	;
00335 0127 	;
00336 0127 	;
00337 0127 	;
00338 0127 	;
00462 0127 		include <RS232_Parse.inc>
00001 0127 	;=========================================================================================
SimpleServo16PS.asm                                                   Page: 13
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00002 0127 	;
00003 0127 	;    Filename:      RS232_Parse.inc
00004 0127 	;    Date:          5/25/2018
00005 0127 	;    File Version:  1.0d5
00006 0127 	;
00007 0127 	;    Author:        David M. Flynn
00008 0127 	;    Company:       Oxford V.U.E., Inc.
00009 0127 	;    E-Mail:        dflynn@oxfordvue.com
00010 0127 	;
00011 0127 	;=========================================================================================
00012 0127 	; Routines:
00013 0127 	;
00014 0127 	; RS232_Parse	Call from main loop
00015 0127 	; RS232_ClearTXData	Clear the TX data, FSR1
00016 0127 	; RS232_Send	Send the data at TX_data, FSR0, FSR1
00017 0127 	;
00018 0127 	;=========================================================================================
00019 0127 	; Notes:
00020 0127 	;
00021 0127 	; History:
00022 0127 	; 1.0b5  5/25/2018	RS232_MasterAddr, RS232_SlaveAddr now in ram
00023 0127 	; 1.0d4  5/18/2018	Added RS232_ClearTXData, RS232_Send.
00024 0127 	; 1.0d3  5/17/2018	Used Timer1Lo for RXTimeout.
00025 0127 	; 1.0d2  4/26/2018	Comments, used in robot arm project.
00026 0127 	; 1.0d1  1/12/2016	Modified for I2C to RS-232 8 byte packets.
00027 0127 	; 1.0d1  11/9/2015	Adapted for QD Tester
00028 0127 	; 1.0    12/6/2013	First Rev'd version
00029 0127 	;
00030 0127 	; RS232_Parse	(X/0) Parse any bytes received by the serial port
00031 0127 	; Packet format: (FF FF) SA0 (SA1) DA0 (DA1) D0 D1 D2 D3 D4 D5 D6 D7 (CS)
00032 0127 	;  FF = Sync byte, SAn = Source Address, DA = Destination Address,
00033 0127 	;       Dn = Data, CS Check Sum (xor of Address and Data bytes)
00034 0127 	;  SA Sender's Address must be RS232_RAddr ( the boss )
00035 0127 	;  DA Destination Address must be RS232_MyAddr ( this program )
00036 0127 	;  If the checksum matches put the data bytes in the RX_Data buffer,
00037 0127 	;   set RXDataValidFlag and RXDataIsNew.
00038 0127 	;=========================================================================================
00039 0127 	;	constant RP_LongAddr=1		;16 bit addresses
00040 0127 	; default to a 6 byte packet SA DA D0 D1 D2 D3
00041 0127 	;
00042 0127 		ifndef UseRS232SyncBytes
00044 0127 		endif
00045 0127 	;
00046 0127 		ifndef UseRS232SendSyncBytes
00048 0127 		endif
00049 0127 	;
00050 0127 		ifndef RP_LongAddr
00052 0127 		endif
00053 0127 	;
00054 0127 		ifndef RP_DataBytes
00056 0127 		endif
00057 0127 	;
00058 0127 		ifndef UseRS232Chksum
00060 0127 		endif
00061 0127 	;
00062 0127 		constant RXTimeout=5		;50 mS max between incoming bytes
00063 0127 	;=========================================================================================
00064 0127 	; Bank0 variable used by RS232_Parse:
00065 0127 	;
00066 0127 	;	cblock
00067 0127 	;	RS232_MasterAddr
00068 0127 	;	RS232_SlaveAddr
00069 0127 	;	endc
00070 0127 	;
00071 0127 	; Bank1 variable used by RS232_Parse:
00072 0127 	;
00073 0127 	;	cblock
00074 0127 	;	RX_ParseFlags
00075 0127 	;	RX_Flags
00076 0127 	;	RX_DataCount
00077 0127 	;	RX_CSUM
00078 0127 	;	RX_TempData:RP_DataBytes
00079 0127 	;	RX_Data:RP_DataBytes
00080 0127 	;	TX_Data:RP_DataBytes
00081 0127 	;	endc
00082 0127 	;RX_ParseFlags Bits
00083 0127 00A0 	#Define	SyncByte1RXd	RX_ParseFlags,0
00084 0127 00A0 	#Define	SyncByte2RXd	RX_ParseFlags,1
00085 0127 00A0 	#Define	SourceAddLoRXd	RX_ParseFlags,2
00086 0127 00A0 	#Define	SourceAddHiRXd	RX_ParseFlags,3
00087 0127 00A0 	#Define	DestAddLoRXd	RX_ParseFlags,4
00088 0127 00A0 	#Define	DestAddHiRXd	RX_ParseFlags,5
00089 0127 00A0 	#Define	AllDataRXd	RX_ParseFlags,6
00090 0127 	;
00091 0127 	;RX_Flags Bits
00092 0127 00A1 	#Define	RXDataValidFlag	RX_Flags,0
00093 0127 00A1 	#Define	RXDataIsNew	RX_Flags,1
00094 0127 00A1 	#Define	RXSrcIsMaster	RX_Flags,2
00095 0127 00A1 	#Define	RXDstIsMe	RX_Flags,3
00096 0127 	;
00097 0127 	;
00098 0127 	; *** put in main loop
00099 0127 	;	CALL	RS232_Parse
00100 0127 	; if RXDataValidFlag is set data may be used
00101 0127 	;
00102 0127 	;=========================================================================================
00103 0127 	; Parse any bytes received by the serial port
00104 0127 	;
00105 0127 	; Receive 0xFF,0xFF,SA0,(SA1),DA0,(DA1),Cmd,Data0,Data1,Data2,CS
SimpleServo16PS.asm                                                   Page: 14
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00106 0127 	;
00107 0127 	;
00108 0127 	; Entry: none
00109 0127 	; Exit: none
00110 0127 	; Ram Used: Param78, FSR
00111 0127 	; Calls (1+0): GetSerIn
00112 0127 	;
00113 0127 0021 	RS232_Parse	movlb	0x01	;bank 1
00114 0128 08A0 		movf	RX_ParseFlags,F
00115 0129 		SKPNZ		;Receive in process?
00115 0129 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00116 012A 3207 		bra	RS232_Parse_Byte	; no
00117 012B 	;
00118 012B 0020 		movlb	0	;bank 0
00119 012C 08A6 		movf	Timer1Lo,F
00120 012D 		SKPZ		;Timed out?
00120 012D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00121 012E 3203 		bra	RS232_Parse_Byte	; no
00122 012F 	;timed out
00123 012F 15B1 		bsf	ssRX_Timeout
00124 0130 0021 		movlb	0x01	;bank 1
00125 0131 01A0 		clrf	RX_ParseFlags
00126 0132 	;
00127 0132 20E1 	RS232_Parse_Byte	CALL	GetSerIn
00128 0133 1C78 		BTFSS	Param78,0	;Got a byte?
00129 0134 0008 		RETURN		; No
00130 0135 	;
00131 0135 00F8 		MOVWF	Param78	;Data Byte RXd
00132 0136 3005 		movlw	RXTimeout	;Reset time-out timer
00133 0137 00A6 		movwf	Timer1Lo
00134 0138 	; Command inturpreter
00135 0138 		if UseRS232SyncBytes
00136 0138 	;
00137 0138 0021 		movlb	0x01	;bank 1
00138 0139 08A0 		MOVF	RX_ParseFlags,F
00139 013A 		SKPZ		;Beginning new packet?
00139 013A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00140 013B 3205 		BRA	RS232_Parse_Sync2	; No
00141 013C 30DD 		MOVLW	kRS232SyncByteValue
00142 013D 0278 		SUBWF	Param78,W
00143 013E 		SKPNZ		;Sync byte OK?
00143 013E 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00144 013F 1420 		BSF	SyncByte1RXd	; Yes
00145 0140 3218 		bra	RS232_Parse_Rtn
00146 0141 	;
00147 0141 18A0 	RS232_Parse_Sync2	btfsc	SyncByte2RXd
00148 0142 3206 		bra	RS232_Parse_SALo
00149 0143 30DD 		movlw	kRS232SyncByteValue
00150 0144 0278 		subwf	Param78,W
00151 0145 		SKPZ
00151 0145 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00152 0146 2995 		goto	RS232_Parse_Error
00153 0147 14A0 		bsf	SyncByte2RXd
00154 0148 3210 		bra	RS232_Parse_Rtn
00155 0149 	;
00156 0149 		endif
00157 0149 	;
00158 0149 	; LSB of Source Address
00159 0149 0021 	RS232_Parse_SALo	movlb	0x01	;bank 1
00160 014A 1920 		btfsc	SourceAddLoRXd
00161 014B 320F 		bra	RS232_Parse_SALo_end
00162 014C 	;
00163 014C 01A3 		clrf	RX_CSUM
00164 014D 01A2 		clrf	RX_DataCount
00165 014E 1521 		bsf	RXSrcIsMaster
00166 014F 0020 		movlb	0
00167 0150 0838 		movf	RS232_MasterAddr,W
00168 0151 0021 		movlb	1
00169 0152 0278 		subwf	Param78,W
00170 0153 		SKPZ
00170 0153 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00171 0154 1121 		bcf	RXSrcIsMaster
00172 0155 1520 		bsf	SourceAddLoRXd
00173 0156 0878 		movf	Param78,W
00174 0157 00A4 		movwf	RX_SrcAdd
00175 0158 06A3 		xorwf	RX_CSUM,F
00176 0159 0020 	RS232_Parse_Rtn	movlb	0x00	;bank 0
00177 015A 0008 		return
00178 015B 	RS232_Parse_SALo_end:
00179 015B 	;
00180 015B 	; MSB of Source Address
00181 015B 		if RP_LongAddr
00196 015B 		endif
00197 015B 	;
00198 015B 	; LSB of Destination Address
00199 015B 1A20 	RS232_Parse_DALo	btfsc	DestAddLoRXd
00200 015C 320C 		bra	RS232_Parse_DALo_End
00201 015D 15A1 		bsf	RXDstIsMe
00202 015E 0020 		movlb	0
00203 015F 0839 		movf	RS232_SlaveAddr,W
00204 0160 0021 		movlb	1
00205 0161 0278 		subwf	Param78,W
00206 0162 		SKPZ
00206 0162 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00207 0163 11A1 		bcf	RXDstIsMe
00208 0164 1620 		bsf	DestAddLoRXd
00209 0165 0878 		movf	Param78,W
00210 0166 00A5 		movwf	RX_DstAdd
00211 0167 06A3 		xorwf	RX_CSUM,F
SimpleServo16PS.asm                                                   Page: 15
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00212 0168 33F0 		bra	RS232_Parse_Rtn
00213 0169 	RS232_Parse_DALo_End:
00214 0169 	;
00215 0169 	; MSB of Destination Address
00216 0169 		if RP_LongAddr
00231 0169 		endif
00232 0169 	;
00233 0169 1B20 	RS232_Parse_Data	btfsc	AllDataRXd
00234 016A 320F 		bra	RS232_Parse_Data_end
00235 016B 0822 		movf	RX_DataCount,W
00236 016C 3EA6 		addlw	low RX_TempData
00237 016D 0084 		movwf	FSR0L
00238 016E 3000 		movlw	high RX_TempData
00239 016F 0085 		movwf	FSR0H
00240 0170 0878 		movf	Param78,W
00241 0171 06A3 		xorwf	RX_CSUM,F
00242 0172 0080 		movwf	INDF0
00243 0173 0AA2 		incf	RX_DataCount,F
00244 0174 3004 		movlw	RP_DataBytes
00245 0175 0222 		subwf	RX_DataCount,W
00246 0176 		SKPZ
00246 0176 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00247 0177 33E1 		bra	RS232_Parse_Rtn
00248 0178 1720 		bsf	AllDataRXd
00249 0179 	;
00250 0179 		if UseRS232Chksum
00251 0179 33DF 		bra	RS232_Parse_Rtn
00252 017A 		endif
00253 017A 	RS232_Parse_Data_end
00254 017A 	;
00255 017A 		if UseRS232Chksum
00256 017A 	; checksum
00257 017A 0878 		movf	Param78,W
00258 017B 0223 		subwf	RX_CSUM,W
00259 017C 		SKPZ		;Checksum matches?
00259 017C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00260 017D 3217 		bra	RS232_Parse_Error	; No
00261 017E 	;
00262 017E 		endif
00263 017E 	;
00264 017E 30A6 		movlw	low RX_TempData
00265 017F 0084 		movwf	FSR0L
00266 0180 3000 		movlw	high RX_TempData
00267 0181 0085 		movwf	FSR0H
00268 0182 	;
00269 0182 30AA 		movlw	low RX_Data
00270 0183 0086 		movwf	FSR1L
00271 0184 3000 		movlw	high RX_Data
00272 0185 0087 		movwf	FSR1H
00273 0186 	;
00274 0186 3004 		movlw	RP_DataBytes
00275 0187 00F8 		movwf	Param78
00276 0188 0012 	RS232_Parse_L1	moviw	FSR0++
00277 0189 001E 		movwi	FSR1++
00278 018A 0BF8 		decfsz	Param78,F
00279 018B 33FC 		bra	RS232_Parse_L1
00280 018C 	;
00281 018C 14A1 		bsf	RXDataIsNew	;good packet rx'd
00282 018D 1421 		bsf	RXDataValidFlag
00283 018E 1D21 		btfss	RXSrcIsMaster	;from master?
00284 018F 1021 		bcf	RXDataValidFlag	; no
00285 0190 1DA1 		btfss	RXDstIsMe	;to me?
00286 0191 1021 		bcf	RXDataValidFlag	; no
00287 0192 	;
00288 0192 01A0 		clrf	RX_ParseFlags
00289 0193 0020 		movlb	0x00
00290 0194 0008 		return
00291 0195 	;
00292 0195 	;
00293 0195 	; We didn't get the sync byte we were expecting so restart the parser
00294 0195 01A0 	RS232_Parse_Error	CLRF	RX_ParseFlags
00295 0196 28F2 		goto	FlushInBuff
00296 0197 	;
00297 0197 	;=========================================================================================
00298 0197 	; Clear the TX data, unused bytes are sent as 0x00
00299 0197 	; Entry: none
00300 0197 	; Exit: Bank 0
00301 0197 	; Ram used: Param78, FSR1
00302 0197 	; Calls: none
00303 0197 3001 	RS232_ClearTXData	movlw	1	;bank 1
00304 0198 3004 		movlw	RP_DataBytes
00305 0199 00F8 		movwf	Param78
00306 019A 30AE 		movlw	low TX_Data
00307 019B 0086 		movwf	FSR1L
00308 019C 3000 		movlw	high TX_Data
00309 019D 0087 		movwf	FSR1H
00310 019E 3000 		movlw	0x00
00311 019F 001E 	RS232_ClearTXData_L1	movwi	FSR1++
00312 01A0 0BF8 		decfsz	Param78,F
00313 01A1 33FD 		bra	RS232_ClearTXData_L1
00314 01A2 0020 		movlb	0x00
00315 01A3 0008 		return
00316 01A4 	;
00317 01A4 	;=========================================================================================
00318 01A4 	; Send a data packet
00319 01A4 	;
00320 01A4 	;Entry: TX_Data = Data to send 
00321 01A4 	;Exit: TX_Data is cleared
00322 01A4 	;Ram used: Param78,Param79,Param7A,FSR0,FSR1
SimpleServo16PS.asm                                                   Page: 16
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00323 01A4 	;Calls: (1+0) StoreSerOut
00324 01A4 	;
00325 01A4 	RS232_Send:
00326 01A4 	;
00327 01A4 		if UseRS232SendSyncBytes
00334 01A4 		endif
00335 01A4 	;
00336 01A4 0020 		movlb	0x00	;bank 0
00337 01A5 01FA 		clrf	Param7A	;CSum
00338 01A6 0839 		movf	RS232_SlaveAddr,W	;source address
00339 01A7 06FA 		xorwf	Param7A,F
00340 01A8 2100 		call	StoreSerOut
00341 01A9 	;
00342 01A9 		if RP_LongAddr
00346 01A9 		endif
00347 01A9 	;
00348 01A9 0838 		movf	RS232_MasterAddr,W	;destination address
00349 01AA 06FA 		xorwf	Param7A,F
00350 01AB 2100 		call	StoreSerOut
00351 01AC 	;
00352 01AC 		if RP_LongAddr
00356 01AC 		endif
00357 01AC 	;
00358 01AC 0021 		movlb	1	;bank 1
00359 01AD 3004 		movlw	RP_DataBytes
00360 01AE 00F9 		movwf	Param79
00361 01AF 30AE 		movlw	low TX_Data
00362 01B0 0086 		movwf	FSR1L
00363 01B1 3000 		movlw	high TX_Data
00364 01B2 0087 		movwf	FSR1H
00365 01B3 	;
00366 01B3 0016 	RS232_Send_L1	moviw	FSR1++
00367 01B4 06FA 		xorwf	Param7A,F
00368 01B5 2100 		call	StoreSerOut
00369 01B6 0BF9 		decfsz	Param79,F
00370 01B7 33FB 		bra	RS232_Send_L1
00371 01B8 	;
00372 01B8 		if UseRS232Chksum
00373 01B8 087A 		movf	Param7A,W
00374 01B9 2100 		call	StoreSerOut
00375 01BA 		endif
00376 01BA 	;
00377 01BA 2997 		goto	RS232_ClearTXData
00378 01BB 	;
00379 01BB 	;=========================================================================================
00380 01BB 	;
00381 01BB 	;
00382 01BB 	;
00383 01BB 	;
00384 01BB 	;
00385 01BB 	;
00386 01BB 	;
00387 01BB 	;
00388 01BB 	;
00389 01BB 	;
00390 01BB 	;
00391 01BB 	;
00392 01BB 	;
00393 01BB 	;
00394 01BB 	;
00395 01BB 	;
00396 01BB 	;
00397 01BB 	;
00398 01BB 	;
00399 01BB 	;
00400 01BB 	;
00401 01BB 	;
00402 01BB 	;
00403 01BB 	;
00463 01BB 	;
00464 01BB 	;==============================================================================================
00465 01BB 	;
00466 01BB 	start	mLongCall	InitializeIO
00466 01BB 3189      M		movlp	InitializeIO	                       movlp                  Destination
00466 01BC 2194      M		call	InitializeIO	                       call                   Destination
00466 01BD 3181      M		movlp	$	                       movlp                  $
00467 01BE 	;
00468 01BE 	;=========================================================================================
00469 01BE 	; Setup default servo data
00470 01BE 	;
00471 01BE 2384 		CALL	ServoInit16
00472 01BF 2373 		CALL	StartServos
00473 01C0 	;
00474 01C0 	;
00475 01C0 	;=========================================================================================
00476 01C0 	;*****************************************************************************************
00477 01C0 	;=========================================================================================
00478 01C0 0064 	MainLoop	CLRWDT
00479 01C1 	;
00480 01C1 20F8 		call	GetSerInBytes
00481 01C2 		SKPZ		;Any data?
00481 01C2 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00482 01C3 2127 		CALL	RS232_Parse	; yes
00483 01C4 	;
00484 01C4 0021 		movlb	1
00485 01C5 1CA1 		btfss	RXDataIsNew
00486 01C6 3203 		bra	ML_1
00487 01C7 		mLongCall	HandleRXData
00487 01C7 3188      M		movlp	HandleRXData	                       movlp                  Destination
SimpleServo16PS.asm                                                   Page: 17
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00487 01C8 2004      M		call	HandleRXData	                       call                   Destination
00487 01C9 3181      M		movlp	$	                       movlp                  $
00488 01CA 	ML_1:
00489 01CA 	;
00490 01CA 	;
00491 01CA 2299 		CALL	IdleServos
00492 01CB 	;	CALL	TestServoLib	;tc
00493 01CB 	;
00494 01CB 0020 		MOVLB	0x00
00495 01CC 183B 		BTFSC	SW1_Flag	;manual reset
00496 01CD 29BB 		GOTO	start
00497 01CE 	;
00498 01CE 	;---------------------
00499 01CE 	; Handle Serial Communications
00500 01CE 1A11 		BTFSC	PIR1,TXIF	;TX done?
00501 01CF 20B9 		CALL	TX_TheByte	; Yes
00502 01D0 	;
00503 01D0 	; move any serial data received into the 32 byte input buffer
00504 01D0 1CB0 		BTFSS	DataReceivedFlag
00505 01D1 3203 		BRA	ML_Ser_Out
00506 01D2 082F 		MOVF	RXByte,W
00507 01D3 10B0 		BCF	DataReceivedFlag
00508 01D4 20D3 		CALL	StoreSerIn
00509 01D5 	;
00510 01D5 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00511 01D5 	;
00512 01D5 1D30 	ML_Ser_Out	BTFSS	DataSentFlag
00513 01D6 3205 		BRA	ML_Ser_End
00514 01D7 2116 		CALL	GetSerOut
00515 01D8 1C78 		BTFSS	Param78,0
00516 01D9 3202 		BRA	ML_Ser_End
00517 01DA 00AE 		MOVWF	TXByte
00518 01DB 1130 		BCF	DataSentFlag
00519 01DC 	ML_Ser_End:
00520 01DC 	;----------------------
00521 01DC 29C0 		goto	MainLoop
00522 01DD 	;=========================================================================================
00523 01DD 	;*****************************************************************************************
00524 01DD 	;=========================================================================================
00525 01DD 	;
00526 01DD 		include <ServoLib.inc>
00001 01DD 	;====================================================================================================
00002 01DD 	;
00003 01DD 	;    Filename:      ServoLib.inc
00004 01DD 	;    Date:          4/2/2021
00005 01DD 	;    File Version:  1.0d1
00006 01DD 	;    
00007 01DD 	;    Author:        David M. Flynn
00008 01DD 	;    Company:       Oxford V.U.E., Inc.
00009 01DD 	;    E-Mail:        dflynn@oxfordvue.com
00010 01DD 	;    Web Site:      http://www.oxfordvue.com/
00011 01DD 	;
00012 01DD 	;====================================================================================================
00013 01DD 	;  Low level routines for SimpleServo16 PCB
00014 01DD 	;
00015 01DD 	;    History:
00016 01DD 	;
00017 01DD 	; 1.0d1   4/2/2021	Copied from I2C Version
00018 01DD 	;
00019 01DD 	;====================================================================================================
00020 01DD 	; PIC16F1847 on SimpleServo16 PCB Packet Serial Version
00021 01DD 	;
00022 01DD 	;   Pin 1 (RA2/AN2) Address A2 (output)
00023 01DD 	;   Pin 2 (RA3/AN3) Enable Servos 0..7 (active low output)
00024 01DD 	;   Pin 3 (RA4/AN4) Enable Servos 8..15 (active low output)
00025 01DD 	;   Pin 4 (RA5/MCLR*) Vpp
00026 01DD 	;   Pin 5 (GND) Ground
00027 01DD 	;   Pin 6 (RB0) SW1/LED1 (Active Low Input/Output) (System LED)
00028 01DD 	;   Pin 7 (RB1/AN11/SDA1) RX Data
00029 01DD 	;   Pin 8 (RB2/AN10/RX)   TX Data 
00030 01DD 	;   Pin 9 (RB3/CCP1) Pulse output for Servos 0..7
00031 01DD 	;
00032 01DD 	;   Pin 10 (RB4/AN8/SLC1) SW2/LED2 (Active Low Input/Output)
00033 01DD 	;   Pin 11 (RB5/AN7)  SW3/LED3 (Active Low Input/Output)
00034 01DD 	;   Pin 12 (RB6/AN5/CCP2) ICSPCLK
00035 01DD 	;   Pin 13 (RB7/AN6) ICSPDAT
00036 01DD 	;   Pin 14 (Vcc) +5 volts
00037 01DD 	;   Pin 15 (RA6) N.C.
00038 01DD 	;   Pin 16 (RA7/CCP2) Pulse output for Servos 8..15
00039 01DD 	;   Pin 17 (RA0) Address A0 (output)
00040 01DD 	;   Pin 18 (RA1) Address A1 (output)
00041 01DD 	;
00042 01DD 	;=========================================================================================
00043 01DD 	;    Defines constants and variables in Banks 3,4,5 and 6
00044 01DD 	; include ServoLib.h
00045 01DD 	;=========================================================================================
00046 01DD 	;=========================================================================================
00047 01DD 	; Routines:
00048 01DD 	;
00049 01DD 	; ISR's
00050 01DD 	;  ISR_ServoCCP1
00051 01DD 	;  ISR_ServoCCP2
00052 01DD 	;
00053 01DD 	; ServoInit16	Call once to init vars
00054 01DD 	; StartServos	Call once to start servo system
00055 01DD 	;
00056 01DD 	; StartMotion	Call to move a servo,  W=Servo# 0..15, Param7D:Param7C = Dest
00057 01DD 	; IdleServos	Call from main loop
00058 01DD 	;
SimpleServo16PS.asm                                                   Page: 18
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00059 01DD 	; TestServoLib	Call from MainLoop to test, "this is only a test"
00060 01DD 	;
00061 01DD 	;=========================================================================================
00062 01DD 	; Init Code:
00063 01DD 	;
00064 01DD 	;	CALL	ServoInit16
00065 01DD 	;	CALL	StartServos
00066 01DD 	;
00067 01DD 	;=========================================================================================
00068 01DD 	; ISR Code:
00069 01DD 	;
00070 01DD 	;	MOVLB	0	;Bank0
00071 01DD 	;	BTFSC	PIR1,CCP1IF
00072 01DD 	;	CALL	ISR_ServoCCP1
00073 01DD 	;
00074 01DD 	;	BTFSC	PIR2,CCP2IF
00075 01DD 	;	CALL	ISR_Servo2
00076 01DD 	;
00077 01DD 	;=========================================================================================
00078 01DD 	; Main Loop Code:
00079 01DD 	;
00080 01DD 	;	CALL	IdleServos
00081 01DD 	;	CALL	TestServoLib	;Optional Test Routine
00082 01DD 	;
00083 01DD 	;=========================================================================================
00084 01DD 	; Interupt Service Routine for CCP1
00085 01DD 	;
00086 01DD 0025 	ISR_ServoCCP1	MOVLB	0x05	; bank 5
00087 01DE 	;
00088 01DE 1A62 		BTFSC	ServoCtlFlags,AddrChngDwell	;Is it time to change the address?
00089 01DF 2A28 		GOTO	IRQ_Servo_Next
00090 01E0 	;
00091 01E0 1862 		BTFSC	ServoCtlFlags,CyclePulseStart	;Is it time to start a new pulse/dwell?
00092 01E1 29E5 		GOTO	IRQ_Servo1_PulseOrDwell
00093 01E2 	;
00094 01E2 1962 		BTFSC	ServoCtlFlags,CyclePulseEnd1	;Is the current pulse ending?
00095 01E3 2A1B 		GOTO	IRQ_Servo1_OL
00096 01E4 	;
00097 01E4 	;	MOVF	ServoCtlFlags,F
00098 01E4 	;	SKPZ
00099 01E4 2A50 		GOTO	IRQ_Servo1_X	;tc
00100 01E5 	; if not set to do anything fall thru and start a cycle
00101 01E5 	IRQ_Servo1_PulseOrDwell:
00102 01E5 1062 		BCF	ServoCtlFlags,CyclePulseStart
00103 01E6 	; FSR1 = ServoFlags+ServoIDX
00104 01E6 0861 		MOVF	ServoIDX,W
00105 01E7 		LOADFSR1W	ServoFlags
00105 01E7 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00105 01E8 0086      M		movwf	FSR1L		movwf 	FSR1L
00105 01E9 0187      M		clrf	FSR1H		clrf	FSR1H
00105 01EA 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00105 01EB 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00106 01EC 	;
00107 01EC 1D01 		BTFSS	INDF1,ServoOnBit0_7	;Is this servo active?
00108 01ED 2A11 		GOTO	IRQ_Servo1_InAct	; No
00109 01EE 	; FSR0 = SigOutTime + ServoIDX * 2			
00110 01EE 3561 		LSLF	ServoIDX,W	;Servo Idx*2
00111 01EF 		LOADFSR0W	SigOutTime
00111 01EF 3E90      M		addlw	low SigOutTime		addlw 	low ADDRESS
00111 01F0 0084      M		movwf	FSR0L		movwf 	FSR0L
00111 01F1 0185      M		clrf	FSR0H		clrf	FSR0H
00111 01F2 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00111 01F3 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00112 01F4 	; Set time to end pulse
00113 01F4 0012 		MOVIW	FSR0++	;Put the pulse into the CCP reg.
00114 01F5 0791 		ADDWF	CCPR1L,F
00115 01F6 0013 		MOVIW	FSR0--
00116 01F7 3D92 		ADDWFC	CCPR1H,F
00117 01F8 3009 		MOVLW	CCPCON_Clr	;Clear output on match
00118 01F9 0093 		MOVWF	CCP1CON	;CCP1 clr on match
00119 01FA 	;Calculate dwell time
00120 01FA 3094 		MOVLW	LOW kServoDwellTimeA	;2.25mS
00121 01FB 00E3 		MOVWF	CalcdDwell
00122 01FC 3011 		MOVLW	HIGH kServoDwellTimeA
00123 01FD 00E4 		MOVWF	CalcdDwellH
00124 01FE 0012 		MOVIW	FSR0++	;SigOutTime
00125 01FF 02E3 		SUBWF	CalcdDwell,F
00126 0200 0012 		MOVIW	FSR0++	;SigOutTime+1
00127 0201 3BE4 		SUBWFB	CalcdDwellH,F
00128 0202 	; Store calc'd dwell for later
00129 0202 3561 		LSLF	ServoIDX,W	;FSR0 = DwellTime0_7 + ServoIDX * 2
00130 0203 		LOADFSR0W	DwellTime
00130 0203 3EB0      M		addlw	low DwellTime		addlw 	low ADDRESS
00130 0204 0084      M		movwf	FSR0L		movwf 	FSR0L
00130 0205 0185      M		clrf	FSR0H		clrf	FSR0H
00130 0206 3021      M		movlw	high DwellTime		movlw	high ADDRESS
00130 0207 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00131 0208 0863 		MOVF	CalcdDwell,W
00132 0209 001A 		MOVWI	FSR0++
00133 020A 0864 		MOVF	CalcdDwellH,W
00134 020B 001A 		MOVWI	FSR0++
00135 020C 	;Set Value Sent Flag
00136 020C 1401 		BSF	INDF1,ValueSentFlag0_7
00137 020D 1562 		BSF	ServoCtlFlags,CyclePulseEnd1
00138 020E 0020 		MOVLB	0	; bank 0
00139 020F 1111 		BCF	PIR1,CCP1IF
00140 0210 2A57 		GOTO	IRQ_Servo2_PulseOrDwell
00141 0211 	;
00142 0211 	;This servo was not active, see if the next one is active
SimpleServo16PS.asm                                                   Page: 19
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00143 0211 3094 	IRQ_Servo1_InAct	MOVLW	LOW kServoDwellTimeA
00144 0212 0791 		ADDWF	CCPR1L,F
00145 0213 3011 		MOVLW	HIGH kServoDwellTimeA
00146 0214 3D92 		ADDWFC	CCPR1H,F
00147 0215 1662 		BSF	ServoCtlFlags,AddrChngDwell
00148 0216 300A 		MOVLW	CCPCON_Int	; No, Interrupt only
00149 0217 0093 		MOVWF	CCP1CON
00150 0218 	;	
00151 0218 0020 		MOVLB	0	; bank 0
00152 0219 1111 		BCF	PIR1,CCP1IF
00153 021A 2A57 		GOTO	IRQ_Servo2_PulseOrDwell
00154 021B 	;
00155 021B 	; output went low so this cycle is done, set dwell time
00156 021B 3561 	IRQ_Servo1_OL	LSLF	ServoIDX,W	; FSR0 = DwellTime0_7 + ServoIDX * 2
00157 021C 		LOADFSR0W	DwellTime
00157 021C 3EB0      M		addlw	low DwellTime		addlw 	low ADDRESS
00157 021D 0084      M		movwf	FSR0L		movwf 	FSR0L
00157 021E 0185      M		clrf	FSR0H		clrf	FSR0H
00157 021F 3021      M		movlw	high DwellTime		movlw	high ADDRESS
00157 0220 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00158 0221 	;  Copy dwell to ccpr
00159 0221 0012 		MOVIW	FSR0++
00160 0222 0791 		ADDWF	CCPR1L,F
00161 0223 0012 		MOVIW	FSR0++
00162 0224 3D92 		ADDWFC	CCPR1H,F
00163 0225 	;
00164 0225 1162 		BCF	ServoCtlFlags,CyclePulseEnd1
00165 0226 1662 		BSF	ServoCtlFlags,AddrChngDwell
00166 0227 2A4E 		GOTO	IRQ_Servo1_IntOnly
00167 0228 	;
00168 0228 	; Next servo, If next servo is active set CCP to go high else interrupt only.
00169 0228 1262 	IRQ_Servo_Next	BCF	ServoCtlFlags,AddrChngDwell
00170 0229 1462 		BSF	ServoCtlFlags,CyclePulseStart
00171 022A 30F4 		MOVLW	LOW kServoAddrTime
00172 022B 0711 		ADDWF	CCPR1L,W
00173 022C 0091 		MOVWF	CCPR1L
00174 022D 0098 		MOVWF	CCPR2L
00175 022E 3001 		MOVLW	HIGH kServoAddrTime
00176 022F 3D12 		ADDWFC	CCPR1H,W
00177 0230 0092 		MOVWF	CCPR1H
00178 0231 0099 		MOVWF	CCPR2H
00179 0232 	; Next servo index
00180 0232 0A61 		INCF	ServoIDX,W
00181 0233 3907 		ANDLW	0x07
00182 0234 00E1 		MOVWF	ServoIDX
00183 0235 		LOADFSR1W	ServoFlags
00183 0235 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00183 0236 0086      M		movwf	FSR1L		movwf 	FSR1L
00183 0237 0187      M		clrf	FSR1H		clrf	FSR1H
00183 0238 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00183 0239 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00184 023A 	; Change Address
00185 023A 0022 		MOVLB	0x02	;bank 2
00186 023B 080C 		MOVF	LATA,W
00187 023C 39F8 		ANDLW	b'11111000'
00188 023D 0025 		MOVLB	0x05	;bank 5
00189 023E 0461 		IORWF	ServoIDX,W
00190 023F 0022 		MOVLB	0x02	;bank 2
00191 0240 008C 		MOVWF	LATA
00192 0241 0025 		MOVLB	0x05	;bank 5
00193 0242 	;
00194 0242 3008 		MOVLW	CCPCON_Set	;Clr CCP1 to go high on next match
00195 0243 1D01 		BTFSS	INDF1,ServoOnBit0_7	;Is the next servo active?
00196 0244 300A 		MOVLW	CCPCON_Int	; No, Interrupt only
00197 0245 0093 		MOVWF	CCP1CON
00198 0246 	;
00199 0246 3008 		MOVLW	CCPCON_Set
00200 0247 1F01 		BTFSS	INDF1,ServoOnBit8_15	;Is the next servo active?
00201 0248 300A 		MOVLW	CCPCON_Int	; No, Interrupt only
00202 0249 009A 		MOVWF	CCP2CON
00203 024A 	;	
00204 024A 0020 		MOVLB	0	; bank 0
00205 024B 1111 		BCF	PIR1,CCP1IF
00206 024C 1012 		BCF	PIR2,CCP2IF
00207 024D 0008 		RETURN
00208 024E 	;
00209 024E 300A 	IRQ_Servo1_IntOnly	MOVLW	CCPCON_Int	; No, Interrupt only
00210 024F 0093 		MOVWF	CCP1CON
00211 0250 	;	
00212 0250 0020 	IRQ_Servo1_X	MOVLB	0	; bank 0
00213 0251 1111 		BCF	PIR1,CCP1IF
00214 0252 0008 		RETURN
00215 0253 	;
00216 0253 	;===========================================
00217 0253 	; Interupt Service Routine for CCP2
00218 0253 	; Servos 8..15
00219 0253 	;
00220 0253 0025 	ISR_ServoCCP2	MOVLB	0x05	; bank 5
00221 0254 	;
00222 0254 19E2 		BTFSC	ServoCtlFlags,CyclePulseEnd2	;Is the current pulse ending?
00223 0255 2A88 		GOTO	IRQ_Servo2_OL
00224 0256 	;
00225 0256 2A96 		GOTO	IRQ_Servo2_X	;tc
00226 0257 	; if not set to do anything fall thru and start a cycle
00227 0257 	IRQ_Servo2_PulseOrDwell:
00228 0257 	; FSR1 = ServoFlags+ServoIDX
00229 0257 0025 		MOVLB	0x05	; bank 5
00230 0258 0861 		MOVF	ServoIDX,W
00231 0259 		LOADFSR1W	ServoFlags
SimpleServo16PS.asm                                                   Page: 20
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00231 0259 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00231 025A 0086      M		movwf	FSR1L		movwf 	FSR1L
00231 025B 0187      M		clrf	FSR1H		clrf	FSR1H
00231 025C 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00231 025D 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00232 025E 	;
00233 025E 1F01 		BTFSS	INDF1,ServoOnBit8_15	;Is this servo active?
00234 025F 2A83 		GOTO	IRQ_Servo2_InAct	; No
00235 0260 	; FSR0 = SigOutTime8_15 + ServoIDX * 2		
00236 0260 3561 		LSLF	ServoIDX,W
00237 0261 3E10 		ADDLW	0x10
00238 0262 		LOADFSR0W	SigOutTime
00238 0262 3E90      M		addlw	low SigOutTime		addlw 	low ADDRESS
00238 0263 0084      M		movwf	FSR0L		movwf 	FSR0L
00238 0264 0185      M		clrf	FSR0H		clrf	FSR0H
00238 0265 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00238 0266 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00239 0267 	; Set time to end pulse
00240 0267 0012 		MOVIW	FSR0++	;Put the pulse into the CCP reg.
00241 0268 0798 		ADDWF	CCPR2L,F
00242 0269 0013 		MOVIW	FSR0--
00243 026A 3D99 		ADDWFC	CCPR2H,F
00244 026B 3009 		MOVLW	CCPCON_Clr	;Clear output on match
00245 026C 009A 		MOVWF	CCP2CON	;CCP1 clr on match
00246 026D 	;Calculate dwell time
00247 026D 3094 		MOVLW	LOW kServoDwellTimeA
00248 026E 00E3 		MOVWF	CalcdDwell
00249 026F 3011 		MOVLW	HIGH kServoDwellTimeA
00250 0270 00E4 		MOVWF	CalcdDwellH
00251 0271 0012 		MOVIW	FSR0++	;SigOutTime8_15
00252 0272 02E3 		SUBWF	CalcdDwell,F
00253 0273 0012 		MOVIW	FSR0++	;SigOutTime8_15+1
00254 0274 3BE4 		SUBWFB	CalcdDwellH,F
00255 0275 	; Store calc'd dwell for later
00256 0275 3561 		LSLF	ServoIDX,W
00257 0276 3E10 		ADDLW	0x10
00258 0277 		LOADFSR0W	DwellTime	;FSR0 = DwellTime + ServoIDX * 2 + 0x10
00258 0277 3EB0      M		addlw	low DwellTime		addlw 	low ADDRESS
00258 0278 0084      M		movwf	FSR0L		movwf 	FSR0L
00258 0279 0185      M		clrf	FSR0H		clrf	FSR0H
00258 027A 3021      M		movlw	high DwellTime		movlw	high ADDRESS
00258 027B 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00259 027C 	;
00260 027C 0863 		MOVF	CalcdDwell,W
00261 027D 001A 		MOVWI	FSR0++
00262 027E 0864 		MOVF	CalcdDwellH,W
00263 027F 001A 		MOVWI	FSR0++
00264 0280 	;Set Value Sent Flag
00265 0280 1601 		BSF	INDF1,ValueSentFlag8_15
00266 0281 15E2 		BSF	ServoCtlFlags,CyclePulseEnd2
00267 0282 2A96 		GOTO	IRQ_Servo2_X
00268 0283 	;
00269 0283 	;This servo was not active, see if the next one is active
00270 0283 3094 	IRQ_Servo2_InAct	MOVLW	LOW kServoDwellTimeA
00271 0284 0798 		ADDWF	CCPR2L,F
00272 0285 3011 		MOVLW	HIGH kServoDwellTimeA
00273 0286 3D99 		ADDWFC	CCPR2H,F
00274 0287 2A94 		GOTO	IRQ_Servo2_IntOnly
00275 0288 	;
00276 0288 	; output went low so this cycle is done, set dwell time
00277 0288 3561 	IRQ_Servo2_OL	LSLF	ServoIDX,W
00278 0289 3E10 		ADDLW	0x10
00279 028A 		LOADFSR0W	DwellTime	;FSR0 = DwellTime + ServoIDX * 2 + 0x10
00279 028A 3EB0      M		addlw	low DwellTime		addlw 	low ADDRESS
00279 028B 0084      M		movwf	FSR0L		movwf 	FSR0L
00279 028C 0185      M		clrf	FSR0H		clrf	FSR0H
00279 028D 3021      M		movlw	high DwellTime		movlw	high ADDRESS
00279 028E 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00280 028F 	;
00281 028F 	; Copy dwell to ccpr
00282 028F 0012 		MOVIW	FSR0++
00283 0290 0798 		ADDWF	CCPR2L,F
00284 0291 0012 		MOVIW	FSR0++
00285 0292 3D99 		ADDWFC	CCPR2H,F
00286 0293 	;
00287 0293 11E2 		BCF	ServoCtlFlags,CyclePulseEnd2
00288 0294 	;
00289 0294 300A 	IRQ_Servo2_IntOnly	MOVLW	CCPCON_Int	; No, Interrupt only
00290 0295 009A 		MOVWF	CCP2CON
00291 0296 	;
00292 0296 0020 	IRQ_Servo2_X	MOVLB	0	; bank 0
00293 0297 1012 		BCF	PIR2,CCP2IF
00294 0298 0008 	IRQ_Servo2_End	RETURN
00295 0299 	;=========================================================================================
00296 0299 	;=========================================================================================
00297 0299 	; Servo motion control
00298 0299 	; Call from main loop
00299 0299 	;
00300 0299 0025 	IdleServos	MOVLB	0x05	; bank 5
00301 029A 236B 		CALL	SetFSR0ToServoFlags
00302 029B 19E0 		BTFSC	CMDServoIDX,3
00303 029C 2AA2 		GOTO	IdleServos8_15
00304 029D 	;
00305 029D 1D00 		BTFSS	INDF0,ServoOnBit0_7	;Is this servo active?
00306 029E 2B13 		GOTO	IdleServos_Next	; No
00307 029F 1C00 		BTFSS	INDF0,ValueSentFlag0_7	;Ready for an update?
00308 02A0 2B13 		GOTO	IdleServos_Next	; No
00309 02A1 2AA6 		GOTO	IdleServos_Update
00310 02A2 	;
SimpleServo16PS.asm                                                   Page: 21
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00311 02A2 1F00 	IdleServos8_15	BTFSS	INDF0,ServoOnBit8_15	;Is this servo active?
00312 02A3 2B13 		GOTO	IdleServos_Next	; No
00313 02A4 1E00 		BTFSS	INDF0,ValueSentFlag8_15	;Ready for an update?
00314 02A5 2B13 		GOTO	IdleServos_Next	; No
00315 02A6 	;
00316 02A6 1DE0 	IdleServos_Update	BTFSS	CMDServoIDX,3
00317 02A7 1000 		BCF	INDF0,ValueSentFlag0_7	;Mark as updated
00318 02A8 19E0 		BTFSC	CMDServoIDX,3
00319 02A9 1200 		BCF	INDF0,ValueSentFlag8_15	;Mark as updated
00320 02AA 	;
00321 02AA 	;FSR0 = Command Position
00322 02AA 3560 		LSLF	CMDServoIDX,W
00323 02AB 		LOADFSR0W	CMDSigTime
00323 02AB 3E20      M		addlw	low CMDSigTime		addlw 	low ADDRESS
00323 02AC 0084      M		movwf	FSR0L		movwf 	FSR0L
00323 02AD 0185      M		clrf	FSR0H		clrf	FSR0H
00323 02AE 3021      M		movlw	high CMDSigTime		movlw	high ADDRESS
00323 02AF 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00324 02B0 	;FSR1 = Current Position
00325 02B0 3560 		LSLF	CMDServoIDX,W
00326 02B1 		LOADFSR1W	SigOutTime
00326 02B1 3E90      M		addlw	low SigOutTime		addlw 	low ADDRESS
00326 02B2 0086      M		movwf	FSR1L		movwf 	FSR1L
00326 02B3 0187      M		clrf	FSR1H		clrf	FSR1H
00326 02B4 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00326 02B5 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00327 02B6 	; Param7D:Param7C = (FSR0)-(FSR1) Cmd-Cur
00328 02B6 0801 		MOVF	INDF1,W	;Cur, SigOutTime
00329 02B7 0200 		SUBWF	INDF0,W	;Cmd
00330 02B8 00FC 		MOVWF	Param7C
00331 02B9 0A84 		INCF	FSR0L,F
00332 02BA 0A86 		INCF	FSR1L,F
00333 02BB 0801 		MOVF	INDF1,W	;SigOutTimeH
00334 02BC 3B00 		SUBWFB	INDF0,W
00335 02BD 00FD 		MOVWF	Param7D
00336 02BE 0386 		DECF	FSR1L,F	;FSR1=SigOutTime+Servo#x2
00337 02BF 	;(FSR0)=ServoFlags
00338 02BF 	; if Param7D:Param7C = 0 then we are In Position
00339 02BF 087C 		MOVF	Param7C,W
00340 02C0 047D 		IORWF	Param7D,W
00341 02C1 		SKPNZ		;Command = Current?
00341 02C1 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00342 02C2 2B0E 		GOTO	IdleServos_InPos	; Yes, we are in-position
00343 02C3 	;
00344 02C3 2317 		CALL	IdleServos_Accel
00345 02C4 	; Clear the In-Position bit
00346 02C4 236B 		CALL	SetFSR0ToServoFlags
00347 02C5 1DE0 		BTFSS	CMDServoIDX,3
00348 02C6 1080 		BCF	INDF0,InPositionFlag0_7
00349 02C7 19E0 		BTFSC	CMDServoIDX,3
00350 02C8 1280 		BCF	INDF0,InPositionFlag8_15
00351 02C9 	;
00352 02C9 1FFD 		BTFSS	Param7D,7	;Cmd<Cur? Set if Cur>Cmd
00353 02CA 2AF4 		GOTO	IdleServos_MovPlus	; Yes
00354 02CB 	;Move minus
00355 02CB 1DE0 		BTFSS	CMDServoIDX,3
00356 02CC 1180 		BCF	INDF0,MovingFWD0_7
00357 02CD 19E0 		BTFSC	CMDServoIDX,3
00358 02CE 1380 		BCF	INDF0,MovingFWD8_15
00359 02CF 	; Get Speed
00360 02CF 234B 		CALL	GetSpeed
00361 02D0 00F8 		MOVWF	Param78
00362 02D1 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
00363 02D2 2ADC 		GOTO	IdleServos_Minus	; No
00364 02D3 0878 	IdleServos_L1	MOVF	Param78,W
00365 02D4 077C 		ADDWF	Param7C,W
00366 02D5 1C03 		BTFSS	_C	;Dist<Param78?
00367 02D6 2ADC 		GOTO	IdleServos_Minus	; No
00368 02D7 0B78 		DECFSZ	Param78,W	;Speed>1?
00369 02D8 2ADA 		GOTO	IdleServos_DecAcc	; Yes
00370 02D9 2ADC 		GOTO	IdleServos_Minus
00371 02DA 03F8 	IdleServos_DecAcc	DECF	Param78,F
00372 02DB 2AD3 		GOTO	IdleServos_L1	
00373 02DC 	;
00374 02DC 	; Subtract speed from current position
00375 02DC 0878 	IdleServos_Minus	MOVF	Param78,W
00376 02DD 0201 		SUBWF	INDF1,W	;SigOutTime
00377 02DE 00FC 		MOVWF	Param7C
00378 02DF 0A86 		INCF	FSR1L,F
00379 02E0 3000 		MOVLW	0x00
00380 02E1 3B01 		SUBWFB	INDF1,W	;SigOutTimeH
00381 02E2 00FD 		MOVWF	Param7D
00382 02E3 	;
00383 02E3 	;FSR1 = SigOutTime0_7+1 + Servo# x 2
00384 02E3 3560 	IdleServos_Clamp	LSLF	CMDServoIDX,W	
00385 02E4 	;	CALL	ClampMinMax
00386 02E4 	;
00387 02E4 138B 	IdleServos_DisInt	bcf	INTCON,GIE
00388 02E5 1B8B 		BTFSC	INTCON,GIE
00389 02E6 2AE4 		GOTO	IdleServos_DisInt
00390 02E7 	;
00391 02E7 	;FSR1 = Current Position
00392 02E7 0025 		MOVLB	0x05	;bank5
00393 02E8 3560 		LSLF	CMDServoIDX,W
00394 02E9 		LOADFSR1W	SigOutTime
00394 02E9 3E90      M		addlw	low SigOutTime		addlw 	low ADDRESS
00394 02EA 0086      M		movwf	FSR1L		movwf 	FSR1L
00394 02EB 0187      M		clrf	FSR1H		clrf	FSR1H
00394 02EC 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
SimpleServo16PS.asm                                                   Page: 22
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00394 02ED 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00395 02EE 	;
00396 02EE 087C 		MOVF	Param7C,W	;SigOutTime
00397 02EF 001E 		MOVWI	FSR1++
00398 02F0 087D 		MOVF	Param7D,W
00399 02F1 001E 		MOVWI	FSR1++
00400 02F2 	;
00401 02F2 178B 		bsf	INTCON,GIE
00402 02F3 	;
00403 02F3 2B13 		GOTO	IdleServos_Next
00404 02F4 	;
00405 02F4 	;=============================
00406 02F4 	; 7D:7C = distance to go
00407 02F4 	; FSR1=SigOutTime0_7 + Servo#x2
00408 02F4 	; FSR0=ServoFlags + Servo# & 0x07
00409 02F4 	;
00410 02F4 1DE0 	IdleServos_MovPlus	BTFSS	CMDServoIDX,3
00411 02F5 1580 		BSF	INDF0,MovingFWD0_7
00412 02F6 19E0 		BTFSC	CMDServoIDX,3
00413 02F7 1780 		BSF	INDF0,MovingFWD8_15
00414 02F8 	; Get Speed
00415 02F8 234B 		CALL	GetSpeed
00416 02F9 00F8 		MOVWF	Param78
00417 02FA 08FD 		MOVF	Param7D,F
00418 02FB 		SKPZ		;>255 to go?
00418 02FB 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00419 02FC 2B06 		GOTO	IdleServos_Plus	; Yes
00420 02FD 0878 	IdleServos_L2	MOVF	Param78,W
00421 02FE 027C 		SUBWF	Param7C,W	;Dist-Speed
00422 02FF 		SKPB		;Speed>Dist?
00422 02FF 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00423 0300 2B06 		GOTO	IdleServos_Plus	; No
00424 0301 0B78 		DECFSZ	Param78,W
00425 0302 2B04 		GOTO	IdleServos_IncAcc
00426 0303 2B06 		GOTO	IdleServos_Plus
00427 0304 03F8 	IdleServos_IncAcc	DECF	Param78,F
00428 0305 2AFD 		GOTO	IdleServos_L2	
00429 0306 	;
00430 0306 0878 	IdleServos_Plus	MOVF	Param78,W	;7D:7C = CurPos + Speed
00431 0307 0701 		ADDWF	INDF1,W	;SigOutTime
00432 0308 00FC 		MOVWF	Param7C
00433 0309 0A86 		INCF	FSR1L,F
00434 030A 0103 		CLRW
00435 030B 3D01 		ADDWFC	INDF1,W	;SigOutTimeH
00436 030C 00FD 		MOVWF	Param7D
00437 030D 2AE3 		GOTO	IdleServos_Clamp
00438 030E 	;
00439 030E 	;========================================
00440 030E 	;
00441 030E 236B 	IdleServos_InPos	CALL	SetFSR0ToServoFlags
00442 030F 1DE0 		BTFSS	CMDServoIDX,3
00443 0310 1480 		BSF	INDF0,InPositionFlag0_7
00444 0311 19E0 		BTFSC	CMDServoIDX,3
00445 0312 1680 		BSF	INDF0,InPositionFlag8_15
00446 0313 	;	
00447 0313 0A60 	IdleServos_Next	INCF	CMDServoIDX,W
00448 0314 390F 		ANDLW	0x0F
00449 0315 00E0 		MOVWF	CMDServoIDX
00450 0316 0008 		RETURN
00451 0317 	;
00452 0317 	;=========================================================================================
00453 0317 	;Do Accel
00454 0317 	;
00455 0317 	; Entry: Bank 5, CMDServoIDX
00456 0317 	; Exit:
00457 0317 	; Ram Used: Param78, Param79, FSR0
00458 0317 	;
00459 0317 2363 	IdleServos_Accel	CALL	SetFSR0ToServoFlags2
00460 0318 19E0 		BTFSC	CMDServoIDX,3
00461 0319 2B1D 		GOTO	IdleServos_Accel_1
00462 031A 	;
00463 031A 1800 		BTFSC	INDF0,AccelComplete0_7	;Done with accel?
00464 031B 0008 		RETURN		; Yes
00465 031C 2B1F 		GOTO	IdleServos_Accel_2
00466 031D 	;
00467 031D 1A00 	IdleServos_Accel_1	BTFSC	INDF0,AccelComplete8_15	;Done with accel?
00468 031E 0008 		RETURN		; Yes
00469 031F 	;
00470 031F 234B 	IdleServos_Accel_2	CALL	GetSpeed
00471 0320 00F8 		MOVWF	Param78	;Save Cur Speed in 78
00472 0321 2353 		CALL	GetMaxSpeed
00473 0322 00F9 		MOVWF	Param79	;Save Max Speed in 79
00474 0323 0278 		SUBWF	Param78,W	;W=CurSpd-MaxSpd
00475 0324 1903 		BTFSC	_Z	;Max=CurSpd?
00476 0325 2B3C 		GOTO	AccelDone	; Yes
00477 0326 		SKPB		;Max>CurSpd?
00477 0326 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00478 0327 2B3C 		GOTO	AccelDone	; No
00479 0328 235B 		CALL	GetAccelValue
00480 0329 07F8 		ADDWF	Param78,F	;CurSpd=CurSpd+Accel
00481 032A 0878 		MOVF	Param78,W	;new CurSpd
00482 032B 0279 		SUBWF	Param79,W	;Max-new Cur
00483 032C 0878 		MOVF	Param78,W	;new Cur
00484 032D 		SKPB		;new Cur>Max?
00484 032D 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00485 032E 0879 		MOVF	Param79,W	; Yes, use max instead
00486 032F 00F8 		MOVWF	Param78	;New Speed
00487 0330 	;FSR0 = CMDServoIDX*2 + AccelRampLen
00488 0330 3560 		LSLF	CMDServoIDX,W	
SimpleServo16PS.asm                                                   Page: 23
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00489 0331 		LOADFSR0W	AccelRampLen
00489 0331 3EE0      M		addlw	low AccelRampLen		addlw 	low ADDRESS
00489 0332 0084      M		movwf	FSR0L		movwf 	FSR0L
00489 0333 0185      M		clrf	FSR0H		clrf	FSR0H
00489 0334 3021      M		movlw	high AccelRampLen		movlw	high ADDRESS
00489 0335 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00490 0336 0878 		MOVF	Param78,W
00491 0337 0780 		ADDWF	INDF0,F
00492 0338 3101 		addfsr	FSR0,1
00493 0339 0103 		CLRW
00494 033A 3D80 		ADDWFC	INDF0,F
00495 033B 2B42 		GOTO	SaveSpeed
00496 033C 	;
00497 033C 	;========================================
00498 033C 	; Set AccelComplete flag for servo (CMDServoIDX)
00499 033C 	;
00500 033C 	; Entry: Bank 5
00501 033C 	; Exit: FSR0 >> ServoFlags2
00502 033C 	;
00503 033C 2363 	AccelDone	CALL	SetFSR0ToServoFlags2
00504 033D 1DE0 		BTFSS	CMDServoIDX,3
00505 033E 1400 		BSF	INDF0,AccelComplete0_7
00506 033F 19E0 		BTFSC	CMDServoIDX,3
00507 0340 1600 		BSF	INDF0,AccelComplete8_15
00508 0341 0008 		RETURN
00509 0342 	;
00510 0342 	;==========================================
00511 0342 	; Save speed Param78 to ServoCurSpeed for servo (CMDServoIDX)
00512 0342 	;
00513 0342 	; Entry: Bank 5, Param78 = Speed
00514 0342 	; Exit: FSR0 >> ServoCurSpeed
00515 0342 	;
00516 0342 0860 	SaveSpeed	MOVF	CMDServoIDX,W
00517 0343 		LOADFSR0W	ServoCurSpeed
00517 0343 3E10      M		addlw	low ServoCurSpeed		addlw 	low ADDRESS
00517 0344 0084      M		movwf	FSR0L		movwf 	FSR0L
00517 0345 0185      M		clrf	FSR0H		clrf	FSR0H
00517 0346 3021      M		movlw	high ServoCurSpeed		movlw	high ADDRESS
00517 0347 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00518 0348 0878 		MOVF	Param78,W
00519 0349 0080 		MOVWF	INDF0
00520 034A 0008 		RETURN
00521 034B 	;
00522 034B 	;==========================================
00523 034B 	; Get ServoCurSpeed for servo (CMDServoIDX)
00524 034B 	;
00525 034B 	; Entry: Bank 5
00526 034B 	; Exit: FSR0 >> ServoCurSpeed, W=ServoCurSpeed
00527 034B 	;
00528 034B 0860 	GetSpeed	MOVF	CMDServoIDX,W
00529 034C 		LOADFSR0W	ServoCurSpeed
00529 034C 3E10      M		addlw	low ServoCurSpeed		addlw 	low ADDRESS
00529 034D 0084      M		movwf	FSR0L		movwf 	FSR0L
00529 034E 0185      M		clrf	FSR0H		clrf	FSR0H
00529 034F 3021      M		movlw	high ServoCurSpeed		movlw	high ADDRESS
00529 0350 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00530 0351 0800 		MOVF	INDF0,W
00531 0352 0008 		RETURN
00532 0353 	;
00533 0353 	;==========================================
00534 0353 	; Get ServoMaxSpeed for servo (CMDServoIDX)
00535 0353 	;
00536 0353 	; Entry: Bank 5
00537 0353 	; Exit: FSR0 >> ServoMaxSpeed, W=ServoMaxSpeed
00538 0353 	;
00539 0353 0860 	GetMaxSpeed	MOVF	CMDServoIDX,W
00540 0354 		LOADFSR0W	ServoMaxSpeed
00540 0354 3EF0      M		addlw	low ServoMaxSpeed		addlw 	low ADDRESS
00540 0355 0084      M		movwf	FSR0L		movwf 	FSR0L
00540 0356 0185      M		clrf	FSR0H		clrf	FSR0H
00540 0357 3020      M		movlw	high ServoMaxSpeed		movlw	high ADDRESS
00540 0358 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00541 0359 0800 		MOVF	INDF0,W
00542 035A 0008 		RETURN
00543 035B 	;
00544 035B 	;==========================================
00545 035B 	; Get ServoAccelValue for servo (CMDServoIDX)
00546 035B 	;
00547 035B 	; Entry: Bank 5
00548 035B 	; Exit: FSR0 >> ServoAccelValue, W=ServoAccelValue
00549 035B 	;
00550 035B 0860 	GetAccelValue	MOVF	CMDServoIDX,W
00551 035C 		LOADFSR0W	ServoAccelValue
00551 035C 3E00      M		addlw	low ServoAccelValue		addlw 	low ADDRESS
00551 035D 0084      M		movwf	FSR0L		movwf 	FSR0L
00551 035E 0185      M		clrf	FSR0H		clrf	FSR0H
00551 035F 3021      M		movlw	high ServoAccelValue		movlw	high ADDRESS
00551 0360 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00552 0361 0800 		MOVF	INDF0,W
00553 0362 0008 		RETURN
00554 0363 	;
00555 0363 	;=========================================================================================
00556 0363 	; Point FRS0 at ServoFlags2
00557 0363 	;
00558 0363 	; Entry: Bank 5
00559 0363 	; Exit: FSR0 >> ServoFlags2
00560 0363 	;
00561 0363 0860 	SetFSR0ToServoFlags2	MOVF	CMDServoIDX,W
00562 0364 3907 		ANDLW	0x07
SimpleServo16PS.asm                                                   Page: 24
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00563 0365 		LOADFSR0W	ServoFlags2
00563 0365 3E88      M		addlw	low ServoFlags2		addlw 	low ADDRESS
00563 0366 0084      M		movwf	FSR0L		movwf 	FSR0L
00563 0367 0185      M		clrf	FSR0H		clrf	FSR0H
00563 0368 3021      M		movlw	high ServoFlags2		movlw	high ADDRESS
00563 0369 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00564 036A 0008 		RETURN
00565 036B 	;
00566 036B 	;=========================================================================================
00567 036B 	; Point FRS0 at ServoFlags
00568 036B 	;
00569 036B 	; Entry: Bank 5
00570 036B 	; Exit: FSR0 >> ServoFlags
00571 036B 	;
00572 036B 	;
00573 036B 0860 	SetFSR0ToServoFlags	MOVF	CMDServoIDX,W
00574 036C 3907 		ANDLW	0x07
00575 036D 		LOADFSR0W	ServoFlags
00575 036D 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00575 036E 0084      M		movwf	FSR0L		movwf 	FSR0L
00575 036F 0185      M		clrf	FSR0H		clrf	FSR0H
00575 0370 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00575 0371 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00576 0372 0008 		RETURN
00577 0373 	;
00578 0373 	;=========================================================================================
00579 0373 	; Set CCP1/2 to cause an interrupt the next time T1 matches CCPRn
00580 0373 	; Call Once to activate servos
00581 0373 	;
00582 0373 0022 	StartServos	MOVLB	0x02	; bank 2
00583 0374 118C 		BCF	Enable0_7	; Active Low Output
00584 0375 120C 		BCF	Enable8_15
00585 0376 0025 		MOVLB	0x05
00586 0377 0191 		CLRF	CCPR1L
00587 0378 0192 		CLRF	CCPR1H
00588 0379 0198 		CLRF	CCPR2L
00589 037A 0199 		CLRF	CCPR2H
00590 037B 300A 		MOVLW	CCPCON_Int	;interrupt on match
00591 037C 0093 		MOVWF	CCP1CON
00592 037D 009A 		MOVWF	CCP2CON
00593 037E 1462 		BSF	ServoCtlFlags,CyclePulseStart
00594 037F 0021 		MOVLB	0x01
00595 0380 1511 		BSF	PIE1,CCP1IE
00596 0381 1412 		BSF	PIE2,CCP2IE
00597 0382 0020 		MOVLB	0x00	;Bank 0
00598 0383 0008 		RETURN
00599 0384 	;
00600 0384 	;=========================================================================================
00601 0384 	; Setup all data to usable values
00602 0384 	; Call once before mainloop begins
00603 0384 	;
00604 0384 	; RAM Used:Param78, Param79, Param7A, FSR0
00605 0384 	;
00606 0384 	;
00607 0384 0103 	ServoInit16	CLRW
00608 0385 		LOADFSR0W	ServoMaxSpeed
00608 0385 3EF0      M		addlw	low ServoMaxSpeed		addlw 	low ADDRESS
00608 0386 0084      M		movwf	FSR0L		movwf 	FSR0L
00608 0387 0185      M		clrf	FSR0H		clrf	FSR0H
00608 0388 3020      M		movlw	high ServoMaxSpeed		movlw	high ADDRESS
00608 0389 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00609 038A 	;ServoMaxSpeed 0..15
00610 038A 3030 		MOVLW	DefaultMaxSpeed
00611 038B 23BF 		CALL	Store16Times
00612 038C 	;ServoAccelValue 0..15
00613 038C 3001 		MOVLW	DefaultAccel
00614 038D 23BF 		CALL	Store16Times
00615 038E 	;ServoCurSpeed 0..15
00616 038E 3001 		MOVLW	0x01
00617 038F 23BF 		CALL	Store16Times	;CurSpeed=min
00618 0390 	;
00619 0390 	; Set Command position to center
00620 0390 0103 		CLRW
00621 0391 		LOADFSR0W	CMDSigTime
00621 0391 3E20      M		addlw	low CMDSigTime		addlw 	low ADDRESS
00621 0392 0084      M		movwf	FSR0L		movwf 	FSR0L
00621 0393 0185      M		clrf	FSR0H		clrf	FSR0H
00621 0394 3021      M		movlw	high CMDSigTime		movlw	high ADDRESS
00621 0395 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00622 0396 30B8 		MOVLW	LOW kCenterPulseWidth
00623 0397 00F8 		MOVWF	Param78
00624 0398 300B 		MOVLW	HIGH kCenterPulseWidth
00625 0399 00F9 		MOVWF	Param79
00626 039A 23B6 		CALL	StoreWord16Times
00627 039B 	; Set minimum time MinTime0_7,MinTime8_15
00628 039B 3008 		MOVLW	LOW kMinPulseWidth
00629 039C 00F8 		MOVWF	Param78
00630 039D 3007 		MOVLW	HIGH kMinPulseWidth
00631 039E 00F9 		MOVWF	Param79
00632 039F 23B6 		CALL	StoreWord16Times
00633 03A0 	;MaxTime 0..15
00634 03A0 3068 		MOVLW	LOW kMaxPulseWidth
00635 03A1 00F8 		MOVWF	Param78
00636 03A2 3010 		MOVLW	HIGH kMaxPulseWidth
00637 03A3 00F9 		MOVWF	Param79
00638 03A4 23B6 		CALL	StoreWord16Times
00639 03A5 	; Set ServoFlags
00640 03A5 	;
00641 03A5 3022 		MOVLW	DefaultSFlags
SimpleServo16PS.asm                                                   Page: 25
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00642 03A6 23C7 		CALL	Store8Times
00643 03A7 	;
00644 03A7 	; Set current position to center 
00645 03A7 0103 		CLRW
00646 03A8 		LOADFSR0W	SigOutTime
00646 03A8 3E90      M		addlw	low SigOutTime		addlw 	low ADDRESS
00646 03A9 0084      M		movwf	FSR0L		movwf 	FSR0L
00646 03AA 0185      M		clrf	FSR0H		clrf	FSR0H
00646 03AB 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00646 03AC 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00647 03AD 	; SigOutTime 0..15
00648 03AD 30B8 		MOVLW	LOW kCenterPulseWidth
00649 03AE 00F8 		MOVWF	Param78
00650 03AF 300B 		MOVLW	HIGH kCenterPulseWidth
00651 03B0 00F9 		MOVWF	Param79
00652 03B1 23B6 		CALL	StoreWord16Times
00653 03B2 	; DwellTime 0..15
00654 03B2 3088 		MOVLW	LOW kServoDwellTime
00655 03B3 00F8 		MOVWF	Param78
00656 03B4 3013 		MOVLW	HIGH kServoDwellTime
00657 03B5 00F9 		MOVWF	Param79
00658 03B6 	; Fall thu to StoreWord16Times
00659 03B6 	;
00660 03B6 3010 	StoreWord16Times	MOVLW	.16
00661 03B7 00FA 		MOVWF	Param7A
00662 03B8 0878 	StoreWord16Times_L1	MOVF	Param78,W
00663 03B9 001A 		MOVWI	FSR0++
00664 03BA 0879 		MOVF	Param79,W
00665 03BB 001A 		MOVWI	FSR0++
00666 03BC 0BFA 		DECFSZ	Param7A,F
00667 03BD 2BB8 		GOTO	StoreWord16Times_L1
00668 03BE 0008 		RETURN
00669 03BF 	;
00670 03BF 00F8 	Store16Times	MOVWF	Param78
00671 03C0 3010 		MOVLW	.16
00672 03C1 00F9 	StoreXTimes	MOVWF	Param79
00673 03C2 0878 		MOVF	Param78,W
00674 03C3 001A 	StoreXTimes_L1	MOVWI	FSR0++
00675 03C4 0BF9 		DECFSZ	Param79,F
00676 03C5 2BC3 		GOTO	StoreXTimes_L1
00677 03C6 0008 		RETURN
00678 03C7 	;
00679 03C7 00F8 	Store8Times	MOVWF	Param78
00680 03C8 3008 		MOVLW	.8
00681 03C9 2BC1 		GOTO	StoreXTimes
00682 03CA 	;
00683 03CA 	;=========================================================================================
00684 03CA 	; Entry: W=Servo# 0..15, Param7D:Param7C = Dest
00685 03CA 	; Exit: W=unchanged
00686 03CA 	; Ram used: Param78, Param7C, Param7D FSR0
00687 03CA 	; Calls: none
00688 03CA 	;
00689 03CA 390F 	StartMotion	ANDLW	0x0F
00690 03CB 00F8 		MOVWF	Param78
00691 03CC 	; Copy 7D:7C to CMDSigTime
00692 03CC 3578 		LSLF	Param78,W	;x2, 0,2,4..30
00693 03CD 		LOADFSR0W	CMDSigTime
00693 03CD 3E20      M		addlw	low CMDSigTime		addlw 	low ADDRESS
00693 03CE 0084      M		movwf	FSR0L		movwf 	FSR0L
00693 03CF 0185      M		clrf	FSR0H		clrf	FSR0H
00693 03D0 3021      M		movlw	high CMDSigTime		movlw	high ADDRESS
00693 03D1 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00694 03D2 087C 		MOVF	Param7C,W
00695 03D3 001A 		MOVWI	FSR0++
00696 03D4 087D 		MOVF	Param7D,W
00697 03D5 001A 		MOVWI	FSR0++
00698 03D6 	; Set ServoCurSpeed to 1 (minimum)
00699 03D6 0878 		MOVF	Param78,W
00700 03D7 		LOADFSR0W	ServoCurSpeed
00700 03D7 3E10      M		addlw	low ServoCurSpeed		addlw 	low ADDRESS
00700 03D8 0084      M		movwf	FSR0L		movwf 	FSR0L
00700 03D9 0185      M		clrf	FSR0H		clrf	FSR0H
00700 03DA 3021      M		movlw	high ServoCurSpeed		movlw	high ADDRESS
00700 03DB 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00701 03DC 3001 		MOVLW	0x01
00702 03DD 0080 		MOVWF	INDF0
00703 03DE 	; Clear the In-Position Flag
00704 03DE 0878 		MOVF	Param78,W
00705 03DF 3907 		ANDLW	0x07
00706 03E0 		LOADFSR0W	ServoFlags
00706 03E0 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00706 03E1 0084      M		movwf	FSR0L		movwf 	FSR0L
00706 03E2 0185      M		clrf	FSR0H		clrf	FSR0H
00706 03E3 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00706 03E4 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00707 03E5 1DF8 		BTFSS	Param78,3
00708 03E6 1080 		BCF	INDF0,InPositionFlag0_7
00709 03E7 19F8 		BTFSC	Param78,3
00710 03E8 1280 		BCF	INDF0,InPositionFlag8_15
00711 03E9 	; Set ServoFlags,ServoOnBit
00712 03E9 1DF8 		BTFSS	Param78,3
00713 03EA 1500 		BSF	INDF0,ServoOnBit0_7
00714 03EB 19F8 		BTFSC	Param78,3
00715 03EC 1700 		BSF	INDF0,ServoOnBit8_15
00716 03ED 	; Clear the AccelComplete Flag
00717 03ED 0878 		MOVF	Param78,W
00718 03EE 3907 		ANDLW	0x07
00719 03EF 		LOADFSR0W	ServoFlags2
00719 03EF 3E88      M		addlw	low ServoFlags2		addlw 	low ADDRESS
SimpleServo16PS.asm                                                   Page: 26
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00719 03F0 0084      M		movwf	FSR0L		movwf 	FSR0L
00719 03F1 0185      M		clrf	FSR0H		clrf	FSR0H
00719 03F2 3021      M		movlw	high ServoFlags2		movlw	high ADDRESS
00719 03F3 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00720 03F4 1DF8 		BTFSS	Param78,3
00721 03F5 1000 		BCF	INDF0,AccelComplete0_7
00722 03F6 19F8 		BTFSC	Param78,3
00723 03F7 1200 		BCF	INDF0,AccelComplete8_15
00724 03F8 	; Clear AccelRampLen
00725 03F8 3578 		LSLF	Param78,W	;x2, 0,2,4..30
00726 03F9 		LOADFSR0W	AccelRampLen
00726 03F9 3EE0      M		addlw	low AccelRampLen		addlw 	low ADDRESS
00726 03FA 0084      M		movwf	FSR0L		movwf 	FSR0L
00726 03FB 0185      M		clrf	FSR0H		clrf	FSR0H
00726 03FC 3021      M		movlw	high AccelRampLen		movlw	high ADDRESS
00726 03FD 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00727 03FE 0103 		CLRW
00728 03FF 001A 		MOVWI	FSR0++
00729 0400 001A 		MOVWI	FSR0++
00730 0401 0008 		RETURN
00731 0402 	;
00732 0402 		if oldCode
00844 0402 		endif
00845 0402 	;
00846 0402 	;=========================================================================================
00847 0402 	; ClampInt(Param7D:Param7C,kMinPulseWidth,kMaxPulseWidth)
00848 0402 	;
00849 0402 	; Entry: Param7D:Param7C
00850 0402 	; Exit: Param7D:Param7C=ClampInt(Param7D:Param7C,kMinPulseWidth,kMaxPulseWidth)
00851 0402 	;
00852 0402 3010 	ClampInt	MOVLW	high kMaxPulseWidth
00853 0403 027D 		SUBWF	Param7D,W	;7D-kMaxPulseWidth
00854 0404 		SKPNB		;7D<Max?
00854 0404 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00855 0405 2C0F 		GOTO	ClampInt_1	; Yes
00856 0406 		SKPZ		;7D=Max?
00856 0406 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00857 0407 2C1E 		GOTO	ClampInt_tooHigh	; No, its greater.
00858 0408 3068 		MOVLW	low kMaxPulseWidth	; Yes, MSB was equal check LSB
00859 0409 027C 		SUBWF	Param7C,W	;7C-kMaxPulseWidth
00860 040A 		SKPNZ		;=kMaxPulseWidth
00860 040A 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00861 040B 0008 		RETURN		;Yes
00862 040C 		SKPB		;7C<Max?
00862 040C 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00863 040D 2C1E 		GOTO	ClampInt_tooHigh	; No
00864 040E 0008 		RETURN		; Yes
00865 040F 	;
00866 040F 3007 	ClampInt_1	MOVLW	high kMinPulseWidth
00867 0410 027D 		SUBWF	Param7D,W	;7D-kMinPulseWidth
00868 0411 		SKPNB		;7D<Min?
00868 0411 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00869 0412 2C19 		GOTO	ClampInt_tooLow	; Yes
00870 0413 		SKPZ		;=Min?
00870 0413 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00871 0414 0008 		RETURN		; No, 7D>kMinPulseWidth
00872 0415 3008 		MOVLW	low kMinPulseWidth	; Yes, MSB is a match
00873 0416 027C 		SUBWF	Param7C,W	;7C-kMinPulseWidth
00874 0417 		SKPB		;7C>=Min?
00874 0417 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00875 0418 0008 		RETURN		; Yes
00876 0419 	;	
00877 0419 3008 	ClampInt_tooLow	MOVLW	low kMinPulseWidth
00878 041A 00FC 		MOVWF	Param7C
00879 041B 3007 		MOVLW	high kMinPulseWidth
00880 041C 00FD 		MOVWF	Param7D
00881 041D 0008 		RETURN
00882 041E 	;
00883 041E 3068 	ClampInt_tooHigh	MOVLW	low kMaxPulseWidth
00884 041F 00FC 		MOVWF	Param7C
00885 0420 3010 		MOVLW	high kMaxPulseWidth
00886 0421 00FD 		MOVWF	Param7D
00887 0422 0008 		RETURN
00888 0423 	;
00889 0423 	;=========================================================================================
00890 0423 	; ClampMinMax(Param7D:Param7C,W = offset servo# * 2 (0,2,4..30)
00891 0423 	;
00892 0423 	; Entry: Param7D:Param7C, W=servo# x 2
00893 0423 	; Exit: Param7D:Param7C=ClampInt(Param7D:Param7C,(MinTime0_7+Param78),(MaxTime0_7+Param78))
00894 0423 	; Ram used: Param78, Param7C, Param7D, FSR0
00895 0423 	;
00896 0423 00F8 	ClampMinMax	MOVWF	Param78	;ServoNum * 2
00897 0424 0A78 		INCF	Param78,W	; MSB index
00898 0425 		LOADFSR0W	MaxTime
00898 0425 3E60      M		addlw	low MaxTime		addlw 	low ADDRESS
00898 0426 0084      M		movwf	FSR0L		movwf 	FSR0L
00898 0427 0185      M		clrf	FSR0H		clrf	FSR0H
00898 0428 3021      M		movlw	high MaxTime		movlw	high ADDRESS
00898 0429 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00899 042A 0013 		MOVIW	FSR0--	;MaxTime+Offset+1
00900 042B 027D 		SUBWF	Param7D,W	;7D-kMaxPulseWidth
00901 042C 		SKPNB		;7D<Max?
00901 042C 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00902 042D 2C37 		GOTO	ClampMinMax_1	; Yes
00903 042E 		SKPZ		;7D=Max?
00903 042E 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00904 042F 2C47 		GOTO	ClampMinMax_too	; No, its greater.
00905 0430 0800 		MOVF	INDF0,W	; Yes, MSB was equal check LSB
00906 0431 027C 		SUBWF	Param7C,W	;7C-kMaxPulseWidth
SimpleServo16PS.asm                                                   Page: 27
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00907 0432 		SKPNZ		;=kMaxPulseWidth
00907 0432 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00908 0433 0008 		RETURN		;Yes
00909 0434 		SKPB		;7C<Max?
00909 0434 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00910 0435 2C47 		GOTO	ClampMinMax_too	; No
00911 0436 0008 		RETURN		; Yes
00912 0437 	;
00913 0437 0A78 	ClampMinMax_1	INCF	Param78,W
00914 0438 		LOADFSR0W	MinTime
00914 0438 3E40      M		addlw	low MinTime		addlw 	low ADDRESS
00914 0439 0084      M		movwf	FSR0L		movwf 	FSR0L
00914 043A 0185      M		clrf	FSR0H		clrf	FSR0H
00914 043B 3021      M		movlw	high MinTime		movlw	high ADDRESS
00914 043C 3D85      M		addwfc	FSR0H,F		addwfc	FSR0H,F	;<< needed to work w/ contig ram
00915 043D 0013 		MOVIW	FSR0--	;MinTime+Offset+1
00916 043E 027D 		SUBWF	Param7D,W	;7D-kMinPulseWidth
00917 043F 		SKPNB		;7D<Min?
00917 043F 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00918 0440 2C47 		GOTO	ClampMinMax_too	; Yes
00919 0441 		SKPZ		;=Min?
00919 0441 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00920 0442 0008 		RETURN		; No, 7D>kMinPulseWidth
00921 0443 0800 		MOVF	INDF0,W	; Yes, MSB is a match
00922 0444 027C 		SUBWF	Param7C,W	;7C-kMinPulseWidth
00923 0445 		SKPB		;7C>=Min?
00923 0445 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00924 0446 0008 		RETURN		; Yes
00925 0447 	;	
00926 0447 0012 	ClampMinMax_too	MOVIW	FSR0++
00927 0448 00FC 		MOVWF	Param7C
00928 0449 0800 		MOVF	INDF0,W
00929 044A 00FD 		MOVWF	Param7D
00930 044B 0008 		RETURN
00931 044C 	;
00932 044C 	;
00933 044C 	;
00934 044C 	;
00935 044C 	;
00936 044C 	;
00937 044C 	;
00938 044C 	;
00939 044C 	;
00940 044C 	;
00941 044C 	;
00942 044C 	;
00943 044C 	;
00944 044C 	;
00945 044C 	;
00946 044C 	;
00947 044C 	;
00948 044C 	;
00949 044C 	;
00950 044C 	;
00951 044C 	;
00952 044C 	;
00953 044C 	;
00954 044C 	;
00955 044C 	;
00956 044C 	;
00957 044C 	;
00958 044C 	;
00959 044C 	;
00527 044C 	;
00528 044C 	;
00529 044C 		org 0x800
00530 0800 		include <SSC16PSCmds.inc>
00001 0800 	;=========================================================================================
00002 0800 	;
00003 0800 	;    Filename:      SerialServoCmds.inc
00004 0800 	;    Date:          4/1/2021
00005 0800 	;    File Version:  1.0.0
00006 0800 	;
00007 0800 	;    Author:        David M. Flynn
00008 0800 	;    Company:       Oxford V.U.E., Inc.
00009 0800 	;    E-Mail:        dflynn@oxfordvue.com
00010 0800 	;    Web Site:      http://www.oxfordvue.com/
00011 0800 	;
00012 0800 	;=========================================================================================
00013 0800 	; Notes:
00014 0800 	;  Command interpreter for Simple Servo Controller 16 Packet Serial
00015 0800 	;
00016 0800 	; History
00017 0800 	; 1.0.0  4/1/2021	Copied from SerialServo
00018 0800 	;=========================================================================================
00019 0800 	;
00020 0800 0081 	kCmd_SetMode	EQU	0x81	;+1 data (SysMode), return ACK
00021 0800 0001 	kCmd_GetMode	EQU	0x01
00022 0800 0082 	kCmd_SetCmdPos	EQU	0x82	;+3 data (ServoNum,CMDSigTime), return ACK
00023 0800 0002 	kCmd_GetCmdPos	EQU	0x02
00024 0800 0083 	kCmd_SetAccel	EQU	0x83	;+2 data (ServoNum,ServoAccelValue), return ACK
00025 0800 0003 	kCmd_GetAccel	EQU	0x03
00026 0800 0084 	kCmd_SetServoEnable	EQU	0x84	;+2 data (ServoNum, Enable), return ACK
00027 0800 0004 	kCmd_GetServoEnable	EQU	0x04
00028 0800 0085 	kCmd_SetMaxSpeed	EQU	0x85	;+2 data (ServoNum,ServoMaxSpeed), return ACK
00029 0800 0005 	kCmd_GetMaxSpeed	EQU	0x05
00030 0800 0086 	kCmd_SetMin_uS	EQU	0x86	;+3 data (ServoNum,MinTime), return ACK
00031 0800 0006 	kCmd_GetMin_uS	EQU	0x06
00032 0800 0087 	kCmd_SetMax_uS	EQU	0x87	;+3 data (ServoNum,MaxTime), return ACK
SimpleServo16PS.asm                                                   Page: 28
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00033 0800 0007 	kCmd_GetMax_uS	EQU	0x07
00034 0800 	;
00035 0800 	;
00036 0800 0091 	kCmd_GetCurSpeed	EQU	0x91	;+1 Data (ServoNum) return ServoCurSpeed
00037 0800 0092 	kCmd_GetCurPos	EQU	0x92	;+1 Data (ServoNum) Return SigOutTime
00038 0800 	;
00039 0800 0094 	kCmd_SaveParams	EQU	0x94	;Save all eeprom params, return ACK
00040 0800 0095 	kCmd_RestoreParams	EQU	0x95	;Copy to ram, return ACK
00041 0800 	;
00042 0800 0098 	kCmd_GetStatus	EQU	0x98	;return ssStatus
00043 0800 0099 	kCmd_ReBoot	EQU	0x99	;ReBoot the controller
00044 0800 009A 	kCmd_RunBootloader	EQU	0x9A	;Set EEPROM (0xFF) = 0xFF and reboot
00045 0800 	;
00046 0800 	; these commands save params and return a 0,0,0,0 packet with the new address
00047 0800 00A1 	kCmd_SetMasterAddr	EQU	0xA1	;+1 data, return a zero packet
00048 0800 00A2 	kCmd_SetSlaveAddr	EQU	0xA2	;+1 data, return a zero packet
00049 0800 	;
00050 0800 	;Special packet (0xDD, 0xDD, 0x01, 0x02, 0xAA, 0x00, 0x00, 0x00, checksum)
00051 0800 00AA 	kCmd_SendIDString	EQU	0xAA	; returns "DMFE SSC16PS\n"
00052 0800 	;
00053 0800 	;=========================================================================================
00054 0800 	;
00055 0800 	RS232_Send_S0	mLongCall	RS232_Send
00055 0800 3181      M		movlp	RS232_Send	                       movlp                  Destination
00055 0801 21A4      M		call	RS232_Send	                       call                   Destination
00055 0802 3188      M		movlp	$	                       movlp                  $
00056 0803 0008 		return
00057 0804 	;
00058 0804 	;=========================================================================================
00059 0804 	; Entry: RXDataIsNew=1, data in RX_Data
00060 0804 	;
00061 0804 0021 	HandleRXData	movlb	RX_Flags	;bank 1
00062 0805 10A1 		bcf	RXDataIsNew
00063 0806 1821 		btfsc	RXDataValidFlag	;from master to me?
00064 0807 3202 		bra	HandleRXData_1
00065 0808 0020 	HandleRXData_Rtn	movlb	0	;bank 0
00066 0809 0008 		return		; no, ignore this packet
00067 080A 	;
00068 080A 0020 	HandleRXData_1	movlb	0	;bank 0
00069 080B 	                       mMOVLF	RX_Data,FSR1
00069 080B 30AA      M		movlw	low RX_Data	                       movlw                  low ADDRESS
00069 080C 0086      M		movwf	FSR1	                       movwf                  DEST
00069 080D 3000      M		movlw	high RX_Data	                       movlw                  high ADDRESS
00069 080E 0087      M		movwf	FSR1+1	                       movwf                  DEST+1
00070 080F 		mMOVLF	TX_Data,FSR0
00070 080F 30AE      M		movlw	low TX_Data	                       movlw                  low ADDRESS
00070 0810 0084      M		movwf	FSR0	                       movwf                  DEST
00070 0811 3000      M		movlw	high TX_Data	                       movlw                  high ADDRESS
00070 0812 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
00071 0813 	;Dispatcher
00072 0813 	;
00073 0813 0016 		moviw	FSR1++	;get Command
00074 0814 00F8 		movwf	Param78	;aka RX_Data(0)
00075 0815 39F0 		andlw                  0xF0
00076 0816 		SKPZ
00076 0816 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00077 0817 3213 		bra                    Dispatcher_1
00078 0818 0878 		movf                   Param78,W
00079 0819 390F 		andlw                  0x0F
00080 081A 	;Jump table for 0x00 to 0x0F
00081 081A 000B 	                       brw
00082 081B 0008 	                       return                                        ;0x00 not used
00083 081C 3267 	                       bra                    Cmd_GetMode
00084 081D 327C 	                       bra                    Cmd_GetCmdPos
00085 081E 28B7 	                       goto                   Cmd_GetAccel
00086 081F 28DB 	                       goto                   Cmd_GetServoEnable
00087 0820 28F8 	                       goto                   Cmd_GetMaxSpeed
00088 0821 2911 	                       goto                   Cmd_GetMin_uS
00089 0822 292B 	                       goto                   Cmd_GetMax_uS
00090 0823 0008 	                       return
00091 0824 0008 	                       return		       ;9
00092 0825 0008 	                       return
00093 0826 0008 	                       return
00094 0827 0008 	                       return
00095 0828 0008 	                       return
00096 0829 0008 	                       return
00097 082A 0008 	                       return
00098 082B 	;
00099 082B 3C80 	Dispatcher_1           sublw                  0x80
00100 082C 	                       SKPZ
00100 082C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00101 082D 3213 	                       bra                    Dispatcher_2
00102 082E 0878 	                       movf                   Param78,W
00103 082F 390F 		andlw                  0x0F
00104 0830 	;Jump table for 0x80 to 0x8F
00105 0830 000B 	                       brw
00106 0831 0008 	                       return                                        ;0x80 not used
00107 0832 324A 	                       bra                    Cmd_SetMode
00108 0833 3253 	                       bra                    Cmd_SetCmdPos
00109 0834 28A9 	                       goto                   Cmd_SetAccel
00110 0835 28C3 	                       goto                   Cmd_SetServoEnable
00111 0836 28EC 	                       goto                   Cmd_SetMaxSpeed
00112 0837 2902 	                       goto                   Cmd_SetMin_uS
00113 0838 291C 	                       goto                   Cmd_SetMax_uS
00114 0839 0008 	                       return
00115 083A 0008 	                       return
00116 083B 0008 	                       return
00117 083C 0008 	                       return
00118 083D 0008 	                       return
SimpleServo16PS.asm                                                   Page: 29
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00119 083E 0008 	                       return
00120 083F 0008 	                       return
00121 0840 0008 	                       return
00122 0841 	;
00123 0841 	;Jump table for 0x20 to 0x27
00124 0841 0878 	Dispatcher_2           movf                   Param78,W
00125 0842 39F0 	                       andlw                  0xF0
00126 0843 3C20 	                       sublw                  0x20
00127 0844 	                       SKPZ
00127 0844 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00128 0845 3201 	                       bra                    Dispatcher_3
00129 0846 0008 	                       return                                        ; Yes, oops
00130 0847 	;
00131 0847 0878 	Dispatcher_3           movf                   Param78,W
00132 0848 39F0 	                       andlw                  0xF0
00133 0849 3CB0 	                       sublw                  0xB0
00134 084A 	                       SKPZ
00134 084A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00135 084B 3201 	                       bra                    Dispatcher_4
00136 084C 0008 	                       return                                        ; Yes, oops
00137 084D 	;
00138 084D 	;Jump table for 0x90 to 0x9F
00139 084D 0878 	Dispatcher_4           movf                   Param78,W
00140 084E 39F0 	                       andlw                  0xF0
00141 084F 3C90 	                       sublw                  0x90
00142 0850 	                       SKPZ
00142 0850 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00143 0851 3213 	                       bra                    Dispatcher_5
00144 0852 300F 	                       movlw                  0x0F
00145 0853 0578 	                       andwf                  Param78,W
00146 0854 000B 	                       brw
00147 0855 0008 	                       return                                        ;0x90 not used
00148 0856 2936 	                       goto                   Cmd_GetCurSpeed
00149 0857 2940 	                       goto                   Cmd_GetCurPos
00150 0858 0008 	                       return
00151 0859 294B 	                       goto                   Cmd_SaveParams
00152 085A 294F 	                       goto                   Cmd_RestoreParams
00153 085B 0008 	                       return
00154 085C 0008 	                       return                 
00155 085D 2953 	                       goto                   Cmd_GetStatus
00156 085E 0001 	                       reset                                         ;Cmd_ReBoot
00157 085F 295E 	                       goto                   Cmd_RunBootloader
00158 0860 0008 	                       return
00159 0861 0008 	                       return
00160 0862 0008 	                       return
00161 0863 0008 	                       return
00162 0864 0008 	                       return
00163 0865 	;
00164 0865 	;Jump table for 0xA0 to 0xAF
00165 0865 0878 	Dispatcher_5           movf                   Param78,W
00166 0866 39F0 	                       andlw                  0xF0
00167 0867 3CA0 	                       sublw                  0xA0
00168 0868 	                       SKPZ
00168 0868 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00169 0869 3203 	                       bra                    Dispatcher_6
00170 086A 300F 	                       movlw                  0x0F
00171 086B 0578 	                       andwf                  Param78,W
00172 086C 000B 	                       brw
00173 086D 0008 	Dispatcher_6           return                                        ;0xA0 not used
00174 086E 2964 	                       goto                   Cmd_SetMasterAddr
00175 086F 296A 	                       goto                   Cmd_SetSlaveAddr
00176 0870 0008 	                       return
00177 0871 0008 	                       return
00178 0872 0008 	                       return
00179 0873 0008 	                       return
00180 0874 0008 	                       return
00181 0875 0008 	                       return
00182 0876 0008 	                       return
00183 0877 2970 	                       goto                   Cmd_SendIDString       ;0xAA
00184 0878 0008 	                       return
00185 0879 0008 	                       return
00186 087A 0008 	                       return
00187 087B 0008 	                       return
00188 087C 0008 	                       return
00189 087D 	;
00190 087D 	;---kCmd_SetMode----------------
00191 087D 	; Set Mode
00192 087D 3001 	Cmd_SetMode	movlw	kMaxMode+1
00193 087E 0201 		subwf	INDF1,W
00194 087F 		SKPB		;kMaxMode+1>Data
00194 087F 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00195 0880 3387 		bra	HandleRXData_Rtn
00196 0881 	;
00197 0881 0016 		moviw	FSR1++
00198 0882 00B7 		movwf	SysMode
00199 0883 298F 		goto	TX_ACK
00200 0884 	;
00201 0884 	;---kCmd_GetMode------------------
00202 0884 0837 	Cmd_GetMode	movf	SysMode,W
00203 0885 001A 		movwi	FSR0++
00204 0886 2800 		goto	RS232_Send_S0
00205 0887 	;
00206 0887 	;---kCmd_SetCmdPos-------------------
00207 0887 	; Set Command Position
00208 0887 0016 	Cmd_SetCmdPos	moviw	FSR1++
00209 0888 390F 		andlw	0x0F	;0 .. 15 only
00210 0889 00F8 		movwf	Param78	;Servo Number
00211 088A 35F8 		lslf	Param78,F	;x2
00212 088B 0016 		moviw	FSR1++
SimpleServo16PS.asm                                                   Page: 30
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00213 088C 00F9 		movwf	Param79
00214 088D 0016 		moviw	FSR1++
00215 088E 00FA 		movwf	Param7A
00216 088F 		LOADFSR1	CMDSigTime,Param78
00216 088F 3020      M		movlw	low CMDSigTime		movlw 	low ADDRESS 	; load address
00216 0890 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00216 0891 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00216 0892 0187      M		clrf	FSR1H		clrf	FSR1H
00216 0893 3021      M		movlw	high CMDSigTime		movlw	high ADDRESS
00216 0894 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00217 0895 0879 	Cmd_SetWord7879	movf	Param79,W
00218 0896 001E 		movwi	FSR1++
00219 0897 087A 		movf	Param7A,W
00220 0898 001E 		movwi	FSR1++
00221 0899 298F 		goto	TX_ACK
00222 089A 	;
00223 089A 	;---kCmd_GetCmdPos------------------
00224 089A 	; Get Command Position
00225 089A 0016 	Cmd_GetCmdPos	moviw	FSR1++
00226 089B 390F 		andlw	0x0F	;0 .. 15 only
00227 089C 00F8 		movwf	Param78	;Servo Number
00228 089D 35F8 		lslf	Param78,F	;x2
00229 089E 		LOADFSR1	CMDSigTime,Param78
00229 089E 3020      M		movlw	low CMDSigTime		movlw 	low ADDRESS 	; load address
00229 089F 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00229 08A0 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00229 08A1 0187      M		clrf	FSR1H		clrf	FSR1H
00229 08A2 3021      M		movlw	high CMDSigTime		movlw	high ADDRESS
00229 08A3 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00230 08A4 0016 	Cmd_GetWord	moviw	FSR1++
00231 08A5 001A 		movwi	FSR0++
00232 08A6 0016 		moviw	FSR1++
00233 08A7 001A 		movwi	FSR0++
00234 08A8 2800 		goto	RS232_Send_S0
00235 08A9 	;
00236 08A9 	;---kCmd_SetAccel-------------------
00237 08A9 	; Set Acceleration
00238 08A9 0016 	Cmd_SetAccel	moviw	FSR1++
00239 08AA 390F 		andlw	0x0F	;0 .. 15 only
00240 08AB 00F8 		movwf	Param78	;Servo Number
00241 08AC 0016 		moviw	FSR1++
00242 08AD 00F9 		movwf	Param79
00243 08AE 		LOADFSR1	ServoAccelValue,Param78
00243 08AE 3000      M		movlw	low ServoAccelValue		movlw 	low ADDRESS 	; load address
00243 08AF 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00243 08B0 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00243 08B1 0187      M		clrf	FSR1H		clrf	FSR1H
00243 08B2 3021      M		movlw	high ServoAccelValue		movlw	high ADDRESS
00243 08B3 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00244 08B4 0879 	Cmd_SetByte79	movf	Param79,W
00245 08B5 001E 		movwi	FSR1++
00246 08B6 298F 		goto	TX_ACK
00247 08B7 	;
00248 08B7 	;---kCmd_GetAccel------------------
00249 08B7 	; Get Command Position
00250 08B7 0016 	Cmd_GetAccel	moviw	FSR1++
00251 08B8 390F 		andlw	0x0F	;0 .. 15 only
00252 08B9 00F8 		movwf	Param78	;Servo Number
00253 08BA 		LOADFSR1	ServoAccelValue,Param78
00253 08BA 3000      M		movlw	low ServoAccelValue		movlw 	low ADDRESS 	; load address
00253 08BB 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00253 08BC 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00253 08BD 0187      M		clrf	FSR1H		clrf	FSR1H
00253 08BE 3021      M		movlw	high ServoAccelValue		movlw	high ADDRESS
00253 08BF 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00254 08C0 0016 	Cmd_GetByte	moviw	FSR1++
00255 08C1 001A 		movwi	FSR0++
00256 08C2 2800 		goto	RS232_Send_S0
00257 08C3 	;
00258 08C3 	;---kCmd_SetServoEnable--------------
00259 08C3 0016 	Cmd_SetServoEnable	moviw	FSR1++
00260 08C4 390F 		andlw	0x0F	;0 .. 15 only
00261 08C5 00F8 		movwf	Param78	;Servo Number
00262 08C6 0016 		moviw	FSR1++
00263 08C7 00F9 		movwf	Param79
00264 08C8 0878 		movf	Param78,W
00265 08C9 3907 		andlw	0x07	;2 servos per ServoFlags byte
00266 08CA 		LOADFSR1W	ServoFlags
00266 08CA 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00266 08CB 0086      M		movwf	FSR1L		movwf 	FSR1L
00266 08CC 0187      M		clrf	FSR1H		clrf	FSR1H
00266 08CD 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00266 08CE 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00267 08CF 1C79 		btfss	Param79,0	;boolean value, Enable?
00268 08D0 3205 		bra	Cmd_SetServoEnable_1	; No, disable
00269 08D1 1DF8 		BTFSS	Param78,3
00270 08D2 1501 		BSF	INDF1,ServoOnBit0_7	;enable servo
00271 08D3 19F8 		BTFSC	Param78,3
00272 08D4 1701 		BSF	INDF1,ServoOnBit8_15	;enable servo
00273 08D5 298F 		goto	TX_ACK
00274 08D6 	;
00275 08D6 1DF8 	Cmd_SetServoEnable_1	BTFSS	Param78,3
00276 08D7 1101 		BCF	INDF1,ServoOnBit0_7	;disable servo
00277 08D8 19F8 		BTFSC	Param78,3
00278 08D9 1301 		BCF	INDF1,ServoOnBit8_15	;disable servo
00279 08DA 298F 		goto	TX_ACK
00280 08DB 	;
00281 08DB 	;---kCmd_GetServoEnable--------------
00282 08DB 0016 	Cmd_GetServoEnable	moviw	FSR1++
SimpleServo16PS.asm                                                   Page: 31
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00283 08DC 390F 		andlw	0x0F	;0 .. 15 only
00284 08DD 00F8 		movwf	Param78	;Servo Number
00285 08DE 3907 		andlw	0x07	;2 servos per ServoFlags byte
00286 08DF 		LOADFSR1W	ServoFlags
00286 08DF 3E80      M		addlw	low ServoFlags		addlw 	low ADDRESS
00286 08E0 0086      M		movwf	FSR1L		movwf 	FSR1L
00286 08E1 0187      M		clrf	FSR1H		clrf	FSR1H
00286 08E2 3021      M		movlw	high ServoFlags		movlw	high ADDRESS
00286 08E3 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F	;<< needed to work w/ contig ram
00287 08E4 19F8 		BTFSC	Param78,3
00288 08E5 3203 		bra	Cmd_GetServoEnable_1
00289 08E6 1901 		btfsc	INDF1,ServoOnBit0_7	;Is enabled?
00290 08E7 1400 		bsf	INDF0,0	; Yes
00291 08E8 2800 		goto	RS232_Send_S0
00292 08E9 	;
00293 08E9 1B01 	Cmd_GetServoEnable_1	btfsc	INDF1,ServoOnBit8_15	;Is enabled?
00294 08EA 1400 		bsf	INDF0,0	; Yes
00295 08EB 2800 		goto	RS232_Send_S0
00296 08EC 	;
00297 08EC 	;---kCmd_SetMaxSpeed-----------------
00298 08EC 0016 	Cmd_SetMaxSpeed	moviw	FSR1++
00299 08ED 390F 		andlw	0x0F	;0 .. 15 only
00300 08EE 00F8 		movwf	Param78	;Servo Number
00301 08EF 0016 		moviw	FSR1++
00302 08F0 00F9 		movwf	Param79
00303 08F1 		LOADFSR1	ServoMaxSpeed,Param78
00303 08F1 30F0      M		movlw	low ServoMaxSpeed		movlw 	low ADDRESS 	; load address
00303 08F2 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00303 08F3 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00303 08F4 0187      M		clrf	FSR1H		clrf	FSR1H
00303 08F5 3020      M		movlw	high ServoMaxSpeed		movlw	high ADDRESS
00303 08F6 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00304 08F7 28B4 		goto	Cmd_SetByte79
00305 08F8 	;
00306 08F8 	;---kCmd_GetMaxSpeed-----------------
00307 08F8 0016 	Cmd_GetMaxSpeed	moviw	FSR1++
00308 08F9 390F 		andlw	0x0F	;0 .. 15 only
00309 08FA 00F8 		movwf	Param78	;Servo Number
00310 08FB 		LOADFSR1	ServoMaxSpeed,Param78
00310 08FB 30F0      M		movlw	low ServoMaxSpeed		movlw 	low ADDRESS 	; load address
00310 08FC 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00310 08FD 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00310 08FE 0187      M		clrf	FSR1H		clrf	FSR1H
00310 08FF 3020      M		movlw	high ServoMaxSpeed		movlw	high ADDRESS
00310 0900 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00311 0901 28C0 		goto	Cmd_GetByte
00312 0902 	;
00313 0902 	;---kCmd_SetMin_uS-------------------
00314 0902 	; Set ServoMin_uS
00315 0902 0016 	Cmd_SetMin_uS	moviw	FSR1++
00316 0903 390F 		andlw	0x0F	;0 .. 15 only
00317 0904 00F8 		movwf	Param78	;Servo Number
00318 0905 35F8 		lslf	Param78,F	;x2
00319 0906 0016 		moviw	FSR1++
00320 0907 00F9 		movwf	Param79
00321 0908 0016 		moviw	FSR1++
00322 0909 00FA 		movwf	Param7A
00323 090A 		LOADFSR1	MinTime,Param78
00323 090A 3040      M		movlw	low MinTime		movlw 	low ADDRESS 	; load address
00323 090B 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00323 090C 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00323 090D 0187      M		clrf	FSR1H		clrf	FSR1H
00323 090E 3021      M		movlw	high MinTime		movlw	high ADDRESS
00323 090F 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00324 0910 2895 		goto	Cmd_SetWord7879
00325 0911 	;
00326 0911 	;---kCmd_GetMin_uS----------------
00327 0911 	; Get ServoMin_uS
00328 0911 0016 	Cmd_GetMin_uS	moviw	FSR1++
00329 0912 390F 		andlw	0x0F	;0 .. 15 only
00330 0913 00F8 		movwf	Param78	;Servo Number
00331 0914 35F8 		lslf	Param78,F	;x2
00332 0915 		LOADFSR1	MinTime,Param78
00332 0915 3040      M		movlw	low MinTime		movlw 	low ADDRESS 	; load address
00332 0916 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00332 0917 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00332 0918 0187      M		clrf	FSR1H		clrf	FSR1H
00332 0919 3021      M		movlw	high MinTime		movlw	high ADDRESS
00332 091A 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00333 091B 28A4 		goto	Cmd_GetWord
00334 091C 	;
00335 091C 	;---kCmd_SetMax_uS-------------------
00336 091C 	; Set ServoMax_uS
00337 091C 0016 	Cmd_SetMax_uS	moviw	FSR1++
00338 091D 390F 		andlw	0x0F	;0 .. 15 only
00339 091E 00F8 		movwf	Param78	;Servo Number
00340 091F 35F8 		lslf	Param78,F	;x2
00341 0920 0016 		moviw	FSR1++
00342 0921 00F9 		movwf	Param79
00343 0922 0016 		moviw	FSR1++
00344 0923 00FA 		movwf	Param7A
00345 0924 		LOADFSR1	MaxTime,Param78
00345 0924 3060      M		movlw	low MaxTime		movlw 	low ADDRESS 	; load address
00345 0925 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00345 0926 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00345 0927 0187      M		clrf	FSR1H		clrf	FSR1H
00345 0928 3021      M		movlw	high MaxTime		movlw	high ADDRESS
00345 0929 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00346 092A 2895 		goto	Cmd_SetWord7879
SimpleServo16PS.asm                                                   Page: 32
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00347 092B 	;
00348 092B 	;---kCmd_GetMax_uS-----------------
00349 092B 	; Get ServoMax_uS
00350 092B 0016 	Cmd_GetMax_uS	moviw	FSR1++
00351 092C 390F 		andlw	0x0F	;0 .. 15 only
00352 092D 00F8 		movwf	Param78	;Servo Number
00353 092E 35F8 		lslf	Param78,F	;x2
00354 092F 		LOADFSR1	MaxTime,Param78
00354 092F 3060      M		movlw	low MaxTime		movlw 	low ADDRESS 	; load address
00354 0930 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00354 0931 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00354 0932 0187      M		clrf	FSR1H		clrf	FSR1H
00354 0933 3021      M		movlw	high MaxTime		movlw	high ADDRESS
00354 0934 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00355 0935 28A4 		goto	Cmd_GetWord
00356 0936 	;
00357 0936 	;---kCmd_GetCurSpeed----------------	+1 Data (ServoNum) return ServoCurSpeed
00358 0936 0016 	Cmd_GetCurSpeed	moviw	FSR1++
00359 0937 390F 		andlw	0x0F	;0 .. 15 only
00360 0938 00F8 		movwf	Param78	;Servo Number
00361 0939 		LOADFSR1	ServoCurSpeed,Param78
00361 0939 3010      M		movlw	low ServoCurSpeed		movlw 	low ADDRESS 	; load address
00361 093A 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00361 093B 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00361 093C 0187      M		clrf	FSR1H		clrf	FSR1H
00361 093D 3021      M		movlw	high ServoCurSpeed		movlw	high ADDRESS
00361 093E 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00362 093F 28C0 		goto	Cmd_GetByte
00363 0940 	;
00364 0940 	;---kCmd_GetCurPos------------------	+1 Data (ServoNum) Return SigOutTime
00365 0940 0016 	Cmd_GetCurPos	moviw	FSR1++
00366 0941 390F 		andlw	0x0F	;0 .. 15 only
00367 0942 00F8 		movwf	Param78	;Servo Number
00368 0943 35F8 		lslf	Param78,F	;x2
00369 0944 		LOADFSR1	SigOutTime,Param78
00369 0944 3090      M		movlw	low SigOutTime		movlw 	low ADDRESS 	; load address
00369 0945 0778      M		addwf	Param78,W		addwf	INDEX,W	; add the index value to determine location in array
00369 0946 0086      M		movwf	FSR1L		movwf 	FSR1L	; load FSR1L with pointer info
00369 0947 0187      M		clrf	FSR1H		clrf	FSR1H
00369 0948 3021      M		movlw	high SigOutTime		movlw	high ADDRESS
00369 0949 3D87      M		addwfc	FSR1H,F		addwfc	FSR1H,F
00370 094A 28A4 		goto	Cmd_GetWord
00371 094B 	;
00372 094B 	;---kCmd_SaveParams-----------------
00373 094B 	Cmd_SaveParams	mLongCall	SaveParams
00373 094B 3180      M		movlp	SaveParams	                       movlp                  Destination
00373 094C 2059      M		call	SaveParams	                       call                   Destination
00373 094D 3189      M		movlp	$	                       movlp                  $
00374 094E 298F 		goto	TX_ACK
00375 094F 	;
00376 094F 	;---kCmd_RestoreParams--------------
00377 094F 	Cmd_RestoreParams	mLongCall	CopyToRam
00377 094F 3180      M		movlp	CopyToRam	                       movlp                  Destination
00377 0950 204C      M		call	CopyToRam	                       call                   Destination
00377 0951 3189      M		movlp	$	                       movlp                  $
00378 0952 298F 		goto	TX_ACK
00379 0953 	;
00380 0953 	;
00381 0953 	;---kCmd_GetStatus----------------
00382 0953 0831 	Cmd_GetStatus	movf	ssStatus,W
00383 0954 001A 		movwi	FSR0++
00384 0955 0832 		movf	ssStatus+1,W
00385 0956 001A 		movwi	FSR0++
00386 0957 0833 		movf	ssStatus+2,W
00387 0958 001A 		movwi	FSR0++
00388 0959 0834 		movf	ssStatus+3,W
00389 095A 001A 		movwi	FSR0++
00390 095B 	;reset flags
00391 095B 11B1 		bcf	ssRX_Timeout
00392 095C 	;
00393 095C 01B2 		clrf	ssStatus+1
00394 095D 	;	
00395 095D 2800 		goto	RS232_Send_S0
00396 095E 	;
00397 095E 	;---kCmd_RunBootloader--------------
00398 095E 30FF 	Cmd_RunBootloader	movlw	0xFF
00399 095F 00A5 		movwf	EEDataTemp
00400 0960 		mLongCall	EEWriteW	;Write EEPROM address in W
00400 0960 3180      M		movlp	EEWriteW	                       movlp                  Destination
00400 0961 20A0      M		call	EEWriteW	                       call                   Destination
00400 0962 3189      M		movlp	$	                       movlp                  $
00401 0963 0001 		reset
00402 0964 	;
00403 0964 	;---kCmd_SetMasterAddr------------
00404 0964 0016 	Cmd_SetMasterAddr	moviw	FSR1++
00405 0965 00B8 		movwf	RS232_MasterAddr
00406 0966 		mLongCall	SaveParams
00406 0966 3180      M		movlp	SaveParams	                       movlp                  Destination
00406 0967 2059      M		call	SaveParams	                       call                   Destination
00406 0968 3189      M		movlp	$	                       movlp                  $
00407 0969 2800 		goto	RS232_Send_S0
00408 096A 	;
00409 096A 	;---kCmd_SetSlaveAddr-------------
00410 096A 0016 	Cmd_SetSlaveAddr	moviw	FSR1++
00411 096B 00B9 		movwf	RS232_SlaveAddr
00412 096C 		mLongCall	SaveParams
00412 096C 3180      M		movlp	SaveParams	                       movlp                  Destination
00412 096D 2059      M		call	SaveParams	                       call                   Destination
00412 096E 3189      M		movlp	$	                       movlp                  $
SimpleServo16PS.asm                                                   Page: 33
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00413 096F 2800 		goto	RS232_Send_S0
00414 0970 	;
00415 0970 	;---kCmd_SendIDString------------
00416 0970 01F9 	Cmd_SendIDString	clrf	Param79
00417 0971 0879 	Cmd_SendIDString_L1	movf	Param79,W
00418 0972 2179 		call	IDString
00419 0973 3800 		iorlw	0x00
00420 0974 		SKPNZ
00420 0974 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00421 0975 0008 		return
00422 0976 2190 		call	StoreSerOut_S0
00423 0977 0AF9 		incf	Param79,F
00424 0978 33F8 		bra	Cmd_SendIDString_L1
00425 0979 	;
00426 0979 000B 	IDString	brw
00427 097A 3444 		retlw	'D'
00428 097B 344D 		retlw	'M'
00429 097C 3446 		retlw	'F'
00430 097D 3445 		retlw	'E'
00431 097E 3420 		retlw	' '
00432 097F 3453 		retlw	'S'
00433 0980 3453 		retlw	'S'
00434 0981 3443 		retlw	'C'
00435 0982 3431 		retlw	'1'
00436 0983 3436 		retlw	'6'
00437 0984 3450 		retlw	'P'
00438 0985 3453 		retlw	'S'
00439 0986 3420 		retlw	' '
00440 0987 3476 		retlw	'v'
00441 0988 3431 		retlw	'1'
00442 0989 342E 		retlw	'.'
00443 098A 3430 		retlw	'0'
00444 098B 3420 		retlw	' '
00445 098C 340A 		retlw	'\n'
00446 098D 3400 		retlw	0x00
00447 098E 	;
00448 098E 	;--------------------------------
00449 098E 0008 		return
00450 098F 	;
00451 098F 30FF 	TX_ACK	movlw	0xFF
00452 0990 	StoreSerOut_S0	mLongCall	StoreSerOut
00452 0990 3181      M		movlp	StoreSerOut	                       movlp                  Destination
00452 0991 2100      M		call	StoreSerOut	                       call                   Destination
00452 0992 3189      M		movlp	$	                       movlp                  $
00453 0993 0008 		return
00454 0994 	;
00455 0994 	;=========================================================================================
00456 0994 	;=========================================================================================
00531 0994 		include <ssInit.inc>
00001 0994 	;=========================================================================================
00002 0994 	; call once
00003 0994 	;=========================================================================================
00004 0994 	;
00005 0994 0021 	InitializeIO	MOVLB	0x01	; select bank 1
00006 0995 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00007 0996 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00008 0997 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00009 0998 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00010 0999 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00011 099A 1515 		bsf	OPTION_REG,PS2
00012 099B 	;
00013 099B 0021 		MOVLB	0x01	; bank 1
00014 099C 30F0 		MOVLW	OSCCON_Value
00015 099D 0099 		MOVWF	OSCCON
00016 099E 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00017 099F 0097 		movwf	WDTCON
00018 09A0 	;
00019 09A0 0024 		movlb	4	; bank 4
00020 09A1 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00021 09A2 	;
00022 09A2 0023 		MOVLB	ANSELA	; bank 3
00023 09A3 3000 		movlw	ANSELA_Val
00024 09A4 008C 		movwf	ANSELA
00025 09A5 3000 		movlw	ANSELB_Val
00026 09A6 008D 		movwf	ANSELB
00027 09A7 	;
00028 09A7 	;Setup T2 for 100/s
00029 09A7 0020 		movlb	0	; bank 0
00030 09A8 304F 		MOVLW	T2CON_Value
00031 09A9 009C 		MOVWF	T2CON
00032 09AA 307D 		MOVLW	PR2_Value
00033 09AB 009B 		MOVWF	PR2
00034 09AC 0021 		movlb	1	; bank 1
00035 09AD 1491 		bsf	PIE1,TMR2IE	; enable Timer 2 interupt
00036 09AE 	;
00037 09AE 	; setup timer 1 for 0.5uS/count
00038 09AE 	;
00039 09AE 0020 		MOVLB	0x00	; bank 0
00040 09AF 3001 		MOVLW	T1CON_Val
00041 09B0 0098 		MOVWF	T1CON
00042 09B1 1399 		bcf	T1GCON,TMR1GE	;always count
00043 09B2 	;	
00044 09B2 	; clear memory to zero
00045 09B2 		mLongCall	ClearRam
00045 09B2 3180      M		movlp	ClearRam	                       movlp                  Destination
00045 09B3 202D      M		call	ClearRam	                       call                   Destination
00045 09B4 3189      M		movlp	$	                       movlp                  $
00046 09B5 0064 		CLRWDT
00047 09B6 		mLongCall	CopyToRam
SimpleServo16PS.asm                                                   Page: 34
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00047 09B6 3180      M		movlp	CopyToRam	                       movlp                  Destination
00047 09B7 204C      M		call	CopyToRam	                       call                   Destination
00047 09B8 3189      M		movlp	$	                       movlp                  $
00048 09B9 	;
00049 09B9 	; setup ccp1
00050 09B9 	;
00051 09B9 0025  a		MOVLB	CCP1CON	;banksel
00050 09BA 		BANKSEL	CCP1CON	;Bank 5
00052 09BA 0193 		CLRF	CCP1CON
00053 09BB 	;
00054 09BB 0021 		MOVLB	0x01	;Bank 1
00055 09BC 1511 		bsf	PIE1,CCP1IE
00056 09BD 	;
00057 09BD 	; Setup CCP1 & CCP2
00058 09BD 0022 		MOVLB	0x02	; bank 2
00059 09BE 159D 		BSF	APFCON0,CCP2SEL
00060 09BF 	;
00061 09BF 0020 		MOVLB	0x00	;Bank 0
00062 09C0 	; setup data ports
00063 09C0 3004 		movlw	PortBValue
00064 09C1 008D 		movwf	PORTB	;init port B
00065 09C2 3018 		movlw	PortAValue
00066 09C3 008C 		movwf	PORTA
00067 09C4 0021 		MOVLB	0x01	; bank 1
00068 09C5 3060 		movlw	PortADDRBits
00069 09C6 008C 		movwf	TRISA
00070 09C7 30F7 		movlw	PortBDDRBits	;setup for programer
00071 09C8 008D 		movwf	TRISB
00072 09C9 	;
00073 09C9 		if useRS232
00074 09C9 	; setup serial I/O
00075 09C9 0023  a		MOVLB	BAUDCON	;banksel
00074 09CA 		BANKSEL	BAUDCON	; bank 3
00076 09CA 3008 		movlw	BAUDCON_Value
00077 09CB 009F 		movwf	BAUDCON
00078 09CC 30CF 		MOVLW	low BaudRate
00079 09CD 009B 		MOVWF	SPBRGL
00080 09CE 3000 		MOVLW	high BaudRate
00081 09CF 009C 		MOVWF	SPBRGH
00082 09D0 3024 		MOVLW	TXSTA_Value
00083 09D1 009E 		MOVWF	TXSTA
00084 09D2 3090 		MOVLW	RCSTA_Value
00085 09D3 009D 		MOVWF	RCSTA
00086 09D4 0021 		movlb	0x01	; bank 1
00087 09D5 1691 		BSF	PIE1,RCIE	; Serial Receive interupt
00088 09D6 0020 		movlb	0x00	; bank 0
00089 09D7 	;
00090 09D7 		endif
00091 09D7 	;
00092 09D7 0064 		CLRWDT
00093 09D8 	;-----------------------
00094 09D8 	;
00095 09D8 0020 		MOVLB	0x00
00096 09D9 3064 		MOVLW	LEDTIME
00097 09DA 00A0 		MOVWF	SysLED_Time
00098 09DB 3001 		movlw	0x01
00099 09DC 00A3 		movwf	SysLED_Count	;start blinking right away
00100 09DD 3064 		movlw	.100
00101 09DE 00AC 		movwf	Timer4Lo	;ignor buttons for 1st second
00102 09DF 	;
00103 09DF 	;
00104 09DF 	;
00105 09DF 0064 		CLRWDT
00106 09E0 	;
00107 09E0 170B 		bsf	INTCON,PEIE	; enable periferal interupts
00108 09E1 178B 		bsf	INTCON,GIE	; enable interupts
00109 09E2 	;
00110 09E2 0008 		return
00111 09E3 	;=============================================================
00112 09E3 	;=============================================================
00532 09E3 	;
00533 09E3 		org BootLoaderStart
00534 1E00 		include <BootLoader1847.inc>
00001 1E00 	;************************************************
00002 1E00 	; BootLoader for PIC16F1847
00003 1E00 	; filename: Bootloader1847.inc
00004 1E00 	; Created: 3/21/2019
00005 1E00 	; Revision: 1.0a2 3/26/2020
00006 1E00 	;************************************************
00007 1E00 	; History
00008 1E00 	; 1.0a2 3/26/2020      Bug Fixes.
00009 1E00 	; 1.0a1 4/7/2019	First working version.
00010 1E00 	; 1.0d1 3/21/2019	first code
00011 1E00 	;************************************************
00012 1E00 	; Notes:
00013 1E00 	;
00014 1E00 	; WDT is not suported.
00015 1E00 	;
00016 1E00 	;  Does not program data EEProm, or other than prog mem 0..BootLoaderStart-1
00017 1E00 	;
00018 1E00 	; Must be the last thing in prog mem, will not overwrite itself or anything after it.
00019 1E00 	;
00020 1E00 	;BootLoaderStart	EQU	0x1E00
00021 1E00 	;	org BootLoaderStart
00022 1E00 	;	include <Bootloader1847.inc>
00023 1E00 	;
00024 1E00 	;  Reset vector:
00025 1E00 	;  	movlp	high BootLoaderStart
00026 1E00 	;    	goto	BootLoaderStart
SimpleServo16PS.asm                                                   Page: 35
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00027 1E00 	;  ProgStartVector	CLRF	PCLATH
00028 1E00 	;	goto	Start
00029 1E00 	;
00030 1E00 	;  DataEEProm (0xFF) = 0xFF = run bootloader
00031 1E00 	;
00032 1E00 	; What happens next:
00033 1E00 	;  If Data EEProm address (0xFF) <> 0xFF then goto ProgStartVector
00034 1E00 	;  Setup  UART for 38.4KBaud
00035 1E00 	;  Parse incoming text as .hex file
00036 1E00 	;   if program memory address > 0 and < BootLoader then
00037 1E00 	;    read block from prog mem
00038 1E00 	;    if compare blocks then
00039 1E00 	;      if prog mem is not blank then erase block
00040 1E00 	;    write block
00041 1E00 	;
00042 1E00 	;  DataEEProm (0xFF) = 0x00
00043 1E00 	;
00044 1E00 	;  reset
00045 1E00 	;************************************************
00046 1E00 	; .hex
00047 1E00 	;:020000040000FA 
00048 1E00 	;       ^^^^^^ Set high word of address to 0x0000
00049 1E00 	;:100010005A23582356235423422021000C16200033
00050 1E00 	;:100020003A100C1E3A14A10B053221000C122000CC
00051 1E00 	;^ Start code                             ^^ Checksum
00052 1E00 	; ^^ Bytes of data (0x10)
00053 1E00 	;   ^^^^ Address low word (0x0020)
00054 1E00 	;       ^^ Record type 0x00 = Data
00055 1E00 	;         ^^^^ LSB MSB of data for Addr / 2
00056 1E00 	;                                         
00057 1E00 	; Checksum is 2's complement of all other bytes added together
00058 1E00 	; Valid address range 0000 0000 .. 0000 3BFE (bootloader is at 0000 3C00 .. 0000 3FFF, 512 words)
00059 1E00 	;************************************************
00060 1E00 	;
00061 1E00 	;
00062 1E00 		cblock 0x20
00063 1E00 0020 		PROG_ADDR_LO                                  ;word address PC
00064 1E00 0021 		PROG_ADDR_HI                                  ; high 7 bits of PC
00065 1E00 0022 		ProgWordCount                                 ;Words in SourceBuffer
00066 1E00 		
00067 1E00 0023 		IH_Addr_Lo:2		;
00068 1E00 0025 		IH_Addr_Hi:2		;extended linear address, alway 0x0000 for Prog mem
00069 1E00 0027 		IH_Bytes
00070 1E00 0028 		IH_ByteCount
00071 1E00 0029 		IH_Type		;Record Type 0..5
00072 1E00 002A 		IH_State
00073 1E00 002B 		IH_TempVal
00074 1E00 002C 		IH_Flags
00075 1E00 002D 		ChkSum
00076 1E00 		endc
00077 1E00 	;
00078 1E00 002C 	#Define	MSN_Done	IH_Flags,0	;Most Significant Nibble
00079 1E00 002C 	#Define	DataInBuffer	IH_Flags,1             ;SourceBuffer has data
00080 1E00 	;
00081 1E00 	;IH_Type: Intel Hex Types
00082 1E00 0000 	IHT_Data	EQU	0x00
00083 1E00 0001 	IHT_End	EQU	0x01	;ie :00000001FF
00084 1E00 0002 	IHT_XSA	EQU	0x02	;extended segment address, not supported
00085 1E00 0003 	IHT_SSA	EQU	0x03	;start segment address, not supported
00086 1E00 0004 	IHT_HighAddr	EQU	0x04	;extended linear address, :02000004FFFFFC
00087 1E00 0005 	IHT_SLA	EQU	0x05	;start linear address, not supported, :04000005000000CD2A
00088 1E00 	;
00089 1E00 	;IH_State values
00090 1E00 0000 	IHS_WaitForColon	EQU	0x00
00091 1E00 0001 	IHS_Length	EQU	0x01
00092 1E00 0002 	IHS_AddrMSB	EQU	0x02
00093 1E00 0003 	IHS_AddrLSB	EQU	0x03
00094 1E00 0004 	IHS_DataType	EQU	0x04
00095 1E00 0005 	IHS_Data	EQU	0x05
00096 1E00 0006 	IHS_CSum	EQU	0x06	;waiting for check sum
00097 1E00 	;
00098 1E00 002B 	IH_ErrorBadLen	EQU	'+'	;>64 Too big
00099 1E00 002D 	IH_ErrorBadCSum	EQU	'-'	;Checksum didn't match
00100 1E00 003D 	IH_ErrorBadType        EQU                    '='                    ;IH_Type not recognized 
00101 1E00 002A 	IH_Ack	EQU	'*'	;We got a good Intel Hex line
00102 1E00 	;
00103 1E00 0040 	BlockSize	EQU	0x40
00104 1E00 0020 	BlockWords	EQU	BlockSize/2	;0x20
00105 1E00 00E0 	AddressMask	EQU	0xE0
00106 1E00 	;
00107 1E00 	;Contiguous ram 0x2000..0x23EF
00108 1E00 		cblock 0x2100		;0x0100 after start of ram
00109 1E00 2100 		SourceBuffer:BlockSize
00110 1E00 2140 		DestBuffer:BlockSize
00111 1E00 2180 		SerialBuffer:BlockSize
00112 1E00 		endc
00113 1E00 	;
00114 1E00 	;=========================================================================================
00115 1E00 	;
00116 1E00 	; Entry: DataEEProm255
00117 1E00 	; Exit: goto ProgStartVector
00118 1E00 	; Calls: none
00119 1E00 	; RAM used: ALL
00120 1E00 	;
00121 1E00 279E 	BootLoader	call	InitializeBLIO	;returns w/ bank 0 selected
00122 1E01 	;
00123 1E01 2704 		call	ReadEEData	;Get Data from EEPROM (0xFF) 
00124 1E02 3AFF 		xorlw	0xFF
00125 1E03 		SKPZ		;0xFF xor 0xFF = 0
SimpleServo16PS.asm                                                   Page: 36
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00125 1E03 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00126 1E04 320B 		bra	BootLoader_End
00127 1E05 	;
00128 1E05 	; Bootloader is active send "**"
00129 1E05 302A 		movlw	IH_Ack
00130 1E06 26FE 		call	SendChar
00131 1E07 302A 		movlw	IH_Ack
00132 1E08 26FE 		call	SendChar
00133 1E09 	;
00134 1E09 	;Initialize
00135 1E09 01A0 		clrf	PROG_ADDR_LO
00136 1E0A 01A1 		clrf	PROG_ADDR_HI
00137 1E0B 01A5 		clrf	IH_Addr_Hi
00138 1E0C 01A6 		clrf	IH_Addr_Hi+1
00139 1E0D 2746 		call	EraseSourceBuffer
00140 1E0E 	;
00141 1E0E 2612 		call	BL_Parse
00142 1E0F 	;	
00143 1E0F 	;if successful then clear EEProm(255)
00144 1E0F 270D 		call	WriteEEData
00145 1E10 	;
00146 1E10 3180 	BootLoader_End	movlp	0x00
00147 1E11 2802 		goto	ProgStartVector
00148 1E12 	;
00149 1E12 	;=========================================================================================
00150 1E12 	; Parse incoming data and do stuff
00151 1E12 	;
00152 1E12 10AC 	BL_Parse	bcf	DataInBuffer
00153 1E13 01AA 	BL_ParseNextLine	clrf	IH_State
00154 1E14 01A8 		clrf	IH_ByteCount
00155 1E15 01AD 		clrf	ChkSum
00156 1E16 26DE 		call                   FSR0_SerialBuffer
00157 1E17 	;
00158 1E17 102C 	BLP_L1	bcf	MSN_Done
00159 1E18 	;
00160 1E18 26ED 	BLP_L2	call	GetChar
00161 1E19 00F8 		movwf	Param78
00162 1E1A 303A 		movlw	':'
00163 1E1B 0278 		subwf	Param78,W
00164 1E1C 		SKPZ		;Char=":"
00164 1E1C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00165 1E1D 3203 		bra	BLP_TestNum	; No
00166 1E1E 	; It's a ":" so set state=1, wait for length
00167 1E1E 3001 		movlw	IHS_Length
00168 1E1F 00AA 		movwf	IH_State
00169 1E20 33F6 		bra	BLP_L1
00170 1E21 	;
00171 1E21 08AA 	BLP_TestNum	movf	IH_State,F
00172 1E22 		SKPNZ		;Are we waiting for a number?
00172 1E22 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00173 1E23 33F4 		bra	BLP_L2	; No
00174 1E24 	;
00175 1E24 3030 		movlw	0x30	;'0'
00176 1E25 0278 		subwf	Param78,W
00177 1E26 		SKPNB		;Char>="0"?
00177 1E26 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00178 1E27 33EB 		bra	BL_ParseNextLine	; No start over
00179 1E28 303A 		movlw	0x3A	;':'
00180 1E29 0278 		subwf	Param78,W
00181 1E2A 		SKPNB                                         ;>"9"?
00181 1E2A 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00182 1E2B 320A 		bra	BLP_TestNum_1          ; No, it's 0..9
00183 1E2C 3041 		movlw	0x41	;'A'
00184 1E2D 0278 		subwf	Param78,W
00185 1E2E 		SKPNB		;Char>="A"?
00185 1E2E 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00186 1E2F 33E3 		bra	BL_ParseNextLine	; No start over
00187 1E30 3047 		movlw	0x47	;'G'
00188 1E31 0278 		subwf	Param78,W
00189 1E32 		SKPB		;Char<"G"
00189 1E32 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00190 1E33 33DF 		bra	BL_ParseNextLine	; No, start over
00191 1E34 3007 		movlw	0x07	; Yes, A..F
00192 1E35 02F8 		subwf	Param78,F              ;  make "A" "0"+.10
00193 1E36 	;
00194 1E36 3030 	BLP_TestNum_1	movlw	0x30
00195 1E37 02F8 		subwf	Param78,F	;'0' >> 0x00
00196 1E38 182C 		btfsc	MSN_Done
00197 1E39 3204 		bra	BLP_TestNum_2	;do low nibble
00198 1E3A 0E78 		swapf	Param78,W
00199 1E3B 00AB 		movwf	IH_TempVal
00200 1E3C 142C 		bsf	MSN_Done
00201 1E3D 33DA 		bra	BLP_L2                 ;go get the next char
00202 1E3E 	;
00203 1E3E 0878 	BLP_TestNum_2	movf	Param78,W
00204 1E3F 07AB 		addwf	IH_TempVal,F           ;add the low nibble
00205 1E40 	;
00206 1E40 	; We have a number in IH_TempVal
00207 1E40 082A 	                       movf                   IH_State,W
00208 1E41 3907 	                       andlw                  0x07
00209 1E42 000B 	                       brw
00210 1E43 33CF 	                       bra                    BL_ParseNextLine       ;IHS_WaitForColon already handled
00211 1E44 3206 	                       bra                    BLP_IHS_Length         ;Waiting for length byte
00212 1E45 3211 	                       bra                    BLP_IHS_AddrMSB        ;IHS_AddrMSB
00213 1E46 3214 	                       bra                    BLP_IHS_AddrLSB        ;IHS_AddrLSB
00214 1E47 3217 	                       bra                    BLP_IHS_DataType       ;IHS_DataType
00215 1E48 321D 	                       bra                    BLP_IHS_Data           ;IHS_Data
00216 1E49 3225 	                       bra                    BLP_IHS_CSum           ;IHS_CSum
00217 1E4A 33C8 	                       bra                    BL_ParseNextLine       ;oops
SimpleServo16PS.asm                                                   Page: 37
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00218 1E4B 	;	
00219 1E4B 3041 	BLP_IHS_Length	movlw	.65	; Yes, is it in range 0..64?
00220 1E4C 022B 		subwf	IH_TempVal,W
00221 1E4D 		SKPNB		;<=64?
00221 1E4D 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00222 1E4E 3203 		bra	BLP_SaveIH_Length
00223 1E4F 	;
00224 1E4F 302B 		movlw	IH_ErrorBadLen
00225 1E50 26FE 		call	SendChar
00226 1E51 2E13 		goto	BL_ParseNextLine
00227 1E52 	;
00228 1E52 082B 	BLP_SaveIH_Length	movf	IH_TempVal,W
00229 1E53 00A7 		movwf	IH_Bytes
00230 1E54 07AD 		addwf	ChkSum,F
00231 1E55 0AAA 	BLP_NextState	incf	IH_State,F
00232 1E56 2E17 		goto	BLP_L1
00233 1E57 	;
00234 1E57 082B 	BLP_IHS_AddrMSB	movf	IH_TempVal,W
00235 1E58 00A4 		movwf	IH_Addr_Lo+1
00236 1E59 07AD 		addwf	ChkSum,F
00237 1E5A 33FA 		bra	BLP_NextState
00238 1E5B 	;
00239 1E5B 082B 	BLP_IHS_AddrLSB	movf	IH_TempVal,W
00240 1E5C 00A3 		movwf	IH_Addr_Lo
00241 1E5D 07AD 		addwf	ChkSum,F
00242 1E5E 33F6 		bra	BLP_NextState
00243 1E5F 	;
00244 1E5F 082B 	BLP_IHS_DataType	movf	IH_TempVal,W
00245 1E60 00A9 		movwf	IH_Type
00246 1E61 07AD 		addwf	ChkSum,F
00247 1E62 	; Ship IHS_Data if length = 0
00248 1E62 08A7 		movf	IH_Bytes,F
00249 1E63 		SKPNZ		;Expecting zero length data?
00249 1E63 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00250 1E64 0AAA 		incf	IH_State,F	; Yes
00251 1E65 33EF 		bra	BLP_NextState
00252 1E66 	;
00253 1E66 082B 	BLP_IHS_Data	movf	IH_TempVal,W
00254 1E67 001A 		movwi	FSR0++
00255 1E68 07AD 		addwf	ChkSum,F
00256 1E69 0AA8 		incf	IH_ByteCount,F
00257 1E6A 	; if IH_ByteCount=IH_Bytes then next state
00258 1E6A 0828 		movf	IH_ByteCount,W
00259 1E6B 0227 		subwf	IH_Bytes,W
00260 1E6C 		SKPZ		;Done with data?
00260 1E6C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00261 1E6D 2E17 		goto	BLP_L1	; No
00262 1E6E 33E6 		bra	BLP_NextState	; Yes
00263 1E6F 	;
00264 1E6F 	BLP_IHS_CSum:
00265 1E6F 	; get 2's comp
00266 1E6F 01F8 		clrf	Param78
00267 1E70 082D 		movf	ChkSum,W
00268 1E71 0278 		subwf	Param78,W
00269 1E72 022B 		subwf	IH_TempVal,W
00270 1E73 		SKPNZ		;Checksum matches?
00270 1E73 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00271 1E74 3203 		bra	BLP_Validate           ; Yes
00272 1E75 	;
00273 1E75 302D 		movlw	IH_ErrorBadCSum
00274 1E76 26FE 		call	SendChar
00275 1E77 2E13 		goto	BL_ParseNextLine
00276 1E78 	;
00277 1E78 	;===================
00278 1E78 	; We have received a complete Intel Hex command
00279 1E78 	;
00280 1E78 0829 	BLP_Validate	movf                   IH_Type,W
00281 1E79 39F8 	                       andlw                  0xF8
00282 1E7A 	                       SKPZ
00282 1E7A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00283 1E7B 3218 	                       bra                    BLPV_BadType
00284 1E7C 	;
00285 1E7C 0829 	                       movf                   IH_Type,W
00286 1E7D 000B 	                       brw
00287 1E7E 320B 	                       bra                    BLPV_Data              ;IHT_Data
00288 1E7F 3206 	                       bra                    BLPV_EndCmd            ;IHT_End
00289 1E80 3213 	                       bra                    BLPV_BadType           ;IHT_XSA
00290 1E81 3212 	                       bra                    BLPV_BadType           ;IHT_SSA
00291 1E82 3209 	                       bra                    BLPV_HighAddr          ;IHT_HighAddr
00292 1E83 3210 	                       bra                    BLPV_BadType           ;IHT_SLA
00293 1E84 320F 	                       bra                    BLPV_BadType           ;6
00294 1E85 320E 	                       bra                    BLPV_BadType           ;7
00295 1E86 	;---------------------
00296 1E86 	; handle end command
00297 1E86 18AC 	BLPV_EndCmd	btfsc	DataInBuffer
00298 1E87 26CD 		call	BLP_WriteBuffer
00299 1E88 302A 		movlw	IH_Ack
00300 1E89 2EFE 	                       goto	SendChar
00301 1E8A 	;
00302 1E8A 	;---------------------
00303 1E8A 	; handle data
00304 1E8A 2696 	BLPV_Data	call	BufferIHData           ;Move to source buffer
00305 1E8B 3205 	                       bra                    BLPV_Exit_Ack
00306 1E8C 	;
00307 1E8C 	;---------------------
00308 1E8C 	; handle high address change
00309 1E8C 26DE 	BLPV_HighAddr	call                   FSR0_SerialBuffer
00310 1E8D 0012 		moviw	FSR0++
00311 1E8E 00A6 		movwf	IH_Addr_Hi+1
SimpleServo16PS.asm                                                   Page: 38
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00312 1E8F 0012 		moviw	FSR0++
00313 1E90 00A5 		movwf	IH_Addr_Hi
00314 1E91 302A 	BLPV_Exit_Ack	movlw	IH_Ack
00315 1E92 26FE 	BLPV_Exit	call	SendChar
00316 1E93 2E13 		goto	BL_ParseNextLine
00317 1E94 	;---------------------
00318 1E94 303D 	BLPV_BadType           movlw                  IH_ErrorBadType
00319 1E95 33FC 	                       bra                    BLPV_Exit
00320 1E96 	;
00321 1E96 	;===========================================
00322 1E96 	; Validate address is in range and move to SourceBuffer
00323 1E96 	;
00324 1E96 	; Entry: DataInBuffer, IH_ByteCount, Data in SerialBuffer, 32bit address IH_Addr_Hi:IH_Addr_Lo
00325 1E96 	; Exit: SourceBuffer, DataInBuffer, ProgWordCount, PROG_ADDR_HI:PROG_ADDR_LO
00326 1E96 	; 
00327 1E96 	; check address range, max 32K program words
00328 1E96 0825 	BufferIHData	movf	IH_Addr_Hi,W
00329 1E97 0426 		iorwf	IH_Addr_Hi+1,W
00330 1E98 		SKPZ		;High address = 0x0000 ?
00330 1E98 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00331 1E99 0008 		return		; No, > 64KB or 32K words
00332 1E9A 	;
00333 1E9A 	; convert to words, IH_Addr_Lo = IH_Addr_Lo / 2
00334 1E9A 36A4 		lsrf	IH_Addr_Lo+1,F
00335 1E9B 0CA3 		rrf	IH_Addr_Lo,F
00336 1E9C 301E 		movlw	high BootLoaderStart   ;0x0E
00337 1E9D 0224 		subwf	IH_Addr_Lo+1,W
00338 1E9E 		SKPB		;BootLoaderStart > IH_Addr_Lo?
00338 1E9E 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00339 1E9F 0008 		return		; No, don't allow overwrite of bootloader
00340 1EA0 	;
00341 1EA0 1CAC 		btfss	DataInBuffer	;Any old data in the buffer?
00342 1EA1 320D 		bra	BIHD_PutInBuff	; No
00343 1EA2 	;
00344 1EA2 	; Continue filling buffer or flush and add to new buffer?
00345 1EA2 	;
00346 1EA2 0824 		movf	IH_Addr_Lo+1,W
00347 1EA3 0221 		subwf	PROG_ADDR_HI,W
00348 1EA4 		SKPZ		;MSB of Address Matches?
00348 1EA4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00349 1EA5 3208 		bra	BIHD_FlushBuff	; No, write current data to PFM
00350 1EA6 	;
00351 1EA6 30E0 		movlw	AddressMask
00352 1EA7 0520 		andwf	PROG_ADDR_LO,W
00353 1EA8 00F8 		movwf	Param78                ;Param78 = Prog Address LSB & 0xE0
00354 1EA9 30E0 		movlw	AddressMask
00355 1EAA 0523 		andwf	IH_Addr_Lo,W           ;W = IH Word Address LSB & 0xE0
00356 1EAB 0278 		subwf	Param78,W
00357 1EAC 		SKPNZ		;Row Address Matches?
00357 1EAC 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00358 1EAD 320A 		bra	BIHD_PutInBuff_E2	; Yes
00359 1EAE 	;
00360 1EAE 26CD 	BIHD_FlushBuff	call	BLP_WriteBuffer
00361 1EAF 	;
00362 1EAF 	; Entry: IH_Addr_Lo=Word Address
00363 1EAF 	; 
00364 1EAF 0823 	BIHD_PutInBuff	movf	IH_Addr_Lo,W           ;was converted to words
00365 1EB0 39E0 		andlw	AddressMask            ; 0xE0
00366 1EB1 00A0 		movwf	PROG_ADDR_LO
00367 1EB2 0824 		movf	IH_Addr_Lo+1,W
00368 1EB3 00A1 		movwf	PROG_ADDR_HI
00369 1EB4 	; ProgWordCount = 0x1F & IH_Addr_Lo
00370 1EB4 30FF 		movlw	0xFF
00371 1EB5 3AE0 		xorlw	AddressMask	;0x1F
00372 1EB6 0523 		andwf	IH_Addr_Lo,W	;Offset within block
00373 1EB7 00A2 		movwf	ProgWordCount
00374 1EB8 	;
00375 1EB8 26DE 	BIHD_PutInBuff_E2	call                   FSR0_SerialBuffer
00376 1EB9 	;
00377 1EB9 	; FSR1 = SourceBuffer + ProgWordCount * 2
00378 1EB9 3522 		lslf	ProgWordCount,W	;ProgWordCount * 2
00379 1EBA 3E00 		addlw	low SourceBuffer
00380 1EBB 0086 		movwf	FSR1L
00381 1EBC 3021 		movlw	high SourceBuffer
00382 1EBD 0087 		movwf	FSR1H
00383 1EBE 	;
00384 1EBE 	;Param79 = IH_ByteCount
00385 1EBE 0828 		movf	IH_ByteCount,W
00386 1EBF 00F9 		movwf	Param79
00387 1EC0 	;ProgWordCount += IH_ByteCount / 2
00388 1EC0 3628 		lsrf	IH_ByteCount,W	; divide by 2
00389 1EC1 07A2 		addwf	ProgWordCount,F
00390 1EC2 	;
00391 1EC2 0012 	BIHD_PutInBuff_L1	moviw	FSR0++                 ;move SerialBuffer
00392 1EC3 001E 		movwi	FSR1++                 ;to SourceBuffer
00393 1EC4 0BF9 		decfsz	Param79,F
00394 1EC5 33FC 		bra	BIHD_PutInBuff_L1
00395 1EC6 	;
00396 1EC6 14AC 		bsf	DataInBuffer
00397 1EC7 	;
00398 1EC7 3020 		movlw	BlockWords             ;0x20
00399 1EC8 0222 		subwf	ProgWordCount,W        ;W = ProgWordCount - 0x20
00400 1EC9 		SKPNZ		;buffer full?
00400 1EC9 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00401 1ECA 3202 		bra	BLP_WriteBuffer	; Yes, ProgWordCount = 0x20
00402 1ECB 		SKPNB		;Overflow? This should not happen.
00402 1ECB 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00403 1ECC 0008 		return		; No, ProgWordCount < 0x20
00404 1ECD 	;
SimpleServo16PS.asm                                                   Page: 39
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00405 1ECD 	; fall thru to BLP_WriteBuffer
00406 1ECD 	;=============================================
00407 1ECD 	; Write SourceBuffer to Prog memory
00408 1ECD 	;
00409 1ECD 	; Entry: SourceBuffer, ProgWordCount, PROG_ADDR_HI:PROG_ADDR_LO
00410 1ECD 	;
00411 1ECD 	BLP_WriteBuffer:
00412 1ECD 	; copy old prog mem to DestBuffer
00413 1ECD 26E3 		call                   FSR1_DestBuff
00414 1ECE 2751 		call	ReadProgBlock
00415 1ECF 	;
00416 1ECF 3000 		movlw	low SourceBuffer	;new data
00417 1ED0 0084 		movwf	FSR0L
00418 1ED1 3021 		movlw	high SourceBuffer
00419 1ED2 0085 		movwf	FSR0H	
00420 1ED3 26E3 		call                   FSR1_DestBuff          ;old data
00421 1ED4 272C 		call	CompareBlock
00422 1ED5 	;
00423 1ED5 1809 		btfsc	WREG,0	;Matches?
00424 1ED6 3206 		bra	BLP_WriteBuffer_end	; Yes
00425 1ED7 	;	
00426 1ED7 26E3 		call                   FSR1_DestBuff
00427 1ED8 271F 		call	TestErased
00428 1ED9 1C09 		btfss	WREG,0	;Erased?
00429 1EDA 2763 		call	EraseProgBlock	; No, Erase it.
00430 1EDB 	;
00431 1EDB 26E8 		call                   FSR1_SourceBuffer	
00432 1EDC 277A 		call	WriteProgBlock
00433 1EDD 	;
00434 1EDD 2F46 	BLP_WriteBuffer_end	goto	EraseSourceBuffer
00435 1EDE 	;
00436 1EDE 	;---------------------
00437 1EDE 3080 	FSR0_SerialBuffer      movlw	low SerialBuffer
00438 1EDF 0084 		movwf	FSR0L
00439 1EE0 3021 		movlw	high SerialBuffer
00440 1EE1 0085 		movwf	FSR0H
00441 1EE2 0008 		return
00442 1EE3 	;
00443 1EE3 	;---------------------
00444 1EE3 3040 	FSR1_DestBuff          movlw	low DestBuffer
00445 1EE4 0086 		movwf	FSR1L
00446 1EE5 3021 		movlw	high DestBuffer
00447 1EE6 0087 		movwf	FSR1H
00448 1EE7 0008 		return
00449 1EE8 	;
00450 1EE8 	;---------------------
00451 1EE8 3000 	FSR1_SourceBuffer      movlw	low SourceBuffer
00452 1EE9 0086 		movwf	FSR1L
00453 1EEA 3021 		movlw	high SourceBuffer
00454 1EEB 0087 		movwf	FSR1H
00455 1EEC 0008 		return
00456 1EED 	;
00457 1EED 	;==============================================
00458 1EED 	; Get a byte from UART, waits forever
00459 1EED 	;
00460 1EED 	; Entry: none
00461 1EED 	; Exit: W=Char
00462 1EED 	;
00463 1EED 0020 	GetChar	MOVLB	0x00
00464 1EEE 1E91 		BTFSS	PIR1,RCIF	;RX has a byte?
00465 1EEF 33FD 		BRA	GetChar
00466 1EF0 	;
00467 1EF0 0023 		movlb	RCSTA	; bank 3
00468 1EF1 081D 		MOVF	RCSTA,W
00469 1EF2 3906 		ANDLW	0x06
00470 1EF3 		SKPZ		;Frame or Overrun Err?
00470 1EF3 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00471 1EF4 3203 		BRA	GetChar_Err	; yes
00472 1EF5 0819 		MOVF	RCREG,W
00473 1EF6 	;
00474 1EF6 0020 		movlb	0x00	; bank 0
00475 1EF7 	;	goto	SendChar	; tc
00476 1EF7 0008 		RETURN
00477 1EF8 	;
00478 1EF8 0819 	GetChar_Err	MOVF	RCREG,W	;bad byte so drop it
00479 1EF9 121D 		BCF	RCSTA,CREN
00480 1EFA 111D 		BCF	RCSTA,FERR
00481 1EFB 109D 		BCF	RCSTA,OERR
00482 1EFC 161D 		BSF	RCSTA,CREN
00483 1EFD 33EF 		bra	GetChar
00484 1EFE 	;
00485 1EFE 	;==============================================
00486 1EFE 	; Send a byte to UART
00487 1EFE 	;
00488 1EFE 	; Entry: W=Char to send
00489 1EFE 	SendChar:
00490 1EFE 1E11 		BTFSS	PIR1,TXIF	;TX done?
00491 1EFF 33FE 		bra	SendChar
00492 1F00 0023 		movlb	TXREG
00493 1F01 009A 		MOVWF	TXREG
00494 1F02 0020 		MOVLB	0
00495 1F03 0008 		RETURN
00496 1F04 	;	
00497 1F04 	;==============================================
00498 1F04 	; Read EEProm(255)
00499 1F04 	;
00500 1F04 	ReadEEData:	
00501 1F04 0023 		movlb	EEADRL
00502 1F05 30FF 		MOVLW	0xFF
SimpleServo16PS.asm                                                   Page: 40
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00503 1F06 0091 		MOVWF	EEADRL
00504 1F07 	;
00505 1F07 	;Data Memory
00506 1F07 	;Address to read ;Deselect Config space
00507 1F07 1315 		BCF	EECON1,CFGS
00508 1F08 1395 		BCF	EECON1,EEPGD
00509 1F09 	;Point to DATA memory
00510 1F09 1415 		BSF	EECON1,RD	;EE Read
00511 1F0A 0813 		MOVF	EEDATL,W	;W = EEDATL
00512 1F0B 0020 		movlb	0
00513 1F0C 0008 		return
00514 1F0D 	;
00515 1F0D 	;==============================================
00516 1F0D 	; Clear EEProm(255)
00517 1F0D 	;
00518 1F0D 	WriteEEData:
00519 1F0D 0023 		movlb	EEADRL
00520 1F0E 30FF 		MOVLW	0xFF
00521 1F0F 0091 		MOVWF	EEADRL
00522 1F10 3000 		movlw	0x00
00523 1F11 0093 		movwf	EEDATL
00524 1F12 1315 		BCF	EECON1,CFGS	;not config mem
00525 1F13 1395 		BCF	EECON1,EEPGD	;not prog mem
00526 1F14 1515 		BSF	EECON1,WREN
00527 1F15 3055 		movlw	0x55
00528 1F16 0096 		movwf	EECON2
00529 1F17 30AA 		movlw	0xAA
00530 1F18 0096 		movwf	EECON2
00531 1F19 1495 		bsf	EECON1,WR
00532 1F1A 1895 	WriteEEData_L1	btfsc	EECON1,WR
00533 1F1B 33FE 		bra	WriteEEData_L1
00534 1F1C 1115 		bcf	EECON1,WREN
00535 1F1D 0020 		movlb	0
00536 1F1E 0008 		return
00537 1F1F 	;
00538 1F1F 	;==============================================
00539 1F1F 	; Test if block is erased
00540 1F1F 	;
00541 1F1F 	; Entry: FSR1 -> current data
00542 1F1F 	; Exit: W=1 if new = blank else W=0
00543 1F1F 	;
00544 1F1F 3020 	TestErased	movlw	BlockWords
00545 1F20 00F9 		movwf	Param79
00546 1F21 0016 	TestErased_L1	moviw	FSR1++	;LSB
00547 1F22 3CFF 		sublw	0xFF
00548 1F23 		SKPZ		;=0xFF?
00548 1F23 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00549 1F24 3400 		retlw	0x00	; No
00550 1F25 	;
00551 1F25 0016 		moviw	FSR1++	;MSB
00552 1F26 3C3F 		sublw	0x3F
00553 1F27 		SKPZ		;=0x3F?
00553 1F27 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00554 1F28 3400 		retlw	0x00	; No
00555 1F29 	;
00556 1F29 0BF9 		decfsz	Param79,F
00557 1F2A 33F6 		bra	TestErased_L1
00558 1F2B 3401 		retlw	0x01                   ;All words are 0x3FFF
00559 1F2C 	;
00560 1F2C 	;==============================================
00561 1F2C 	; Compare Block
00562 1F2C 	;
00563 1F2C 	; Entry: FSR0 -> new data, FSR1 -> current data
00564 1F2C 	; Exit: W=1 if new = current else W=0
00565 1F2C 	;
00566 1F2C 3020 	CompareBlock	movlw	BlockWords
00567 1F2D 00F9 		movwf	Param79
00568 1F2E 0012 	CompareBlock_L1	moviw	FSR0++	;LSB
00569 1F2F 00F7 		movwf	Param77
00570 1F30 0012 		moviw	FSR0++	;MSB
00571 1F31 00F8 		movwf	Param78
00572 1F32 	; skip?
00573 1F32 3C3F 		sublw	0x3F
00574 1F33 		SKPZ
00574 1F33 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00575 1F34 3206 		bra	CB_NotBlank
00576 1F35 0A77 		incf	Param77,W
00577 1F36 		SKPZ
00577 1F36 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00578 1F37 3203 		bra	CB_NotBlank
00579 1F38 0016 		moviw	FSR1++
00580 1F39 0016 		moviw	FSR1++
00581 1F3A 3208 		bra	CB_Next
00582 1F3B 	;
00583 1F3B 0016 	CB_NotBlank	moviw	FSR1++
00584 1F3C 0277 		subwf	Param77,W
00585 1F3D 		SKPZ		;Matches?
00585 1F3D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00586 1F3E 3400 		retlw	0x00	; No
00587 1F3F 0016 		moviw	FSR1++
00588 1F40 0278 		subwf	Param78,W
00589 1F41 		SKPZ		;Matches?
00589 1F41 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00590 1F42 3400 		retlw	0x00	; No
00591 1F43 	;
00592 1F43 0BF9 	CB_Next	decfsz	Param79,F
00593 1F44 33E9 		bra	CompareBlock_L1
00594 1F45 3401 		retlw	0x01	;It's a match!
00595 1F46 	;
SimpleServo16PS.asm                                                   Page: 41
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00596 1F46 	;==============================================
00597 1F46 	; Fill SourceBuffer w/ 0x3FFF
00598 1F46 	;
00599 1F46 26E8 	EraseSourceBuffer	call                   FSR1_SourceBuffer
00600 1F47 10AC 	                       bcf	DataInBuffer           ;mark SourceBuffer as empty
00601 1F48 	;
00602 1F48 	; Fall thru to EraseBlock
00603 1F48 	;==============================================
00604 1F48 	; Erase Block (Fill with 0x3FFF)
00605 1F48 	;
00606 1F48 	; Entry: FSR1
00607 1F48 	;
00608 1F48 3020 	EraseBlock	movlw	BlockWords
00609 1F49 00F9 		movwf	Param79
00610 1F4A 30FF 	EraseBlock_L1	movlw	0xFF
00611 1F4B 001E 		movwi	FSR1++
00612 1F4C 303F 		movlw	0x3F
00613 1F4D 001E 		movwi	FSR1++
00614 1F4E 0BF9 		decfsz	Param79,F
00615 1F4F 33FA 		bra	EraseBlock_L1
00616 1F50 0008 		return
00617 1F51 	;	
00618 1F51 	;==============================================
00619 1F51 	; Read Program memory block
00620 1F51 	;
00621 1F51 	; Entry: FSR1,PROG_ADDR_HI:PROG_ADDR_LO
00622 1F51 	; Exit: FSR1 changed, 32 words >> (FSR1++)
00623 1F51 	;
00624 1F51 2772 	ReadProgBlock	call	LoadProgAddr
00625 1F52 1315 		BCF	EECON1,CFGS	; Do not select Configuration Space
00626 1F53 1795 		BSF	EECON1,EEPGD	; Select Program Memory
00627 1F54 3020 		movlw	BlockWords	;Block is .32 words
00628 1F55 00F9 		movwf	Param79
00629 1F56 1415 	ReadProgBlock_L1	BSF	EECON1,RD	; Initiate read
00630 1F57 0000 		NOP		; skipped
00631 1F58 0000 		NOP		; do nothing
00632 1F59 0813 		MOVF	EEDATL,W	; Get LSB of word
00633 1F5A 001E 		movwi	FSR1++	; Store in user location
00634 1F5B 0814 		MOVF	EEDATH,W	; Get MSB of word
00635 1F5C 001E 		movwi	FSR1++	; Store in user location
00636 1F5D 0BF9 		decfsz	Param79,F
00637 1F5E 3202 		bra	ReadProgBlock_1
00638 1F5F 0020 		movlb	0
00639 1F60 0008 		return
00640 1F61 	;
00641 1F61 0A91 	ReadProgBlock_1	incf	EEADRL,F
00642 1F62 33F3 		bra	ReadProgBlock_L1
00643 1F63 	;
00644 1F63 	;=====================================================
00645 1F63 	; Erase Program memory block
00646 1F63 	;
00647 1F63 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO
00648 1F63 	;
00649 1F63 2772 	EraseProgBlock	call	LoadProgAddr
00650 1F64 1795 		BSF	EECON1,EEPGD	;Point to program memory
00651 1F65 1315 		BCF	EECON1,CFGS	;Not configuration space
00652 1F66 1615 		BSF	EECON1,FREE	;Specify an erase operation, automaticaly cleared
00653 1F67 1515 		BSF	EECON1,WREN	;Enable writes
00654 1F68 3055 		MOVLW	55h	;Start of required sequence to initiate erase
00655 1F69 0096 		MOVWF	EECON2	;Write 55h
00656 1F6A 30AA 		MOVLW	0AAh
00657 1F6B 0096 		MOVWF	EECON2	;Write AAh
00658 1F6C 1495 		BSF	EECON1,WR	;Set WR bit to begin erase
00659 1F6D 0000 		NOP		;Any instructions here are ignored as processor
00660 1F6E 0000 		NOP		; halts to begin erase sequence
00661 1F6F 				;Processor will stop here and wait for erase complete.
00662 1F6F 				;after erase processor continues with 3rd instruction
00663 1F6F 1115 		BCF	EECON1,WREN	;Disable writes
00664 1F70 0020 		movlb	0
00665 1F71 0008 		return
00666 1F72 	;
00667 1F72 	;=========================================================
00668 1F72 	; Load the program address PROG_ADDR_HI:PROG_ADDR_LO into EEADRH:EEADRL
00669 1F72 	;
00670 1F72 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, bank 0
00671 1F72 	; Exit: bank 16
00672 1F72 	;
00673 1F72 0821 	LoadProgAddr	movf	PROG_ADDR_HI,W
00674 1F73 0023 		movlb	EEADRH	;bank ?
00675 1F74 0092 		MOVWF	EEADRH	; Store MSB of address
00676 1F75 0020 		movlb	0	;bank 0
00677 1F76 0820 		movf	PROG_ADDR_LO,W
00678 1F77 0023 		movlb	EEADRH	;bank ?
00679 1F78 0091 		MOVWF	EEADRL	; Store LSB of address
00680 1F79 0008 		return
00681 1F7A 	;
00682 1F7A 	;==========================================================
00683 1F7A 	; Write Program memory block
00684 1F7A 	;
00685 1F7A 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, FSR1
00686 1F7A 	; Exit: FSR1 changed
00687 1F7A 	; 
00688 1F7A 2772 	WriteProgBlock	call	LoadProgAddr
00689 1F7B 1795 		BSF	EECON1,EEPGD	;Point to program memory
00690 1F7C 1315 		BCF	EECON1,CFGS	;Not configuration space
00691 1F7D 1515 		BSF	EECON1,WREN	;Enable writes
00692 1F7E 1695 		BSF	EECON1,LWLO	;Only Load Write Latches
00693 1F7F 3020 		movlw	BlockWords
00694 1F80 00F9 		movwf	Param79
SimpleServo16PS.asm                                                   Page: 42
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00695 1F81 	;
00696 1F81 0016 	WriteProgBlock_L1	moviw	FSR1++
00697 1F82 0093 		movwf	EEDATL
00698 1F83 0016 		moviw	FSR1++
00699 1F84 0094 		movwf	EEDATH
00700 1F85 	;
00701 1F85 0811 		movf	EEADRL,W
00702 1F86 3A1F 		xorlw	0x1F
00703 1F87 391F 		andlw	0x1F
00704 1F88 1903 		btfsc	_Z	;EEADRL = xxx1 1111?
00705 1F89 3209 		bra	WriteProgBlock_Wr	; Yes
00706 1F8A 	;
00707 1F8A 3055 		movlw	0x55	; Start of required write sequence:
00708 1F8B 0096 		movwf	EECON2
00709 1F8C 30AA 		movlw	0xAA
00710 1F8D 0096 		movwf	EECON2
00711 1F8E 1495 		bsf	EECON1,WR	; Set WR bit to begin write to latches
00712 1F8F 0000 		nop
00713 1F90 0000 		nop
00714 1F91 0A91 		incf	EEADRL,F
00715 1F92 33EE 		bra	WriteProgBlock_L1
00716 1F93 	;
00717 1F93 1295 	WriteProgBlock_Wr	bcf	EECON1,LWLO	; Write memory not latches
00718 1F94 3055 		movlw	0x55	; Start of required write sequence:
00719 1F95 0096 		movwf	EECON2
00720 1F96 30AA 		movlw	0xAA
00721 1F97 0096 		movwf	EECON2
00722 1F98 1495 		bsf	EECON1,WR	; Set WR bit to begin write
00723 1F99 0000 		nop
00724 1F9A 0000 		nop
00725 1F9B 	;
00726 1F9B 1115 		bcf	EECON1,WREN
00727 1F9C 	;
00728 1F9C 0020 	WriteProgBlock_end	movlb	0
00729 1F9D 0008 		return	
00730 1F9E 	;
00731 1F9E 	;============================================================
00732 1F9E 	; call once
00733 1F9E 	;
00734 1F9E 0021 	InitializeBLIO	MOVLB	0x01	; select bank 1
00735 1F9F 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00736 1FA0 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00737 1FA1 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00738 1FA2 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00739 1FA3 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00740 1FA4 1515 		bsf	OPTION_REG,PS2
00741 1FA5 	;
00742 1FA5 30F0 		MOVLW	OSCCON_Value
00743 1FA6 0099 		MOVWF	OSCCON
00744 1FA7 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00745 1FA8 0097 		movwf	WDTCON
00746 1FA9 	;
00747 1FA9 0024 		movlb	4	; bank 4
00748 1FAA 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00749 1FAB 	;
00750 1FAB 0023 		MOVLB	0x03	; bank 3
00751 1FAC 3000 		movlw	ANSELA_Val
00752 1FAD 008C 		movwf	ANSELA
00753 1FAE 3000 		movlw	ANSELB_Val
00754 1FAF 008D 		movwf	ANSELB
00755 1FB0 	;
00756 1FB0 	;
00757 1FB0 		if UseAltSerialPort
00764 1FB0 		endif
00765 1FB0 	;
00766 1FB0 0020 		MOVLB	0x00	;Bank 0
00767 1FB1 	; setup data ports
00768 1FB1 3004 		movlw	PortBValue
00769 1FB2 008D 		movwf	PORTB	;init port B
00770 1FB3 3018 		movlw	PortAValue
00771 1FB4 008C 		movwf	PORTA
00772 1FB5 0021 		MOVLB	0x01	; bank 1
00773 1FB6 3060 		movlw	PortADDRBits
00774 1FB7 008C 		movwf	TRISA
00775 1FB8 30F7 		movlw	PortBDDRBits	;setup for programer
00776 1FB9 008D 		movwf	TRISB
00777 1FBA 	;
00778 1FBA 	; setup serial I/O
00779 1FBA 0023 		movlb	BAUDCON	; bank 3
00780 1FBB 3008 		movlw	BAUDCON_Value
00781 1FBC 009F 		movwf	BAUDCON
00782 1FBD 30CF 		MOVLW	low BaudRate
00783 1FBE 009B 		MOVWF	SPBRGL
00784 1FBF 3000 		MOVLW	high BaudRate
00785 1FC0 009C 		MOVWF	SPBRGH
00786 1FC1 3024 		MOVLW	TXSTA_Value
00787 1FC2 009E 		MOVWF	TXSTA
00788 1FC3 3090 		MOVLW	RCSTA_Value
00789 1FC4 009D 		MOVWF	RCSTA
00790 1FC5 	;	movlb	0x01	; bank 1
00791 1FC5 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00792 1FC5 0020 		movlb	0x00	; bank 0
00793 1FC6 	;
00794 1FC6 	;	bsf	INTCON,PEIE	; enable periferal interupts
00795 1FC6 138B 		bcf	INTCON,GIE	; disable interupts
00796 1FC7 	;
00797 1FC7 0008 		return
00798 1FC8 	;
00799 1FC8 	;
SimpleServo16PS.asm                                                   Page: 43
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

00800 1FC8 	 
00801 1FC8 	 
00802 1FC8 	 
00803 1FC8 	 
00804 1FC8 	 
00805 1FC8 	 
00806 1FC8 	 
00807 1FC8 	 
00808 1FC8 	 
00809 1FC8 	 
00810 1FC8 	 
00811 1FC8 	 
00812 1FC8 	 
00813 1FC8 	 
00814 1FC8 	 
00815 1FC8 	 
00816 1FC8 	 
00817 1FC8 	 
00818 1FC8 	 
00819 1FC8 	 
00820 1FC8 	 
00821 1FC8 	 
00822 1FC8 	 
00823 1FC8 	 
00824 1FC8 	 
00825 1FC8 	 
00826 1FC8 	 
00535 1FC8 	;
00536 1FC8 	;
00537 1FC8 	;
00538 1FC8 	;
00539 1FC8 		END

X-Ref Table
_C	STATUS,C	IdleServos_L1
_Z	STATUS,Z	IdleServos_Accel_2, WriteProgBlock_L1
AccelComplete0_7	0000 	IdleServos_Accel, AccelDone, Store8Times
AccelComplete8_15	0004 	IdleServos_Accel_1, AccelDone, Store8Times
AccelDone ^	033C 	IdleServos_Accel_2
AccelRampLen	21E0 	IdleServos_Accel_2, Store8Times
AddrChngDwell	0004 	ISR_ServoCCP1, IRQ_Servo1_InAct, IRQ_Servo1_OL, IRQ_Servo_Next
AddressMask	00E0 	BufferIHData, BIHD_PutInBuff
AllDataRXd	RX_ParseFlags,6	RS232_Parse, RS232_Parse_DALo_End
ANSELA	018C 	InitializeIO, InitializeBLIO
ANSELA_Val	0000 	InitializeIO, InitializeBLIO
ANSELB	018D 	InitializeIO, InitializeBLIO
ANSELB_Val	0000 	InitializeIO, InitializeBLIO
APFCON0	011D 	InitializeIO
BAUDCON	019F 	InitializeIO, InitializeBLIO
BAUDCON_Value	0008 	InitializeIO, InitializeBLIO
BaudRate	00CF 	InitializeIO, InitializeBLIO
BIHD_FlushBuff ^	1EAE 	BufferIHData
BIHD_PutInBuff ^	1EAF 	BufferIHData
BIHD_PutInBuff_E2 ^	1EB8 	BufferIHData
BIHD_PutInBuff_L1 ^	1EC2 	BIHD_PutInBuff_L1
BL_Parse ^	1E12 	BootLoaderStart
BL_ParseNextLine ^	1E13 	BLP_TestNum, BLP_TestNum_2, BLP_IHS_Length, BLP_IHS_CSum
		BLPV_Exit
BlockSize	0040 	BootLoaderStart
BlockWords	0020 	BIHD_PutInBuff_L1, TestErased, CompareBlock, EraseSourceBuffer, ReadProgBlock
		WriteProgBlock
BLP_IHS_AddrLSB ^	1E5B 	BLP_TestNum_2
BLP_IHS_AddrMSB ^	1E57 	BLP_TestNum_2
BLP_IHS_CSum ^	1E6F 	BLP_TestNum_2
BLP_IHS_Data ^	1E66 	BLP_TestNum_2
BLP_IHS_DataType ^	1E5F 	BLP_TestNum_2
BLP_IHS_Length ^	1E4B 	BLP_TestNum_2
BLP_L1 ^	1E17 	BLP_L2, BLP_NextState, BLP_IHS_Data
BLP_L2 ^	1E18 	BLP_TestNum, BLP_TestNum_1
BLP_NextState ^	1E55 	BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
BLP_SaveIH_Length ^	1E52 	BLP_IHS_Length
BLP_TestNum ^	1E21 	BLP_L2
BLP_TestNum_1 ^	1E36 	BLP_TestNum
BLP_TestNum_2 ^	1E3E 	BLP_TestNum_1
BLP_Validate ^	1E78 	BLP_IHS_CSum
BLP_WriteBuffer ^	1ECD 	BLPV_EndCmd, BIHD_FlushBuff, BIHD_PutInBuff_L1
BLP_WriteBuffer_end ^	1EDD 	BLP_WriteBuffer
BLPV_BadType ^	1E94 	BLP_Validate
BLPV_Data ^	1E8A 	BLP_Validate
BLPV_EndCmd ^	1E86 	BLP_Validate
BLPV_Exit ^	1E92 	BLPV_BadType
BLPV_Exit_Ack ^	1E91 	BLPV_Data
BLPV_HighAddr ^	1E8C 	BLP_Validate
BootLoader_End ^	1E10 	BootLoaderStart
BootLoaderStart ^	1E00 	, InitializeIO, BufferIHData
BSR	0008 	ProgStartVector
BufferIHData ^	1E96 	BLPV_Data
C	0000 	IdleServos_L1, IdleServos_L2, IdleServos_Accel_2, Store8Times, ClampInt_1
		ClampInt_tooHigh, ClampMinMax_1, Cmd_SetMode, BLP_TestNum, BLP_IHS_Length, BufferIHData
		BIHD_PutInBuff_L1
CalcdDwell	02E3 	IRQ_Servo1_PulseOrDwell, IRQ_Servo2_PulseOrDwell
CalcdDwellH	02E4 	IRQ_Servo1_PulseOrDwell, IRQ_Servo2_PulseOrDwell
CB_Next ^	1F43 	CompareBlock_L1
CB_NotBlank ^	1F3B 	CompareBlock_L1
CCP1CON	0293 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo_Next, IRQ_Servo1_IntOnly
		StartServos, InitializeIO
CCP1IE	0002 	StartServos, InitializeIO
CCP1IF	0002 	SystemTick_end, IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo_Next
		IRQ_Servo1_X
SimpleServo16PS.asm   X-Ref Table                                        Page: 44
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

CCP2CON	029A 	IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_IntOnly, StartServos
CCP2IE	0000 	StartServos
CCP2IF	0000 	SystemTick_end, IRQ_Servo_Next, IRQ_Servo2_X
CCP2SEL	0003 	InitializeIO
CCPCON_Clr	0009 	IRQ_Servo1_PulseOrDwell, IRQ_Servo2_PulseOrDwell
CCPCON_Int	000A 	IRQ_Servo1_InAct, IRQ_Servo_Next, IRQ_Servo1_IntOnly, IRQ_Servo2_IntOnly
		StartServos
CCPCON_Set	0008 	IRQ_Servo_Next
CCPR1H	0292 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo1_OL, IRQ_Servo_Next
		StartServos
CCPR1L	0291 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo1_OL, IRQ_Servo_Next
		StartServos
CCPR2H	0299 	IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_InAct, IRQ_Servo2_OL
		StartServos
CCPR2L	0298 	IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_InAct, IRQ_Servo2_OL
		StartServos
CFGS	0006 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
ChkSum	002D 	BootLoaderStart, BL_ParseNextLine, BLP_SaveIH_Length, BLP_IHS_AddrMSB
		BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
ClampInt_1 ^	040F 	Store8Times
ClampInt_tooHigh ^	041E 	Store8Times
ClampInt_tooLow ^	0419 	ClampInt_1
ClampMinMax_1 ^	0437 	ClampInt_tooHigh
ClampMinMax_too ^	0447 	ClampInt_tooHigh, ClampMinMax_1
ClearRam ^	002D 	InitializeIO
ClearRam_2 ^	003E 	ClearRam
ClearRam_L2 ^	0047 	ClearRam, ClearRam_2, ClearRam_L2
Cmd_GetAccel ^	08B7 	HandleRXData_1
Cmd_GetByte ^	08C0 	Cmd_GetMaxSpeed, Cmd_GetCurSpeed
Cmd_GetCmdPos ^	089A 	HandleRXData_1
Cmd_GetCurPos ^	0940 	Dispatcher_4
Cmd_GetCurSpeed ^	0936 	Dispatcher_4
Cmd_GetMax_uS ^	092B 	HandleRXData_1
Cmd_GetMaxSpeed ^	08F8 	HandleRXData_1
Cmd_GetMin_uS ^	0911 	HandleRXData_1
Cmd_GetMode ^	0884 	HandleRXData_1
Cmd_GetServoEnable ^	08DB 	HandleRXData_1
Cmd_GetServoEnable_1 ^	08E9 	Cmd_GetServoEnable
Cmd_GetStatus ^	0953 	Dispatcher_4
Cmd_GetWord ^	08A4 	Cmd_GetMin_uS, Cmd_GetMax_uS, Cmd_GetCurPos
Cmd_RestoreParams ^	094F 	Dispatcher_4
Cmd_RunBootloader ^	095E 	Dispatcher_4
Cmd_SaveParams ^	094B 	Dispatcher_4
Cmd_SendIDString ^	0970 	Dispatcher_6
Cmd_SendIDString_L1 ^	0971 	Cmd_SendIDString_L1
Cmd_SetAccel ^	08A9 	Dispatcher_1
Cmd_SetByte79 ^	08B4 	Cmd_SetMaxSpeed
Cmd_SetCmdPos ^	0887 	Dispatcher_1
Cmd_SetMasterAddr ^	0964 	Dispatcher_6
Cmd_SetMax_uS ^	091C 	Dispatcher_1
Cmd_SetMaxSpeed ^	08EC 	Dispatcher_1
Cmd_SetMin_uS ^	0902 	Dispatcher_1
Cmd_SetMode ^	087D 	Dispatcher_1
Cmd_SetServoEnable ^	08C3 	Dispatcher_1
Cmd_SetServoEnable_1 ^	08D6 	Cmd_SetServoEnable
Cmd_SetSlaveAddr ^	096A 	Dispatcher_6
Cmd_SetWord7879 ^	0895 	Cmd_SetMin_uS, Cmd_SetMax_uS
CMDServoIDX	02E0 	IdleServos, IdleServos_Update, IdleServos_Clamp, IdleServos_DisInt
		IdleServos_MovPlus, IdleServos_InPos, IdleServos_Next, IdleServos_Accel, IdleServos_Accel_2
		AccelDone, SaveSpeed, GetSpeed, GetMaxSpeed, GetAccelValue, SetFSR0ToServoFlags2
		SetFSR0ToServoFlags
CMDSigTime	2120 	IdleServos_Update, ServoInit16, Store8Times, Cmd_SetCmdPos, Cmd_GetCmdPos
CompareBlock ^	1F2C 	BLP_WriteBuffer
CompareBlock_L1 ^	1F2E 	CB_Next
CopyToRam ^	004C 	Cmd_RestoreParams, InitializeIO
CopyToRam_L1 ^	0051 	CopyToRam_L1
CREN	0004 	RX_TheByte_Err, GetChar_Err
CyclePulseEnd1	0002 	ISR_ServoCCP1, IRQ_Servo1_PulseOrDwell, IRQ_Servo1_OL
CyclePulseEnd2	0003 	ISR_ServoCCP2, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL
CyclePulseStart	0000 	ISR_ServoCCP1, IRQ_Servo1_PulseOrDwell, IRQ_Servo_Next, StartServos
DataInBuffer	IH_Flags,1	BootLoaderStart, BL_Parse, BLPV_EndCmd, BufferIHData, BIHD_PutInBuff_L1
		EraseSourceBuffer
DataReceivedFlag	SerFlags,1	TX_TheByte, ML_1
DataSentFlag	SerFlags,2	TX_TheByte, ML_Ser_Out
DecTimer ^	006E 	DecTimer4, DecTimer3, DecTimer2
DecTimer1 ^	006D 	ProgStartVector
DecTimer2 ^	006B 	ProgStartVector
DecTimer3 ^	0069 	ProgStartVector
DecTimer4 ^	0067 	ProgStartVector
DefaultAccel	0001 	ServoInit16
DefaultMaxSpeed	0030 	ServoInit16
DefaultSFlags	0022 	ServoInit16
DelayWuS ^	0090 	DecTimer
DelayWuS_Loop ^	0091 	DelayWuS_Loop
DestAddHiRXd	RX_ParseFlags,5	RS232_Parse
DestAddLoRXd	RX_ParseFlags,4	RS232_Parse, RS232_Parse_SALo_end
DestBuffer	2140 	BootLoaderStart, FSR1_DestBuff
Dispatcher_1 ^	082B 	HandleRXData_1
Dispatcher_2 ^	0841 	Dispatcher_1
Dispatcher_3 ^	0847 	Dispatcher_2
Dispatcher_4 ^	084D 	Dispatcher_3
Dispatcher_5 ^	0865 	Dispatcher_4
Dispatcher_6 ^	086D 	Dispatcher_5
DwellTime	21B0 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_OL, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL
EEAddrTemp	0024 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DelayWuS_Loop
		EERead, EEWriteW, EEWrite
EEADR	0191 	EERead, EEWrite
EEADRH	0192 	LoadProgAddr
SimpleServo16PS.asm   X-Ref Table                                        Page: 45
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

EEADRL	0191 	ReadEEData, WriteEEData, ReadProgBlock_1, LoadProgAddr, WriteProgBlock_L1
EECON1	0195 	EERead, EEWrite, EEWriteLoop, ReadEEData, WriteEEData, WriteEEData_L1
		ReadProgBlock, ReadProgBlock_L1, EraseProgBlock, WriteProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
EECON2	0196 	EEWrite, WriteEEData, EraseProgBlock, WriteProgBlock_L1, WriteProgBlock_Wr
EEDAT	0193 	EERead, EEWrite
EEDataTemp	0025 	SaveParams_L1, EEWrite, Cmd_RunBootloader
EEDATH	0194 	ReadProgBlock_L1, WriteProgBlock_L1
EEDATL	0193 	ReadEEData, WriteEEData, ReadProgBlock_L1, WriteProgBlock_L1
EEPGD	0007 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
EERead ^	0097 	CopyToRam_L1
EEWrite ^	00A1 	SaveParams_L1
EEWriteLoop ^	00B3 	EEWriteLoop
EEWriteW ^	00A0 	Cmd_RunBootloader
Enable0_7	LATA,3	StartServos
Enable8_15	LATA,4	StartServos
EraseBlock_L1 ^	1F4A 	EraseBlock_L1
EraseProgBlock ^	1F63 	BLP_WriteBuffer
EraseSourceBuffer ^	1F46 	BootLoaderStart, BLP_WriteBuffer_end
F	0001 	ProgStartVector, ClearRam, ClearRam_L2, CopyToRam_L1, SaveParams_L1, DecTimer
		DelayWuS_Loop, StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse, RS232_Parse_Byte
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_ClearTXData_L1
		RS232_Send, RS232_Send_L1, IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo1_OL
		IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_InAct, IRQ_Servo2_OL, IdleServos_Update
		IdleServos_DecAcc, IdleServos_Minus, IdleServos_DisInt, IdleServos_MovPlus, IdleServos_IncAcc
		IdleServos_Plus, IdleServos_Accel_2, SaveSpeed, GetSpeed, GetMaxSpeed, GetAccelValue
		SetFSR0ToServoFlags2, SetFSR0ToServoFlags, ServoInit16, StoreWord16Times_L1, StoreXTimes_L1
		Store8Times, ClampInt_tooHigh, ClampMinMax_1, Cmd_SetCmdPos, Cmd_GetCmdPos, Cmd_SetAccel
		Cmd_GetAccel, Cmd_SetServoEnable, Cmd_GetServoEnable, Cmd_SetMaxSpeed, Cmd_GetMaxSpeed
		Cmd_SetMin_uS, Cmd_GetMin_uS, Cmd_SetMax_uS, Cmd_GetMax_uS, Cmd_GetCurSpeed, Cmd_GetCurPos
		Cmd_SendIDString_L1, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2, BLP_SaveIH_Length
		BLP_NextState, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
		BufferIHData, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, TestErased_L1, CB_Next, EraseBlock_L1
		ReadProgBlock_L1, ReadProgBlock_1, WriteProgBlock_L1
FERR	0002 	RX_TheByte_Err, GetChar_Err
FirstRAMParam	SysMode	CopyToRam, SaveParams
FlushInBuff ^	00F2 	RS232_Parse_Error
FREE	0004 	EraseProgBlock
FSR0	0004 	ClearRam, ClearRam_2, ClearRam_L2, StoreSerIn, StoreSerOut, HandleRXData_1
FSR0_SerialBuffer ^	1EDE 	BL_ParseNextLine, BLPV_HighAddr, BIHD_PutInBuff_E2
FSR0H	0005 	ProgStartVector, ClearRam, CopyToRam, SaveParams, DecTimer, StoreSerIn
		GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, IRQ_Servo1_PulseOrDwell
		IRQ_Servo1_OL, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL, IdleServos_Update, IdleServos_Accel_2
		SaveSpeed, GetSpeed, GetMaxSpeed, GetAccelValue, SetFSR0ToServoFlags2, SetFSR0ToServoFlags
		ServoInit16, Store8Times, ClampInt_tooHigh, ClampMinMax_1, BLP_WriteBuffer, FSR0_SerialBuffer
FSR0L	0004 	ProgStartVector, CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DecTimer
		GetSerIn, GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, IRQ_Servo1_PulseOrDwell
		IRQ_Servo1_OL, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL, IdleServos_Update, IdleServos_Accel_2
		SaveSpeed, GetSpeed, GetMaxSpeed, GetAccelValue, SetFSR0ToServoFlags2, SetFSR0ToServoFlags
		ServoInit16, Store8Times, ClampInt_tooHigh, ClampMinMax_1, BLP_WriteBuffer, FSR0_SerialBuffer
FSR1	0006 	HandleRXData_1
FSR1_DestBuff ^	1EE3 	BLP_WriteBuffer
FSR1_SourceBuffer ^	1EE8 	BLP_WriteBuffer, EraseSourceBuffer
FSR1H	0007 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, IRQ_Servo1_PulseOrDwell
		IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IdleServos_Update, IdleServos_DisInt, Cmd_SetCmdPos
		Cmd_GetCmdPos, Cmd_SetAccel, Cmd_GetAccel, Cmd_SetServoEnable, Cmd_GetServoEnable
		Cmd_SetMaxSpeed, Cmd_GetMaxSpeed, Cmd_SetMin_uS, Cmd_GetMin_uS, Cmd_SetMax_uS, Cmd_GetMax_uS
		Cmd_GetCurSpeed, Cmd_GetCurPos, BIHD_PutInBuff_E2, FSR1_DestBuff, FSR1_SourceBuffer
FSR1L	0006 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, IRQ_Servo1_PulseOrDwell
		IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IdleServos_Update, IdleServos_Minus, IdleServos_DisInt
		IdleServos_Plus, Cmd_SetCmdPos, Cmd_GetCmdPos, Cmd_SetAccel, Cmd_GetAccel, Cmd_SetServoEnable
		Cmd_GetServoEnable, Cmd_SetMaxSpeed, Cmd_GetMaxSpeed, Cmd_SetMin_uS, Cmd_GetMin_uS
		Cmd_SetMax_uS, Cmd_GetMax_uS, Cmd_GetCurSpeed, Cmd_GetCurPos, BIHD_PutInBuff_E2
		FSR1_DestBuff, FSR1_SourceBuffer
GetAccelValue ^	035B 	IdleServos_Accel_2
GetChar ^	1EED 	BLP_L2, GetChar, GetChar_Err
GetChar_Err ^	1EF8 	GetChar
GetMaxSpeed ^	0353 	IdleServos_Accel_2
GetSerIn ^	00E1 	RS232_Parse_Byte
GetSerIn_End ^	00F0 	GetSerIn
GetSerInBytes ^	00F8 	MainLoop
GetSerOut ^	0116 	ML_Ser_Out
GetSerOut_End ^	0125 	GetSerOut
GetSpeed ^	034B 	IdleServos_Update, IdleServos_MovPlus, IdleServos_Accel_2
GIE	0007 	EEWrite, EEWriteLoop, IdleServos_DisInt, InitializeIO, InitializeBLIO
HandleRXData ^	0804 	MainLoop
HandleRXData_1 ^	080A 	HandleRXData
HandleRXData_Rtn ^	0808 	Cmd_SetMode
IdleServos ^	0299 	ML_1
IdleServos_Accel ^	0317 	IdleServos_Update
IdleServos_Accel_1 ^	031D 	IdleServos_Accel
IdleServos_Accel_2 ^	031F 	IdleServos_Accel
IdleServos_Clamp ^	02E3 	IdleServos_Plus
IdleServos_DecAcc ^	02DA 	IdleServos_L1
IdleServos_DisInt ^	02E4 	IdleServos_DisInt
IdleServos_IncAcc ^	0304 	IdleServos_L2
IdleServos_InPos ^	030E 	IdleServos_Update
IdleServos_L1 ^	02D3 	IdleServos_DecAcc
IdleServos_L2 ^	02FD 	IdleServos_IncAcc
IdleServos_Minus ^	02DC 	IdleServos_Update, IdleServos_L1
IdleServos_MovPlus ^	02F4 	IdleServos_Update
IdleServos_Next ^	0313 	IdleServos, IdleServos8_15, IdleServos_DisInt
IdleServos_Plus ^	0306 	IdleServos_MovPlus, IdleServos_L2
IdleServos_Update ^	02A6 	IdleServos
IdleServos8_15 ^	02A2 	IdleServos
IDString ^	0979 	Cmd_SendIDString_L1
IH_Ack	002A 	BootLoaderStart, BLPV_EndCmd, BLPV_Exit_Ack
IH_Addr_Hi	0025 	BootLoaderStart, BLPV_HighAddr, BufferIHData
SimpleServo16PS.asm   X-Ref Table                                        Page: 46
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

IH_Addr_Lo	0023 	BootLoaderStart, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BufferIHData
		BIHD_PutInBuff
IH_ByteCount	0028 	BootLoaderStart, BL_ParseNextLine, BLP_IHS_Data, BIHD_PutInBuff_E2
IH_Bytes	0027 	BootLoaderStart, BLP_SaveIH_Length, BLP_IHS_DataType, BLP_IHS_Data
IH_ErrorBadCSum	002D 	BLP_IHS_CSum
IH_ErrorBadLen	002B 	BLP_IHS_Length
IH_ErrorBadType	003D 	BLPV_BadType
IH_Flags	002C 	BootLoaderStart, BL_Parse, BLP_L1, BLP_TestNum_1, BLPV_EndCmd, BufferIHData
		BIHD_PutInBuff_L1, EraseSourceBuffer
IH_State	002A 	BootLoaderStart, BL_ParseNextLine, BLP_L2, BLP_TestNum, BLP_TestNum_2
		BLP_NextState, BLP_IHS_DataType
IH_TempVal	002B 	BootLoaderStart, BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_Length, BLP_SaveIH_Length
		BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
IH_Type	0029 	BootLoaderStart, BLP_IHS_DataType, BLP_Validate
IHS_Length	0001 	BLP_L2
INDF0	0000 	ProgStartVector, ClearRam_L2, DecTimer, StoreSerIn, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse_DALo_End, IdleServos, IdleServos8_15, IdleServos_Update
		IdleServos_MovPlus, IdleServos_InPos, IdleServos_Accel, IdleServos_Accel_1, IdleServos_Accel_2
		AccelDone, SaveSpeed, GetSpeed, GetMaxSpeed, GetAccelValue, Store8Times, ClampInt_tooHigh
		ClampMinMax_1, ClampMinMax_too, Cmd_GetServoEnable, Cmd_GetServoEnable_1
INDF1	0001 	IRQ_Servo1_PulseOrDwell, IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IdleServos_Update
		IdleServos_Minus, IdleServos_Plus, Cmd_SetMode, Cmd_SetServoEnable, Cmd_SetServoEnable_1
		Cmd_GetServoEnable, Cmd_GetServoEnable_1
InitializeBLIO ^	1F9E 	BootLoaderStart
InitializeIO ^	0994 	start
InPositionFlag0_7	0001 	IdleServos_Update, IdleServos_InPos, Store8Times
InPositionFlag8_15	0005 	IdleServos_Update, IdleServos_InPos, Store8Times
INTCON	000B 	EEWrite, EEWriteLoop, IdleServos_DisInt, InitializeIO, InitializeBLIO
IRQ_Servo_Next ^	0228 	ISR_ServoCCP1
IRQ_Servo1_InAct ^	0211 	IRQ_Servo1_PulseOrDwell
IRQ_Servo1_IntOnly ^	024E 	IRQ_Servo1_OL
IRQ_Servo1_OL ^	021B 	ISR_ServoCCP1
IRQ_Servo1_PulseOrDwell ^	01E5 	ISR_ServoCCP1
IRQ_Servo1_X ^	0250 	ISR_ServoCCP1
IRQ_Servo2_InAct ^	0283 	IRQ_Servo2_PulseOrDwell
IRQ_Servo2_IntOnly ^	0294 	IRQ_Servo2_InAct
IRQ_Servo2_OL ^	0288 	ISR_ServoCCP2
IRQ_Servo2_PulseOrDwell ^	0257 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct
IRQ_Servo2_X ^	0296 	ISR_ServoCCP2, IRQ_Servo2_PulseOrDwell
ISR_ServoCCP1 ^	01DD 	SystemTick_end
ISR_ServoCCP2 ^	0253 	SystemTick_end
kCenterPulseWidth	0BB8 	ServoInit16
kMaxMode	0000 	Cmd_SetMode
kMaxPulseWidth	1068 	ServoInit16, Store8Times, ClampInt_tooHigh
kMinPulseWidth	0708 	ServoInit16, ClampInt_1, ClampInt_tooLow
kRS232_MasterAddr	0001 	InitializeBLIO
kRS232_SlaveAddr	0002 	InitializeBLIO
kRS232SyncByteValue	00DD 	RS232_Parse_Byte, RS232_Parse_Sync2
kServoAddrTime	01F4 	IRQ_Servo_Next
kServoDwellTime	1388 	ServoInit16
kServoDwellTimeA	1194 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo2_PulseOrDwell
		IRQ_Servo2_InAct
kssFlags	0000 	InitializeBLIO
kSysMode	0000 	InitializeBLIO
LastRAMParam	SysFlags	CopyToRam_L1, SaveParams_L1
LATA	010C 	IRQ_Servo_Next, StartServos
LED1_Bit	0000 	ProgStartVector
LED2_Bit	0004 	ProgStartVector
LED2_Flag	SysFlags,3	ProgStartVector
LED3_Bit	0005 	ProgStartVector
LED3_Flag	SysFlags,4	ProgStartVector
LEDTIME	0064 	InitializeIO
LoadProgAddr ^	1F72 	ReadProgBlock, EraseProgBlock, WriteProgBlock
LWLO	0005 	WriteProgBlock, WriteProgBlock_Wr
MainLoop ^	01C0 	ML_Ser_End
MaxTime	2160 	ClampInt_tooHigh, Cmd_SetMax_uS, Cmd_GetMax_uS
MinTime	2140 	ClampMinMax_1, Cmd_SetMin_uS, Cmd_GetMin_uS
ML_1 ^	01CA 	MainLoop
ML_Ser_End ^	01DC 	ML_Ser_Out
ML_Ser_Out ^	01D5 	ML_1
MovingFWD0_7	0003 	IdleServos_Update, IdleServos_MovPlus
MovingFWD8_15	0007 	IdleServos_Update, IdleServos_MovPlus
MSN_Done	IH_Flags,0	BootLoaderStart, BLP_L1, BLP_TestNum_1
NOT_WPUEN	0007 	InitializeIO, InitializeBLIO
nvFirstParamByte	nvSysMode	InitializeBLIO, CopyToRam, SaveParams
nvLastParamByte	nvSysFlags	InitializeBLIO
nvRS232_MasterAddr	0001 	InitializeBLIO
nvRS232_SlaveAddr	0002 	InitializeBLIO
nvssFlags	0003 	InitializeBLIO
nvSysFlags	0004 	InitializeBLIO
nvSysMode	0000 	InitializeBLIO, CopyToRam, SaveParams
OERR	0001 	RX_TheByte_Err, GetChar_Err
oldCode	0000 	DecTimer, Store8Times
OPTION_REG	0095 	InitializeIO, InitializeBLIO
OSCCON	0099 	InitializeIO, InitializeBLIO
OSCCON_Value	00F0 	InitializeIO, InitializeBLIO
Param77	0077 	DelayWuS, DelayWuS_Loop, CompareBlock_L1, CB_NotBlank
Param78	0078 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_Byte, RS232_Parse_Sync2
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
		RS232_Parse_L1, RS232_ClearTXData, RS232_ClearTXData_L1, ML_Ser_Out, IdleServos_Update
		IdleServos_L1, IdleServos_DecAcc, IdleServos_Minus, IdleServos_MovPlus, IdleServos_L2
		IdleServos_IncAcc, IdleServos_Plus, IdleServos_Accel_2, SaveSpeed, ServoInit16
		StoreWord16Times_L1, Store16Times, StoreXTimes, Store8Times, ClampInt_tooHigh, ClampMinMax_1
		HandleRXData_1, Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5
		Cmd_SetCmdPos, Cmd_GetCmdPos, Cmd_SetAccel, Cmd_GetAccel, Cmd_SetServoEnable, Cmd_SetServoEnable_1
		Cmd_GetServoEnable, Cmd_SetMaxSpeed, Cmd_GetMaxSpeed, Cmd_SetMin_uS, Cmd_GetMin_uS
		Cmd_SetMax_uS, Cmd_GetMax_uS, Cmd_GetCurSpeed, Cmd_GetCurPos, BLP_L2, BLP_TestNum
		BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_CSum, BufferIHData, CompareBlock_L1, CB_NotBlank
Param79	0079 	RS232_Send, RS232_Send_L1, IdleServos_Accel_2, ServoInit16, StoreWord16Times_L1
SimpleServo16PS.asm   X-Ref Table                                        Page: 47
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

		StoreXTimes, StoreXTimes_L1, Cmd_SetCmdPos, Cmd_SetWord7879, Cmd_SetAccel, Cmd_SetByte79
		Cmd_SetServoEnable, Cmd_SetMaxSpeed, Cmd_SetMin_uS, Cmd_SetMax_uS, Cmd_SendIDString
		Cmd_SendIDString_L1, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, TestErased, TestErased_L1
		CompareBlock, CB_Next, EraseSourceBuffer, EraseBlock_L1, ReadProgBlock, ReadProgBlock_L1
		WriteProgBlock
Param7A	007A 	RS232_Send, RS232_Send_L1, StoreWord16Times, StoreWord16Times_L1, Cmd_SetCmdPos
		Cmd_SetWord7879, Cmd_SetMin_uS, Cmd_SetMax_uS
Param7C	007C 	IdleServos_Update, IdleServos_L1, IdleServos_Minus, IdleServos_DisInt
		IdleServos_L2, IdleServos_Plus, Store8Times, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh
		ClampMinMax_1, ClampMinMax_too
Param7D	007D 	IdleServos_Update, IdleServos_Minus, IdleServos_DisInt, IdleServos_MovPlus
		IdleServos_Plus, Store8Times, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh, ClampMinMax_1
		ClampMinMax_too
Param7F	007F 	ClearRam, ClearRam_2, ClearRam_L2
PCLATH	000A 	ProgStartVector
PEIE	0006 	InitializeIO
PIE1	0091 	StartServos, InitializeIO
PIE2	0092 	StartServos
PIR1	0011 	ProgStartVector, SystemTick_end, ML_1, IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct
		IRQ_Servo_Next, IRQ_Servo1_X, GetChar, SendChar
PIR2	0012 	SystemTick_end, IRQ_Servo_Next, IRQ_Servo2_X
POP_SerOut_End ^	0114 	StoreSerOut
PORTA	000C 	InitializeIO, InitializeBLIO
PortADDRBits	0060 	InitializeIO, InitializeBLIO
PortAValue	0018 	InitializeIO, InitializeBLIO
PORTB	000D 	ProgStartVector, InitializeIO, InitializeBLIO
PortBDDRBits	00F7 	InitializeIO, InitializeBLIO
PortBValue	0004 	InitializeIO, InitializeBLIO
PR2	001B 	InitializeIO
PR2_Value	007D 	InitializeIO
PROG_ADDR_HI	0021 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PROG_ADDR_LO	0020 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
ProgStartVector ^	0002 	BootLoader_End
ProgWordCount	0022 	BootLoaderStart, BIHD_PutInBuff, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
PS0	0000 	InitializeIO, InitializeBLIO
PS1	0001 	InitializeIO, InitializeBLIO
PS2	0002 	InitializeIO, InitializeBLIO
PSA	0003 	InitializeIO, InitializeBLIO
RCIE	0005 	InitializeIO
RCIF	0005 	GetChar
RCREG	0199 	TX_TheByte, RX_TheByte_Err, GetChar, GetChar_Err
RCSTA	019D 	TX_TheByte, RX_TheByte_Err, InitializeIO, GetChar, GetChar_Err, InitializeBLIO
RCSTA_Value	0090 	InitializeIO, InitializeBLIO
RD	0000 	EERead, ReadEEData, ReadProgBlock_L1
ReadEEData ^	1F04 	BootLoaderStart
ReadProgBlock ^	1F51 	BLP_WriteBuffer
ReadProgBlock_1 ^	1F61 	ReadProgBlock_L1
ReadProgBlock_L1 ^	1F56 	ReadProgBlock_1
RP_DataBytes	0004 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_ClearTXData
		RS232_Send
RP_LongAddr	0000 	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Send
RS232_ClearTXData ^	0197 	RS232_Send_L1
RS232_ClearTXData_L1 ^	019F 	RS232_ClearTXData_L1
RS232_MasterAddr	0038 	RS232_Parse_SALo, RS232_Send, Cmd_SetMasterAddr
RS232_Parse ^	0127 	MainLoop
RS232_Parse_Byte ^	0132 	RS232_Parse
RS232_Parse_DALo_End ^	0169 	RS232_Parse_SALo_end
RS232_Parse_Data_end ^	017A 	RS232_Parse_DALo_End
RS232_Parse_Error ^	0195 	RS232_Parse_Sync2, RS232_Parse_Data_end
RS232_Parse_L1 ^	0188 	RS232_Parse_L1
RS232_Parse_Rtn ^	0159 	RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo_end
		RS232_Parse_DALo_End
RS232_Parse_SALo ^	0149 	RS232_Parse_Sync2
RS232_Parse_SALo_end ^	015B 	RS232_Parse_SALo
RS232_Parse_Sync2 ^	0141 	RS232_Parse_Byte
RS232_Send ^	01A4 	RS232_Send_S0
RS232_Send_L1 ^	01B3 	RS232_Send_L1
RS232_Send_S0 ^	0800 	Cmd_GetMode, Cmd_GetWord, Cmd_GetByte, Cmd_GetServoEnable, Cmd_GetServoEnable_1
		Cmd_GetStatus, Cmd_SetMasterAddr, Cmd_SetSlaveAddr
RS232_SlaveAddr	0039 	RS232_Parse_SALo_end, RS232_Send, Cmd_SetSlaveAddr
RX_CSUM	00A3 	RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_Data	00AA 	RS232_Parse_Data_end, HandleRXData_1
RX_DataCount	00A2 	RS232_Parse_SALo, RS232_Parse_DALo_End
RX_DstAdd	00A5 	RS232_Parse_SALo_end
RX_Flags	00A1 	RS232_Parse, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_L1
		MainLoop, HandleRXData
RX_ParseFlags	00A0 	RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo
		RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_Parse_Error
RX_SrcAdd	00A4 	RS232_Parse_SALo
RX_TempData	00A6 	RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_TheByte_Err ^	00CB 	TX_TheByte
RXByte	002F 	TX_TheByte, RX_TheByte_Err, ML_1
RXDataIsNew	RX_Flags,1	RS232_Parse, RS232_Parse_L1, MainLoop, HandleRXData
RXDataValidFlag	RX_Flags,0	RS232_Parse, RS232_Parse_L1, HandleRXData
RXDstIsMe	RX_Flags,3	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_L1
RXSrcIsMaster	RX_Flags,2	RS232_Parse, RS232_Parse_SALo, RS232_Parse_L1
RXTimeout	0005 	RS232_Parse_Byte
SaveParams ^	0059 	Cmd_SaveParams, Cmd_SetMasterAddr, Cmd_SetSlaveAddr
SaveParams_L1 ^	005E 	SaveParams_L1
SaveSpeed ^	0342 	IdleServos_Accel_2
SendChar ^	1EFE 	BootLoaderStart, BLP_IHS_Length, BLP_IHS_CSum, BLPV_EndCmd, BLPV_Exit
		SendChar
Ser_Buff_Bank	2	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes, StoreSerOut, GetSerOut
Ser_In_Buff	0126 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut
Ser_In_Bytes	0120 	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes
Ser_In_InPtr	0122 	StoreSerIn, FlushInBuff
Ser_In_OutPtr	0123 	GetSerIn, FlushInBuff
Ser_Out_Buff	0146 	StoreSerOut, GetSerOut
Ser_Out_Bytes	0121 	GetSerInBytes, StoreSerOut, GetSerOut
SimpleServo16PS.asm   X-Ref Table                                        Page: 48
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

Ser_Out_InPtr	0124 	StoreSerOut
Ser_Out_OutPtr	0125 	GetSerOut
SerFlags	0030 	TX_TheByte, ML_1, ML_Ser_Out
SerialBuffer	2180 	BootLoaderStart, FSR0_SerialBuffer
ServoAccelValue	2100 	GetAccelValue, Cmd_SetAccel, Cmd_GetAccel
ServoCtlFlags	02E2 	ISR_ServoCCP1, IRQ_Servo1_PulseOrDwell, IRQ_Servo1_InAct, IRQ_Servo1_OL
		IRQ_Servo_Next, ISR_ServoCCP2, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL, StartServos
ServoCurSpeed	2110 	SaveSpeed, GetSpeed, Store8Times, Cmd_GetCurSpeed
ServoFlags	2180 	IRQ_Servo1_PulseOrDwell, IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell
		SetFSR0ToServoFlags, Store8Times, Cmd_SetServoEnable, Cmd_GetServoEnable
ServoFlags2	2188 	SetFSR0ToServoFlags2, Store8Times
ServoIDX	02E1 	IRQ_Servo1_PulseOrDwell, IRQ_Servo1_OL, IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell
		IRQ_Servo2_OL
ServoInit16 ^	0384 	start
ServoMaxSpeed	20F0 	GetMaxSpeed, ServoInit16, Cmd_SetMaxSpeed, Cmd_GetMaxSpeed
ServoOnBit0_7	0002 	IRQ_Servo1_PulseOrDwell, IRQ_Servo_Next, IdleServos, Store8Times
		Cmd_SetServoEnable, Cmd_SetServoEnable_1, Cmd_GetServoEnable
ServoOnBit8_15	0006 	IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IdleServos8_15, Store8Times
		Cmd_SetServoEnable, Cmd_SetServoEnable_1, Cmd_GetServoEnable_1
SetFSR0ToServoFlags ^	036B 	IdleServos, IdleServos_Update, IdleServos_InPos
SetFSR0ToServoFlags2 ^	0363 	IdleServos_Accel, AccelDone
SigOutTime	2190 	IRQ_Servo1_PulseOrDwell, IRQ_Servo2_PulseOrDwell, IdleServos_Update
		IdleServos_DisInt, ServoInit16, Cmd_GetCurPos
SourceAddHiRXd	RX_ParseFlags,3	RS232_Parse
SourceAddLoRXd	RX_ParseFlags,2	RS232_Parse, RS232_Parse_SALo
SourceBuffer	2100 	BootLoaderStart, BIHD_PutInBuff_E2, BLP_WriteBuffer, FSR1_SourceBuffer
SPBRGH	019C 	InitializeIO, InitializeBLIO
SPBRGL	019B 	InitializeIO, InitializeBLIO
ssRX_Timeout	ssStatus,3	RS232_Parse, Cmd_GetStatus
ssStatus	0031 	RS232_Parse, Cmd_GetStatus
start ^	01BB 	ProgStartVector, ML_1
StartServos ^	0373 	start
STATUS	0003 	CopyToRam_L1, SaveParams_L1, DecTimer, TX_TheByte, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end
		RS232_Parse_DALo_End, RS232_Parse_Data_end, MainLoop, IdleServos_Update, IdleServos_L1
		IdleServos_MovPlus, IdleServos_L2, IdleServos_Accel_2, Store8Times, ClampInt_1
		ClampInt_tooHigh, ClampMinMax_1, HandleRXData_1, Dispatcher_1, Dispatcher_2, Dispatcher_3
		Dispatcher_4, Dispatcher_5, Cmd_SetMode, Cmd_SendIDString_L1, BootLoaderStart, BLP_L2
		BLP_TestNum, BLP_IHS_Length, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate
		BufferIHData, BIHD_PutInBuff_L1, GetChar, TestErased_L1, CompareBlock_L1, CB_NotBlank
		WriteProgBlock_L1
Store16Times ^	03BF 	ServoInit16
Store8Times ^	03C7 	ServoInit16
StoreSerIn ^	00D3 	ML_1
StoreSerOut ^	0100 	RS232_Send, RS232_Send_L1, StoreSerOut_S0
StoreSerOut_S0 ^	0990 	Cmd_SendIDString_L1
StoreWord16Times ^	03B6 	ServoInit16
StoreWord16Times_L1 ^	03B8 	StoreWord16Times_L1
StoreXTimes ^	03C1 	Store8Times
StoreXTimes_L1 ^	03C3 	StoreXTimes_L1
SW1_Flag	SysFlags,0	ProgStartVector, ML_1
SW1_In	PORTB,0	ProgStartVector
SW2_Flag	SysFlags,1	ProgStartVector
SW2_In	PORTB,4	ProgStartVector
SW3_Flag	SysFlags,2	ProgStartVector
SW3_In	PORTB,5	ProgStartVector
SyncByte1RXd	RX_ParseFlags,0	RS232_Parse, RS232_Parse_Byte
SyncByte2RXd	RX_ParseFlags,1	RS232_Parse, RS232_Parse_Sync2
SysFlags	003B 	ProgStartVector, CopyToRam_L1, SaveParams_L1, ML_1
SysLED_Count	0023 	ProgStartVector, InitializeIO
SysLED_Time	0020 	ProgStartVector, InitializeIO
SysMode	0037 	CopyToRam, SaveParams, Cmd_SetMode, Cmd_GetMode
SystemTick_end ^	0027 	ProgStartVector
T1CON	0018 	InitializeIO
T1CON_Val	0001 	InitializeIO
T1GCON	0019 	InitializeIO
T2CON	001C 	InitializeIO
T2CON_Value	004F 	InitializeIO
TestErased ^	1F1F 	BLP_WriteBuffer
TestErased_L1 ^	1F21 	TestErased_L1
Timer1Hi	0027 	DecTimer1, DecTimer
Timer1Lo	0026 	DecTimer, RS232_Parse, RS232_Parse_Byte
Timer2Hi	0029 	DecTimer2, DecTimer
Timer2Lo	0028 	DecTimer
Timer3Hi	002B 	DecTimer3, DecTimer
Timer3Lo	002A 	DecTimer
Timer4Hi	002D 	DecTimer4, DecTimer
Timer4Lo	002C 	DecTimer, InitializeIO
TMR0CS	0005 	InitializeIO, InitializeBLIO
TMR1GE	0007 	InitializeIO
TMR2_Done ^	0027 	ProgStartVector
TMR2IE	0001 	InitializeIO
TMR2IF	0001 	ProgStartVector
TRISA	008C 	InitializeIO, InitializeBLIO
TRISB	008D 	ProgStartVector, InitializeIO, InitializeBLIO
TX_ACK ^	098F 	Cmd_SetMode, Cmd_SetWord7879, Cmd_SetByte79, Cmd_SetServoEnable, Cmd_SetServoEnable_1
		Cmd_SaveParams, Cmd_RestoreParams
TX_Data	00AE 	RS232_ClearTXData, RS232_Send, HandleRXData_1
TX_TheByte ^	00B9 	ML_1
TXByte	002E 	TX_TheByte, ML_Ser_Out
TXIF	0004 	ML_1, SendChar
TXREG	019A 	TX_TheByte, SendChar
TXSTA	019E 	InitializeIO, InitializeBLIO
TXSTA_Value	0024 	InitializeIO, InitializeBLIO
UseAltSerialPort	0000 	InitializeBLIO
UseEEParams	0001 	ClearRam, CopyToRam
useRS232	0001 	InitializeIO
UseRS232Chksum	0001 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_Send_L1
UseRS232SendSyncBytes	0000 	RS232_Parse, RS232_Send
SimpleServo16PS.asm   X-Ref Table                                        Page: 49
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

UseRS232SyncBytes	0001 	RS232_Parse, RS232_Parse_Byte
ValueSentFlag0_7	0000 	IRQ_Servo1_PulseOrDwell, IdleServos, IdleServos_Update
ValueSentFlag8_15	0004 	IRQ_Servo2_PulseOrDwell, IdleServos8_15, IdleServos_Update
W	0000 	ProgStartVector, CopyToRam_L1, SaveParams_L1, DecTimer, EERead, EEWrite, TX_TheByte
		RX_TheByte_Err, StoreSerIn, GetSerIn, GetSerInBytes, StoreSerOut, GetSerOut, RS232_Parse_Byte
		RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End
		RS232_Parse_Data_end, RS232_Send, RS232_Send_L1, ML_1, IRQ_Servo1_PulseOrDwell
		IRQ_Servo1_OL, IRQ_Servo_Next, IRQ_Servo2_PulseOrDwell, IRQ_Servo2_OL, IdleServos_Update
		IdleServos_L1, IdleServos_Minus, IdleServos_Clamp, IdleServos_DisInt, IdleServos_L2
		IdleServos_Plus, IdleServos_Next, IdleServos_Accel_2, SaveSpeed, GetSpeed, GetMaxSpeed
		GetAccelValue, SetFSR0ToServoFlags2, SetFSR0ToServoFlags, StoreWord16Times_L1, StoreXTimes
		Store8Times, ClampInt_1, ClampInt_tooHigh, ClampMinMax_1, ClampMinMax_too, HandleRXData_1
		Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetMode
		Cmd_GetMode, Cmd_SetCmdPos, Cmd_SetWord7879, Cmd_GetCmdPos, Cmd_SetAccel, Cmd_SetByte79
		Cmd_GetAccel, Cmd_SetServoEnable, Cmd_SetMaxSpeed, Cmd_GetMaxSpeed, Cmd_SetMin_uS
		Cmd_GetMin_uS, Cmd_SetMax_uS, Cmd_GetMax_uS, Cmd_GetCurSpeed, Cmd_GetCurPos, Cmd_GetStatus
		Cmd_SendIDString_L1, BLP_L2, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_Length
		BLP_SaveIH_Length, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
		BLP_IHS_CSum, BLP_Validate, BufferIHData, BIHD_PutInBuff, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
		GetChar, GetChar_Err, ReadEEData, CompareBlock_L1, CB_NotBlank, ReadProgBlock_L1
		LoadProgAddr, WriteProgBlock_L1
WDTCON	0097 	InitializeIO, InitializeBLIO
WPUA	020C 	InitializeIO, InitializeBLIO
WPUA5	0005 	InitializeIO, InitializeBLIO
WR	0001 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
WREG	0009 	BLP_WriteBuffer
WREN	0002 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock
		WriteProgBlock_Wr
WriteEEData ^	1F0D 	BootLoaderStart
WriteEEData_L1 ^	1F1A 	WriteEEData_L1
WriteProgBlock ^	1F7A 	BLP_WriteBuffer
WriteProgBlock_L1 ^	1F81 	WriteProgBlock_L1
WriteProgBlock_Wr ^	1F93 	WriteProgBlock_L1
Z	0002 	CopyToRam_L1, SaveParams_L1, DecTimer, TX_TheByte, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end
		RS232_Parse_DALo_End, RS232_Parse_Data_end, MainLoop, IdleServos_Update, IdleServos_MovPlus
		IdleServos_Accel_2, Store8Times, ClampInt_1, ClampInt_tooHigh, ClampMinMax_1, HandleRXData_1
		Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SendIDString_L1
		BootLoaderStart, BLP_L2, BLP_TestNum, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
		BLP_Validate, BufferIHData, BIHD_PutInBuff_L1, GetChar, TestErased_L1, CompareBlock_L1
		CB_NotBlank, WriteProgBlock_L1
 

X-Ref Table (The UnCalled)
BootLoader !	1E00 	
ClampInt !	0402 	
ClampMinMax !	0423 	
Delay100uS !	008D 	
Delay10uS !	008B 	
Delay40uS !	008F 	
EEReadW !	0096 	
EraseBlock !	1F48 	
GetSerOutBytes !	00FC 	
IRQ_Servo2_End !	0298 	
POP_SerOut !	010E 	
RS232_Parse_DALo !	015B 	
RS232_Parse_Data !	0169 	
RX_TheByte !	00C1 	
StartMotion !	03CA 	
TestT1_Zero !	0087 	
TestT2_Zero !	0083 	
TestT3_Zero !	007F 	
TestT4_Zero !	007B 	
WriteProgBlock_end !	1F9C 	
 

Memory Usage Map ('X' = Used, '-' = Unused)
 
0000  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440  : XXXXXXXXXXXX---- ---------------- ---------------- ----------------
0800  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXX------------- ----------------
1E00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1EC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
SimpleServo16PS.asm   Memory Usage Map                                   Page: 50
/Users/davidflynn/Projects/SimpleServoCtrl16/FirmwarePS/

1F00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1FC0  : XXXXXXXX-------- ---------------- ---------------- ----------------
 
Program Memory Words Used:2039
Program Memory Words Free:6153
 
UserID
8000  :XXXX
 
Config
8007  :XX
 
EEPROM
F000  : XXXXX----------- ---------------- ---------------- ----------------
F0C0  : ---------------- ---------------- ---------------- ---------------X
 
Data EEPROM Bytes Used:6
Data EEPROM Bytes Free:250
